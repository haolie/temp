// source: Experience.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.PbModel.Experience.ExperienceExamineInfo', null, global);
goog.exportSymbol('proto.PbModel.Experience.ExperienceGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Experience.ExperienceGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Experience.ExperienceInheritInfo', null, global);
goog.exportSymbol('proto.PbModel.Experience.ExperienceSlostlandInfo', null, global);
goog.exportSymbol('proto.PbModel.Experience.ExperienceTowerInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Experience.ExperienceGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Experience.ExperienceGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Experience.ExperienceGetInfoReq.displayName = 'proto.PbModel.Experience.ExperienceGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Experience.ExperienceGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Experience.ExperienceGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Experience.ExperienceGetInfoRes.displayName = 'proto.PbModel.Experience.ExperienceGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Experience.ExperienceTowerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Experience.ExperienceTowerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Experience.ExperienceTowerInfo.displayName = 'proto.PbModel.Experience.ExperienceTowerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Experience.ExperienceInheritInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Experience.ExperienceInheritInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Experience.ExperienceInheritInfo.displayName = 'proto.PbModel.Experience.ExperienceInheritInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Experience.ExperienceExamineInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Experience.ExperienceExamineInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Experience.ExperienceExamineInfo.displayName = 'proto.PbModel.Experience.ExperienceExamineInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Experience.ExperienceSlostlandInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Experience.ExperienceSlostlandInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Experience.ExperienceSlostlandInfo.displayName = 'proto.PbModel.Experience.ExperienceSlostlandInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Experience.ExperienceGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Experience.ExperienceGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Experience.ExperienceGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoReq}
 */
proto.PbModel.Experience.ExperienceGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Experience.ExperienceGetInfoReq;
  return proto.PbModel.Experience.ExperienceGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Experience.ExperienceGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoReq}
 */
proto.PbModel.Experience.ExperienceGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Experience.ExperienceGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Experience.ExperienceGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Experience.ExperienceGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Experience.ExperienceGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Experience.ExperienceGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    towerinfo: (f = msg.getTowerinfo()) && proto.PbModel.Experience.ExperienceTowerInfo.toObject(includeInstance, f),
    inheritinfo: (f = msg.getInheritinfo()) && proto.PbModel.Experience.ExperienceInheritInfo.toObject(includeInstance, f),
    examineinfo: (f = msg.getExamineinfo()) && proto.PbModel.Experience.ExperienceExamineInfo.toObject(includeInstance, f),
    experienceslostlandinfo: (f = msg.getExperienceslostlandinfo()) && proto.PbModel.Experience.ExperienceSlostlandInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Experience.ExperienceGetInfoRes;
  return proto.PbModel.Experience.ExperienceGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Experience.ExperienceGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Experience.ExperienceTowerInfo;
      reader.readMessage(value,proto.PbModel.Experience.ExperienceTowerInfo.deserializeBinaryFromReader);
      msg.setTowerinfo(value);
      break;
    case 2:
      var value = new proto.PbModel.Experience.ExperienceInheritInfo;
      reader.readMessage(value,proto.PbModel.Experience.ExperienceInheritInfo.deserializeBinaryFromReader);
      msg.setInheritinfo(value);
      break;
    case 3:
      var value = new proto.PbModel.Experience.ExperienceExamineInfo;
      reader.readMessage(value,proto.PbModel.Experience.ExperienceExamineInfo.deserializeBinaryFromReader);
      msg.setExamineinfo(value);
      break;
    case 4:
      var value = new proto.PbModel.Experience.ExperienceSlostlandInfo;
      reader.readMessage(value,proto.PbModel.Experience.ExperienceSlostlandInfo.deserializeBinaryFromReader);
      msg.setExperienceslostlandinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Experience.ExperienceGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Experience.ExperienceGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTowerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Experience.ExperienceTowerInfo.serializeBinaryToWriter
    );
  }
  f = message.getInheritinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PbModel.Experience.ExperienceInheritInfo.serializeBinaryToWriter
    );
  }
  f = message.getExamineinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PbModel.Experience.ExperienceExamineInfo.serializeBinaryToWriter
    );
  }
  f = message.getExperienceslostlandinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PbModel.Experience.ExperienceSlostlandInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExperienceTowerInfo TowerInfo = 1;
 * @return {?proto.PbModel.Experience.ExperienceTowerInfo}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.getTowerinfo = function() {
  return /** @type{?proto.PbModel.Experience.ExperienceTowerInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Experience.ExperienceTowerInfo, 1));
};


/**
 * @param {?proto.PbModel.Experience.ExperienceTowerInfo|undefined} value
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
*/
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.setTowerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.clearTowerinfo = function() {
  return this.setTowerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.hasTowerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExperienceInheritInfo InheritInfo = 2;
 * @return {?proto.PbModel.Experience.ExperienceInheritInfo}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.getInheritinfo = function() {
  return /** @type{?proto.PbModel.Experience.ExperienceInheritInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Experience.ExperienceInheritInfo, 2));
};


/**
 * @param {?proto.PbModel.Experience.ExperienceInheritInfo|undefined} value
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
*/
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.setInheritinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.clearInheritinfo = function() {
  return this.setInheritinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.hasInheritinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ExperienceExamineInfo ExamineInfo = 3;
 * @return {?proto.PbModel.Experience.ExperienceExamineInfo}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.getExamineinfo = function() {
  return /** @type{?proto.PbModel.Experience.ExperienceExamineInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Experience.ExperienceExamineInfo, 3));
};


/**
 * @param {?proto.PbModel.Experience.ExperienceExamineInfo|undefined} value
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
*/
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.setExamineinfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.clearExamineinfo = function() {
  return this.setExamineinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.hasExamineinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExperienceSlostlandInfo ExperienceSlostlandInfo = 4;
 * @return {?proto.PbModel.Experience.ExperienceSlostlandInfo}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.getExperienceslostlandinfo = function() {
  return /** @type{?proto.PbModel.Experience.ExperienceSlostlandInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Experience.ExperienceSlostlandInfo, 4));
};


/**
 * @param {?proto.PbModel.Experience.ExperienceSlostlandInfo|undefined} value
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
*/
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.setExperienceslostlandinfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Experience.ExperienceGetInfoRes} returns this
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.clearExperienceslostlandinfo = function() {
  return this.setExperienceslostlandinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Experience.ExperienceGetInfoRes.prototype.hasExperienceslostlandinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Experience.ExperienceTowerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Experience.ExperienceTowerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Experience.ExperienceTowerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceTowerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rank: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Experience.ExperienceTowerInfo}
 */
proto.PbModel.Experience.ExperienceTowerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Experience.ExperienceTowerInfo;
  return proto.PbModel.Experience.ExperienceTowerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Experience.ExperienceTowerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Experience.ExperienceTowerInfo}
 */
proto.PbModel.Experience.ExperienceTowerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Experience.ExperienceTowerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Experience.ExperienceTowerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Experience.ExperienceTowerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceTowerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRank();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 NodeId = 1;
 * @return {number}
 */
proto.PbModel.Experience.ExperienceTowerInfo.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Experience.ExperienceTowerInfo} returns this
 */
proto.PbModel.Experience.ExperienceTowerInfo.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Rank = 2;
 * @return {number}
 */
proto.PbModel.Experience.ExperienceTowerInfo.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Experience.ExperienceTowerInfo} returns this
 */
proto.PbModel.Experience.ExperienceTowerInfo.prototype.setRank = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Experience.ExperienceInheritInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Experience.ExperienceInheritInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Experience.ExperienceInheritInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceInheritInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalfightcount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Experience.ExperienceInheritInfo}
 */
proto.PbModel.Experience.ExperienceInheritInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Experience.ExperienceInheritInfo;
  return proto.PbModel.Experience.ExperienceInheritInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Experience.ExperienceInheritInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Experience.ExperienceInheritInfo}
 */
proto.PbModel.Experience.ExperienceInheritInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalfightcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Experience.ExperienceInheritInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Experience.ExperienceInheritInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Experience.ExperienceInheritInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceInheritInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalfightcount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 TotalFightCount = 1;
 * @return {number}
 */
proto.PbModel.Experience.ExperienceInheritInfo.prototype.getTotalfightcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Experience.ExperienceInheritInfo} returns this
 */
proto.PbModel.Experience.ExperienceInheritInfo.prototype.setTotalfightcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Experience.ExperienceExamineInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Experience.ExperienceExamineInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Experience.ExperienceExamineInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceExamineInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    passcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalcount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Experience.ExperienceExamineInfo}
 */
proto.PbModel.Experience.ExperienceExamineInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Experience.ExperienceExamineInfo;
  return proto.PbModel.Experience.ExperienceExamineInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Experience.ExperienceExamineInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Experience.ExperienceExamineInfo}
 */
proto.PbModel.Experience.ExperienceExamineInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPasscount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Experience.ExperienceExamineInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Experience.ExperienceExamineInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Experience.ExperienceExamineInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceExamineInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPasscount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 PassCount = 1;
 * @return {number}
 */
proto.PbModel.Experience.ExperienceExamineInfo.prototype.getPasscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Experience.ExperienceExamineInfo} returns this
 */
proto.PbModel.Experience.ExperienceExamineInfo.prototype.setPasscount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 TotalCount = 2;
 * @return {number}
 */
proto.PbModel.Experience.ExperienceExamineInfo.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Experience.ExperienceExamineInfo} returns this
 */
proto.PbModel.Experience.ExperienceExamineInfo.prototype.setTotalcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Experience.ExperienceSlostlandInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Experience.ExperienceSlostlandInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    chapterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chapterprogress: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Experience.ExperienceSlostlandInfo}
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Experience.ExperienceSlostlandInfo;
  return proto.PbModel.Experience.ExperienceSlostlandInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Experience.ExperienceSlostlandInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Experience.ExperienceSlostlandInfo}
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChapterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChapterprogress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Experience.ExperienceSlostlandInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Experience.ExperienceSlostlandInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChapterid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChapterprogress();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 ChapterId = 1;
 * @return {number}
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.prototype.getChapterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Experience.ExperienceSlostlandInfo} returns this
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.prototype.setChapterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 ChapterProgress = 2;
 * @return {number}
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.prototype.getChapterprogress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Experience.ExperienceSlostlandInfo} returns this
 */
proto.PbModel.Experience.ExperienceSlostlandInfo.prototype.setChapterprogress = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.PbModel.Experience);

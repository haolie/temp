// source: Champion.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Player_pb = require('./Player_pb.js');
goog.object.extend(proto, Player_pb);
var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
var Team_pb = require('./Team_pb.js');
goog.object.extend(proto, Team_pb);
goog.exportSymbol('proto.PbModel.Champion.ChampionFightDetail', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionFightGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionFightGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGetReportReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGetReportRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessGetRecordReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessGetRecordRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessReceiveReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessReceiveRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessRecord', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionGuessRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionInfoModel', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPraiseGetRecordReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPraiseGetRecordRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPraiseReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPraiseRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPushChampionWindowRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPushGuessWindowRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPushInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPushScreamMarkRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionPushSignUpWindowRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionReport', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionSignUpGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionSignUpGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionSignUpReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionSignUpRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionTeamReq', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionTeamRes', null, global);
goog.exportSymbol('proto.PbModel.Champion.ChampionWinPlayer', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGetInfoReq.displayName = 'proto.PbModel.Champion.ChampionGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGetInfoRes.displayName = 'proto.PbModel.Champion.ChampionGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionInfoModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionInfoModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionInfoModel.displayName = 'proto.PbModel.Champion.ChampionInfoModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionFightGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionFightGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionFightGetInfoReq.displayName = 'proto.PbModel.Champion.ChampionFightGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionFightGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionFightGetInfoRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionFightGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionFightGetInfoRes.displayName = 'proto.PbModel.Champion.ChampionFightGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionFightDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionFightDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionFightDetail.displayName = 'proto.PbModel.Champion.ChampionFightDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGetReportReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGetReportReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGetReportReq.displayName = 'proto.PbModel.Champion.ChampionGetReportReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGetReportRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionGetReportRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGetReportRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGetReportRes.displayName = 'proto.PbModel.Champion.ChampionGetReportRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionReport.displayName = 'proto.PbModel.Champion.ChampionReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessReq.displayName = 'proto.PbModel.Champion.ChampionGuessReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessRes.displayName = 'proto.PbModel.Champion.ChampionGuessRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessGetInfoReq.displayName = 'proto.PbModel.Champion.ChampionGuessGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionGuessGetInfoRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessGetInfoRes.displayName = 'proto.PbModel.Champion.ChampionGuessGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessGetRecordReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessGetRecordReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessGetRecordReq.displayName = 'proto.PbModel.Champion.ChampionGuessGetRecordReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionGuessGetRecordRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessGetRecordRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessGetRecordRes.displayName = 'proto.PbModel.Champion.ChampionGuessGetRecordRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessRecord.displayName = 'proto.PbModel.Champion.ChampionGuessRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessReceiveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessReceiveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessReceiveReq.displayName = 'proto.PbModel.Champion.ChampionGuessReceiveReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionGuessReceiveRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionGuessReceiveRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionGuessReceiveRes.displayName = 'proto.PbModel.Champion.ChampionGuessReceiveRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPraiseReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPraiseReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPraiseReq.displayName = 'proto.PbModel.Champion.ChampionPraiseReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPraiseRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionPraiseRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPraiseRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPraiseRes.displayName = 'proto.PbModel.Champion.ChampionPraiseRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPraiseGetRecordReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPraiseGetRecordReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPraiseGetRecordReq.displayName = 'proto.PbModel.Champion.ChampionPraiseGetRecordReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionPraiseGetRecordRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPraiseGetRecordRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPraiseGetRecordRes.displayName = 'proto.PbModel.Champion.ChampionPraiseGetRecordRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionSignUpReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionSignUpReq.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionSignUpReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionSignUpReq.displayName = 'proto.PbModel.Champion.ChampionSignUpReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionSignUpRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionSignUpRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionSignUpRes.displayName = 'proto.PbModel.Champion.ChampionSignUpRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionSignUpGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionSignUpGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionSignUpGetInfoReq.displayName = 'proto.PbModel.Champion.ChampionSignUpGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionSignUpGetInfoRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionSignUpGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionSignUpGetInfoRes.displayName = 'proto.PbModel.Champion.ChampionSignUpGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.displayName = 'proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.displayName = 'proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionWinPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionWinPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionWinPlayer.displayName = 'proto.PbModel.Champion.ChampionWinPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionTeamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Champion.ChampionTeamReq.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Champion.ChampionTeamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionTeamReq.displayName = 'proto.PbModel.Champion.ChampionTeamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionTeamRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionTeamRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionTeamRes.displayName = 'proto.PbModel.Champion.ChampionTeamRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPushInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPushInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPushInfoRes.displayName = 'proto.PbModel.Champion.ChampionPushInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPushScreamMarkRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPushScreamMarkRes.displayName = 'proto.PbModel.Champion.ChampionPushScreamMarkRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPushSignUpWindowRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPushSignUpWindowRes.displayName = 'proto.PbModel.Champion.ChampionPushSignUpWindowRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPushGuessWindowRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPushGuessWindowRes.displayName = 'proto.PbModel.Champion.ChampionPushGuessWindowRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Champion.ChampionPushChampionWindowRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Champion.ChampionPushChampionWindowRes.displayName = 'proto.PbModel.Champion.ChampionPushChampionWindowRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGetInfoReq}
 */
proto.PbModel.Champion.ChampionGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGetInfoReq;
  return proto.PbModel.Champion.ChampionGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGetInfoReq}
 */
proto.PbModel.Champion.ChampionGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    championinfo: (f = msg.getChampioninfo()) && proto.PbModel.Champion.ChampionInfoModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGetInfoRes}
 */
proto.PbModel.Champion.ChampionGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGetInfoRes;
  return proto.PbModel.Champion.ChampionGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGetInfoRes}
 */
proto.PbModel.Champion.ChampionGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Champion.ChampionInfoModel;
      reader.readMessage(value,proto.PbModel.Champion.ChampionInfoModel.deserializeBinaryFromReader);
      msg.setChampioninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChampioninfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Champion.ChampionInfoModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChampionInfoModel ChampionInfo = 1;
 * @return {?proto.PbModel.Champion.ChampionInfoModel}
 */
proto.PbModel.Champion.ChampionGetInfoRes.prototype.getChampioninfo = function() {
  return /** @type{?proto.PbModel.Champion.ChampionInfoModel} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Champion.ChampionInfoModel, 1));
};


/**
 * @param {?proto.PbModel.Champion.ChampionInfoModel|undefined} value
 * @return {!proto.PbModel.Champion.ChampionGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionGetInfoRes.prototype.setChampioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGetInfoRes.prototype.clearChampioninfo = function() {
  return this.setChampioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGetInfoRes.prototype.hasChampioninfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionInfoModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionInfoModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionInfoModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    isopen: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    stage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    teamendtimetick: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startfighttimetick: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rank: jspb.Message.getFieldWithDefault(msg, 5, 0),
    haschampion: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionInfoModel}
 */
proto.PbModel.Champion.ChampionInfoModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionInfoModel;
  return proto.PbModel.Champion.ChampionInfoModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionInfoModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionInfoModel}
 */
proto.PbModel.Champion.ChampionInfoModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopen(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamendtimetick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartfighttimetick(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRank(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaschampion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionInfoModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionInfoModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionInfoModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsopen();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTeamendtimetick();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStartfighttimetick();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRank();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getHaschampion();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bool IsOpen = 1;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.getIsopen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionInfoModel} returns this
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.setIsopen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 Stage = 2;
 * @return {number}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionInfoModel} returns this
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 TeamEndTimeTick = 3;
 * @return {number}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.getTeamendtimetick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionInfoModel} returns this
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.setTeamendtimetick = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 StartFightTimeTick = 4;
 * @return {number}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.getStartfighttimetick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionInfoModel} returns this
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.setStartfighttimetick = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 Rank = 5;
 * @return {number}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionInfoModel} returns this
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.setRank = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool HasChampion = 6;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.getHaschampion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionInfoModel} returns this
 */
proto.PbModel.Champion.ChampionInfoModel.prototype.setHaschampion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionFightGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionFightGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    stage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    group: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoReq}
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionFightGetInfoReq;
  return proto.PbModel.Champion.ChampionFightGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionFightGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoReq}
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionFightGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionFightGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 Stage = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoReq} returns this
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Group = 2;
 * @return {string}
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoReq} returns this
 */
proto.PbModel.Champion.ChampionFightGetInfoReq.prototype.setGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionFightGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionFightGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fightdetaillistList: jspb.Message.toObjectList(msg.getFightdetaillistList(),
    proto.PbModel.Champion.ChampionFightDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoRes}
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionFightGetInfoRes;
  return proto.PbModel.Champion.ChampionFightGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionFightGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoRes}
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Champion.ChampionFightDetail;
      reader.readMessage(value,proto.PbModel.Champion.ChampionFightDetail.deserializeBinaryFromReader);
      msg.addFightdetaillist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionFightGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionFightGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFightdetaillistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Champion.ChampionFightDetail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChampionFightDetail FightDetailList = 1;
 * @return {!Array<!proto.PbModel.Champion.ChampionFightDetail>}
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.prototype.getFightdetaillistList = function() {
  return /** @type{!Array<!proto.PbModel.Champion.ChampionFightDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Champion.ChampionFightDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Champion.ChampionFightDetail>} value
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionFightGetInfoRes.prototype.setFightdetaillistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Champion.ChampionFightDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Champion.ChampionFightDetail}
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.prototype.addFightdetaillist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Champion.ChampionFightDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionFightGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionFightGetInfoRes.prototype.clearFightdetaillistList = function() {
  return this.setFightdetaillistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionFightDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionFightDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionFightDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    player1: (f = msg.getPlayer1()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    winplayerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    reportid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionFightDetail}
 */
proto.PbModel.Champion.ChampionFightDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionFightDetail;
  return proto.PbModel.Champion.ChampionFightDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionFightDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionFightDetail}
 */
proto.PbModel.Champion.ChampionFightDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 2:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinplayerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionFightDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionFightDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionFightDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getWinplayerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReportid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player1 = 1;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.getPlayer1 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionFightDetail} returns this
*/
proto.PbModel.Champion.ChampionFightDetail.prototype.setPlayer1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionFightDetail} returns this
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.clearPlayer1 = function() {
  return this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player2 = 2;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.getPlayer2 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 2));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionFightDetail} returns this
*/
proto.PbModel.Champion.ChampionFightDetail.prototype.setPlayer2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionFightDetail} returns this
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.clearPlayer2 = function() {
  return this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string WinPlayerId = 3;
 * @return {string}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.getWinplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionFightDetail} returns this
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.setWinplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ReportId = 4;
 * @return {string}
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.getReportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionFightDetail} returns this
 */
proto.PbModel.Champion.ChampionFightDetail.prototype.setReportid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGetReportReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGetReportReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGetReportReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetReportReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    reporttype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGetReportReq}
 */
proto.PbModel.Champion.ChampionGetReportReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGetReportReq;
  return proto.PbModel.Champion.ChampionGetReportReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGetReportReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGetReportReq}
 */
proto.PbModel.Champion.ChampionGetReportReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReporttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGetReportReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGetReportReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGetReportReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetReportReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReporttype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ReportType = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGetReportReq.prototype.getReporttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGetReportReq} returns this
 */
proto.PbModel.Champion.ChampionGetReportReq.prototype.setReporttype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionGetReportRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGetReportRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGetReportRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGetReportRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetReportRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportlistList: jspb.Message.toObjectList(msg.getReportlistList(),
    proto.PbModel.Champion.ChampionReport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGetReportRes}
 */
proto.PbModel.Champion.ChampionGetReportRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGetReportRes;
  return proto.PbModel.Champion.ChampionGetReportRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGetReportRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGetReportRes}
 */
proto.PbModel.Champion.ChampionGetReportRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Champion.ChampionReport;
      reader.readMessage(value,proto.PbModel.Champion.ChampionReport.deserializeBinaryFromReader);
      msg.addReportlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGetReportRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGetReportRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGetReportRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGetReportRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Champion.ChampionReport.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChampionReport ReportList = 1;
 * @return {!Array<!proto.PbModel.Champion.ChampionReport>}
 */
proto.PbModel.Champion.ChampionGetReportRes.prototype.getReportlistList = function() {
  return /** @type{!Array<!proto.PbModel.Champion.ChampionReport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Champion.ChampionReport, 1));
};


/**
 * @param {!Array<!proto.PbModel.Champion.ChampionReport>} value
 * @return {!proto.PbModel.Champion.ChampionGetReportRes} returns this
*/
proto.PbModel.Champion.ChampionGetReportRes.prototype.setReportlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Champion.ChampionReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Champion.ChampionReport}
 */
proto.PbModel.Champion.ChampionGetReportRes.prototype.addReportlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Champion.ChampionReport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionGetReportRes} returns this
 */
proto.PbModel.Champion.ChampionGetReportRes.prototype.clearReportlistList = function() {
  return this.setReportlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionReport.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    stage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    iswin: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    reportid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tgtplayerinfo: (f = msg.getTgtplayerinfo()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionReport}
 */
proto.PbModel.Champion.ChampionReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionReport;
  return proto.PbModel.Champion.ChampionReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionReport}
 */
proto.PbModel.Champion.ChampionReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportid(value);
      break;
    case 4:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setTgtplayerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIswin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getReportid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTgtplayerinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 Stage = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionReport.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionReport} returns this
 */
proto.PbModel.Champion.ChampionReport.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool IsWin = 2;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionReport.prototype.getIswin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionReport} returns this
 */
proto.PbModel.Champion.ChampionReport.prototype.setIswin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string ReportId = 3;
 * @return {string}
 */
proto.PbModel.Champion.ChampionReport.prototype.getReportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionReport} returns this
 */
proto.PbModel.Champion.ChampionReport.prototype.setReportid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes TgtPlayerInfo = 4;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionReport.prototype.getTgtplayerinfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 4));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionReport} returns this
*/
proto.PbModel.Champion.ChampionReport.prototype.setTgtplayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionReport} returns this
 */
proto.PbModel.Champion.ChampionReport.prototype.clearTgtplayerinfo = function() {
  return this.setTgtplayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionReport.prototype.hasTgtplayerinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    num: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessReq}
 */
proto.PbModel.Champion.ChampionGuessReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessReq;
  return proto.PbModel.Champion.ChampionGuessReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessReq}
 */
proto.PbModel.Champion.ChampionGuessReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Champion.ChampionGuessReq.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionGuessReq} returns this
 */
proto.PbModel.Champion.ChampionGuessReq.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 Num = 2;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessReq.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessReq} returns this
 */
proto.PbModel.Champion.ChampionGuessReq.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    num1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    num2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    odds1: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    odds2: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    playernum1: jspb.Message.getFieldWithDefault(msg, 5, 0),
    playernum2: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessRes}
 */
proto.PbModel.Champion.ChampionGuessRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessRes;
  return proto.PbModel.Champion.ChampionGuessRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessRes}
 */
proto.PbModel.Champion.ChampionGuessRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOdds1(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOdds2(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayernum1(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayernum2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum1();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNum2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOdds1();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getOdds2();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPlayernum1();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPlayernum2();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 Num1 = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.getNum1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRes} returns this
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.setNum1 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Num2 = 2;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.getNum2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRes} returns this
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.setNum2 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float Odds1 = 3;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.getOdds1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRes} returns this
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.setOdds1 = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float Odds2 = 4;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.getOdds2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRes} returns this
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.setOdds2 = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 PlayerNum1 = 5;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.getPlayernum1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRes} returns this
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.setPlayernum1 = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 PlayerNum2 = 6;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.getPlayernum2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRes} returns this
 */
proto.PbModel.Champion.ChampionGuessRes.prototype.setPlayernum2 = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    stage: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoReq}
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessGetInfoReq;
  return proto.PbModel.Champion.ChampionGuessGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoReq}
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 Stage = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoReq} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoReq.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    stage: jspb.Message.getFieldWithDefault(msg, 1, 0),
    player1: (f = msg.getPlayer1()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    teaminfo1List: jspb.Message.toObjectList(msg.getTeaminfo1List(),
    Team_pb.Team.toObject, includeInstance),
    teaminfo2List: jspb.Message.toObjectList(msg.getTeaminfo2List(),
    Team_pb.Team.toObject, includeInstance),
    num1: jspb.Message.getFieldWithDefault(msg, 6, 0),
    num2: jspb.Message.getFieldWithDefault(msg, 7, 0),
    odds1: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    odds2: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    winplayerid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    guessplayerid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    num: jspb.Message.getFieldWithDefault(msg, 12, 0),
    playernum1: jspb.Message.getFieldWithDefault(msg, 13, 0),
    playernum2: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessGetInfoRes;
  return proto.PbModel.Champion.ChampionGuessGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 2:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 3:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    case 4:
      var value = new Team_pb.Team;
      reader.readMessage(value,Team_pb.Team.deserializeBinaryFromReader);
      msg.addTeaminfo1(value);
      break;
    case 5:
      var value = new Team_pb.Team;
      reader.readMessage(value,Team_pb.Team.deserializeBinaryFromReader);
      msg.addTeaminfo2(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum1(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum2(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOdds1(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOdds2(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinplayerid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuessplayerid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayernum1(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayernum2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getTeaminfo1List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      Team_pb.Team.serializeBinaryToWriter
    );
  }
  f = message.getTeaminfo2List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      Team_pb.Team.serializeBinaryToWriter
    );
  }
  f = message.getNum1();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getNum2();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getOdds1();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getOdds2();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getWinplayerid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getGuessplayerid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getPlayernum1();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getPlayernum2();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
};


/**
 * optional int32 Stage = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player1 = 2;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getPlayer1 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 2));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setPlayer1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.clearPlayer1 = function() {
  return this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player2 = 3;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getPlayer2 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 3));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setPlayer2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.clearPlayer2 = function() {
  return this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PbModel.Team.Team TeamInfo1 = 4;
 * @return {!Array<!proto.PbModel.Team.Team>}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getTeaminfo1List = function() {
  return /** @type{!Array<!proto.PbModel.Team.Team>} */ (
    jspb.Message.getRepeatedWrapperField(this, Team_pb.Team, 4));
};


/**
 * @param {!Array<!proto.PbModel.Team.Team>} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setTeaminfo1List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.PbModel.Team.Team=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Team.Team}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.addTeaminfo1 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.PbModel.Team.Team, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.clearTeaminfo1List = function() {
  return this.setTeaminfo1List([]);
};


/**
 * repeated PbModel.Team.Team TeamInfo2 = 5;
 * @return {!Array<!proto.PbModel.Team.Team>}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getTeaminfo2List = function() {
  return /** @type{!Array<!proto.PbModel.Team.Team>} */ (
    jspb.Message.getRepeatedWrapperField(this, Team_pb.Team, 5));
};


/**
 * @param {!Array<!proto.PbModel.Team.Team>} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setTeaminfo2List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.PbModel.Team.Team=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Team.Team}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.addTeaminfo2 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.PbModel.Team.Team, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.clearTeaminfo2List = function() {
  return this.setTeaminfo2List([]);
};


/**
 * optional int32 Num1 = 6;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getNum1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setNum1 = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 Num2 = 7;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getNum2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setNum2 = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float Odds1 = 8;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getOdds1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setOdds1 = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float Odds2 = 9;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getOdds2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setOdds2 = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string WinPlayerId = 10;
 * @return {string}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getWinplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setWinplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string GuessPlayerId = 11;
 * @return {string}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getGuessplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setGuessplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 Num = 12;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 PlayerNum1 = 13;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getPlayernum1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setPlayernum1 = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 PlayerNum2 = 14;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.getPlayernum2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetInfoRes.prototype.setPlayernum2 = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessGetRecordReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessGetRecordReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessGetRecordReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetRecordReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessGetRecordReq}
 */
proto.PbModel.Champion.ChampionGuessGetRecordReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessGetRecordReq;
  return proto.PbModel.Champion.ChampionGuessGetRecordReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessGetRecordReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessGetRecordReq}
 */
proto.PbModel.Champion.ChampionGuessGetRecordReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessGetRecordReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessGetRecordReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessGetRecordReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetRecordReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessGetRecordRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessGetRecordRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    guessrecordlistList: jspb.Message.toObjectList(msg.getGuessrecordlistList(),
    proto.PbModel.Champion.ChampionGuessRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessGetRecordRes}
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessGetRecordRes;
  return proto.PbModel.Champion.ChampionGuessGetRecordRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessGetRecordRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessGetRecordRes}
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Champion.ChampionGuessRecord;
      reader.readMessage(value,proto.PbModel.Champion.ChampionGuessRecord.deserializeBinaryFromReader);
      msg.addGuessrecordlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessGetRecordRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessGetRecordRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuessrecordlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Champion.ChampionGuessRecord.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChampionGuessRecord GuessRecordList = 1;
 * @return {!Array<!proto.PbModel.Champion.ChampionGuessRecord>}
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.prototype.getGuessrecordlistList = function() {
  return /** @type{!Array<!proto.PbModel.Champion.ChampionGuessRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Champion.ChampionGuessRecord, 1));
};


/**
 * @param {!Array<!proto.PbModel.Champion.ChampionGuessRecord>} value
 * @return {!proto.PbModel.Champion.ChampionGuessGetRecordRes} returns this
*/
proto.PbModel.Champion.ChampionGuessGetRecordRes.prototype.setGuessrecordlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Champion.ChampionGuessRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Champion.ChampionGuessRecord}
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.prototype.addGuessrecordlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Champion.ChampionGuessRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionGuessGetRecordRes} returns this
 */
proto.PbModel.Champion.ChampionGuessGetRecordRes.prototype.clearGuessrecordlistList = function() {
  return this.setGuessrecordlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    isguesswell: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    stage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    num: jspb.Message.getFieldWithDefault(msg, 3, 0),
    odds: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    getnum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isreceive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    player1: (f = msg.getPlayer1()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    winplayerid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessRecord}
 */
proto.PbModel.Champion.ChampionGuessRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessRecord;
  return proto.PbModel.Champion.ChampionGuessRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessRecord}
 */
proto.PbModel.Champion.ChampionGuessRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsguesswell(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOdds(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGetnum(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreceive(value);
      break;
    case 7:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 8:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsguesswell();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOdds();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getGetnum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsreceive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getWinplayerid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional bool IsGuessWell = 1;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getIsguesswell = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.setIsguesswell = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 Stage = 2;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 Num = 3;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float Odds = 4;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getOdds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.setOdds = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 GetNum = 5;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getGetnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.setGetnum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool IsReceive = 6;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getIsreceive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.setIsreceive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player1 = 7;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getPlayer1 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 7));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
*/
proto.PbModel.Champion.ChampionGuessRecord.prototype.setPlayer1 = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.clearPlayer1 = function() {
  return this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player2 = 8;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getPlayer2 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 8));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
*/
proto.PbModel.Champion.ChampionGuessRecord.prototype.setPlayer2 = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.clearPlayer2 = function() {
  return this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string WinPlayerId = 9;
 * @return {string}
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.getWinplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionGuessRecord} returns this
 */
proto.PbModel.Champion.ChampionGuessRecord.prototype.setWinplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessReceiveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessReceiveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    stage: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessReceiveReq}
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessReceiveReq;
  return proto.PbModel.Champion.ChampionGuessReceiveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessReceiveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessReceiveReq}
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessReceiveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessReceiveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 Stage = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionGuessReceiveReq} returns this
 */
proto.PbModel.Champion.ChampionGuessReceiveReq.prototype.setStage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionGuessReceiveRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionGuessReceiveRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientresourcemodel: (f = msg.getClientresourcemodel()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionGuessReceiveRes}
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionGuessReceiveRes;
  return proto.PbModel.Champion.ChampionGuessReceiveRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionGuessReceiveRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionGuessReceiveRes}
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setClientresourcemodel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionGuessReceiveRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionGuessReceiveRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientresourcemodel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional PbModel.Resource.ResourceToClientModel ClientResourceModel = 1;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.prototype.getClientresourcemodel = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 1));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Champion.ChampionGuessReceiveRes} returns this
*/
proto.PbModel.Champion.ChampionGuessReceiveRes.prototype.setClientresourcemodel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionGuessReceiveRes} returns this
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.prototype.clearClientresourcemodel = function() {
  return this.setClientresourcemodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionGuessReceiveRes.prototype.hasClientresourcemodel = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPraiseReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPraiseReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPraiseReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPraiseReq}
 */
proto.PbModel.Champion.ChampionPraiseReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPraiseReq;
  return proto.PbModel.Champion.ChampionPraiseReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPraiseReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPraiseReq}
 */
proto.PbModel.Champion.ChampionPraiseReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPraiseReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPraiseReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPraiseReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionPraiseRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPraiseRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPraiseRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    praisenamelistList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    clientresourcemodel: (f = msg.getClientresourcemodel()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPraiseRes}
 */
proto.PbModel.Champion.ChampionPraiseRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPraiseRes;
  return proto.PbModel.Champion.ChampionPraiseRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPraiseRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPraiseRes}
 */
proto.PbModel.Champion.ChampionPraiseRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPraisenamelist(value);
      break;
    case 2:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setClientresourcemodel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPraiseRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPraiseRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPraisenamelistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getClientresourcemodel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string PraiseNameList = 1;
 * @return {!Array<string>}
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.getPraisenamelistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Champion.ChampionPraiseRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.setPraisenamelistList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Champion.ChampionPraiseRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.addPraisenamelist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionPraiseRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.clearPraisenamelistList = function() {
  return this.setPraisenamelistList([]);
};


/**
 * optional PbModel.Resource.ResourceToClientModel ClientResourceModel = 2;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.getClientresourcemodel = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 2));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Champion.ChampionPraiseRes} returns this
*/
proto.PbModel.Champion.ChampionPraiseRes.prototype.setClientresourcemodel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionPraiseRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.clearClientresourcemodel = function() {
  return this.setClientresourcemodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionPraiseRes.prototype.hasClientresourcemodel = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPraiseGetRecordReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPraiseGetRecordReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseGetRecordReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordReq}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPraiseGetRecordReq;
  return proto.PbModel.Champion.ChampionPraiseGetRecordReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPraiseGetRecordReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordReq}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPraiseGetRecordReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPraiseGetRecordReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseGetRecordReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPraiseGetRecordRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    praisenamelistList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    championinfo: (f = msg.getChampioninfo()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    ispraise: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPraiseGetRecordRes;
  return proto.PbModel.Champion.ChampionPraiseGetRecordRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPraisenamelist(value);
      break;
    case 2:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setChampioninfo(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspraise(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPraiseGetRecordRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPraisenamelistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getChampioninfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getIspraise();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated string PraiseNameList = 1;
 * @return {!Array<string>}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.getPraisenamelistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.setPraisenamelistList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.addPraisenamelist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.clearPraisenamelistList = function() {
  return this.setPraisenamelistList([]);
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes ChampionInfo = 2;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.getChampioninfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 2));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} returns this
*/
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.setChampioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.clearChampioninfo = function() {
  return this.setChampioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.hasChampioninfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool IsPraise = 3;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.getIspraise = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionPraiseGetRecordRes} returns this
 */
proto.PbModel.Champion.ChampionPraiseGetRecordRes.prototype.setIspraise = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionSignUpReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionSignUpReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionSignUpReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionSignUpReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    teaminfoList: jspb.Message.toObjectList(msg.getTeaminfoList(),
    Team_pb.Team.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionSignUpReq}
 */
proto.PbModel.Champion.ChampionSignUpReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionSignUpReq;
  return proto.PbModel.Champion.ChampionSignUpReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionSignUpReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionSignUpReq}
 */
proto.PbModel.Champion.ChampionSignUpReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Team_pb.Team;
      reader.readMessage(value,Team_pb.Team.deserializeBinaryFromReader);
      msg.addTeaminfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionSignUpReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionSignUpReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionSignUpReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeaminfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Team_pb.Team.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PbModel.Team.Team TeamInfo = 1;
 * @return {!Array<!proto.PbModel.Team.Team>}
 */
proto.PbModel.Champion.ChampionSignUpReq.prototype.getTeaminfoList = function() {
  return /** @type{!Array<!proto.PbModel.Team.Team>} */ (
    jspb.Message.getRepeatedWrapperField(this, Team_pb.Team, 1));
};


/**
 * @param {!Array<!proto.PbModel.Team.Team>} value
 * @return {!proto.PbModel.Champion.ChampionSignUpReq} returns this
*/
proto.PbModel.Champion.ChampionSignUpReq.prototype.setTeaminfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Team.Team=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Team.Team}
 */
proto.PbModel.Champion.ChampionSignUpReq.prototype.addTeaminfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Team.Team, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionSignUpReq} returns this
 */
proto.PbModel.Champion.ChampionSignUpReq.prototype.clearTeaminfoList = function() {
  return this.setTeaminfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionSignUpRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionSignUpRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionSignUpRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionSignUpRes}
 */
proto.PbModel.Champion.ChampionSignUpRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionSignUpRes;
  return proto.PbModel.Champion.ChampionSignUpRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionSignUpRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionSignUpRes}
 */
proto.PbModel.Champion.ChampionSignUpRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionSignUpRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionSignUpRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionSignUpRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionSignUpGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionSignUpGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoReq}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionSignUpGetInfoReq;
  return proto.PbModel.Champion.ChampionSignUpGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoReq}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionSignUpGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionSignUpGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    championinfo: (f = msg.getChampioninfo()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    topplayerinfoList: jspb.Message.toObjectList(msg.getTopplayerinfoList(),
    Player_pb.PlayerCommonInfoRes.toObject, includeInstance),
    issignup: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoRes}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionSignUpGetInfoRes;
  return proto.PbModel.Champion.ChampionSignUpGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoRes}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setChampioninfo(value);
      break;
    case 2:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.addTopplayerinfo(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssignup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionSignUpGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChampioninfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getTopplayerinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getIssignup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes ChampionInfo = 1;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.getChampioninfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.setChampioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.clearChampioninfo = function() {
  return this.setChampioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.hasChampioninfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PbModel.Player.PlayerCommonInfoRes TopPlayerInfo = 2;
 * @return {!Array<!proto.PbModel.Player.PlayerCommonInfoRes>}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.getTopplayerinfoList = function() {
  return /** @type{!Array<!proto.PbModel.Player.PlayerCommonInfoRes>} */ (
    jspb.Message.getRepeatedWrapperField(this, Player_pb.PlayerCommonInfoRes, 2));
};


/**
 * @param {!Array<!proto.PbModel.Player.PlayerCommonInfoRes>} value
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} returns this
*/
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.setTopplayerinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Player.PlayerCommonInfoRes=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.addTopplayerinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Player.PlayerCommonInfoRes, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.clearTopplayerinfoList = function() {
  return this.setTopplayerinfoList([]);
};


/**
 * optional bool IsSignUp = 3;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.getIssignup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionSignUpGetInfoRes} returns this
 */
proto.PbModel.Champion.ChampionSignUpGetInfoRes.prototype.setIssignup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq;
  return proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerlistList: jspb.Message.toObjectList(msg.getPlayerlistList(),
    proto.PbModel.Champion.ChampionWinPlayer.toObject, includeInstance),
    isfighting: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes;
  return proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Champion.ChampionWinPlayer;
      reader.readMessage(value,proto.PbModel.Champion.ChampionWinPlayer.deserializeBinaryFromReader);
      msg.addPlayerlist(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfighting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Champion.ChampionWinPlayer.serializeBinaryToWriter
    );
  }
  f = message.getIsfighting();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated ChampionWinPlayer PlayerList = 1;
 * @return {!Array<!proto.PbModel.Champion.ChampionWinPlayer>}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.getPlayerlistList = function() {
  return /** @type{!Array<!proto.PbModel.Champion.ChampionWinPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Champion.ChampionWinPlayer, 1));
};


/**
 * @param {!Array<!proto.PbModel.Champion.ChampionWinPlayer>} value
 * @return {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes} returns this
*/
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.setPlayerlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Champion.ChampionWinPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Champion.ChampionWinPlayer}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.addPlayerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Champion.ChampionWinPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes} returns this
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.clearPlayerlistList = function() {
  return this.setPlayerlistList([]);
};


/**
 * optional bool IsFighting = 2;
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.getIsfighting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes} returns this
 */
proto.PbModel.Champion.ChampionSignUpGetWinPlayerRes.prototype.setIsfighting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionWinPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionWinPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionWinPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    servername: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionWinPlayer}
 */
proto.PbModel.Champion.ChampionWinPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionWinPlayer;
  return proto.PbModel.Champion.ChampionWinPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionWinPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionWinPlayer}
 */
proto.PbModel.Champion.ChampionWinPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionWinPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionWinPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionWinPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionWinPlayer} returns this
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionWinPlayer} returns this
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ServerName = 3;
 * @return {string}
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.getServername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Champion.ChampionWinPlayer} returns this
 */
proto.PbModel.Champion.ChampionWinPlayer.prototype.setServername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Champion.ChampionTeamReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionTeamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionTeamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionTeamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionTeamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    teaminfoList: jspb.Message.toObjectList(msg.getTeaminfoList(),
    Team_pb.Team.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionTeamReq}
 */
proto.PbModel.Champion.ChampionTeamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionTeamReq;
  return proto.PbModel.Champion.ChampionTeamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionTeamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionTeamReq}
 */
proto.PbModel.Champion.ChampionTeamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Team_pb.Team;
      reader.readMessage(value,Team_pb.Team.deserializeBinaryFromReader);
      msg.addTeaminfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionTeamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionTeamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionTeamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionTeamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeaminfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Team_pb.Team.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PbModel.Team.Team TeamInfo = 1;
 * @return {!Array<!proto.PbModel.Team.Team>}
 */
proto.PbModel.Champion.ChampionTeamReq.prototype.getTeaminfoList = function() {
  return /** @type{!Array<!proto.PbModel.Team.Team>} */ (
    jspb.Message.getRepeatedWrapperField(this, Team_pb.Team, 1));
};


/**
 * @param {!Array<!proto.PbModel.Team.Team>} value
 * @return {!proto.PbModel.Champion.ChampionTeamReq} returns this
*/
proto.PbModel.Champion.ChampionTeamReq.prototype.setTeaminfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Team.Team=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Team.Team}
 */
proto.PbModel.Champion.ChampionTeamReq.prototype.addTeaminfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Team.Team, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Champion.ChampionTeamReq} returns this
 */
proto.PbModel.Champion.ChampionTeamReq.prototype.clearTeaminfoList = function() {
  return this.setTeaminfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionTeamRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionTeamRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionTeamRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionTeamRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionTeamRes}
 */
proto.PbModel.Champion.ChampionTeamRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionTeamRes;
  return proto.PbModel.Champion.ChampionTeamRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionTeamRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionTeamRes}
 */
proto.PbModel.Champion.ChampionTeamRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionTeamRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionTeamRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionTeamRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionTeamRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPushInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPushInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPushInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    championinfo: (f = msg.getChampioninfo()) && proto.PbModel.Champion.ChampionInfoModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPushInfoRes}
 */
proto.PbModel.Champion.ChampionPushInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPushInfoRes;
  return proto.PbModel.Champion.ChampionPushInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPushInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPushInfoRes}
 */
proto.PbModel.Champion.ChampionPushInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Champion.ChampionInfoModel;
      reader.readMessage(value,proto.PbModel.Champion.ChampionInfoModel.deserializeBinaryFromReader);
      msg.setChampioninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPushInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPushInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPushInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChampioninfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Champion.ChampionInfoModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChampionInfoModel ChampionInfo = 1;
 * @return {?proto.PbModel.Champion.ChampionInfoModel}
 */
proto.PbModel.Champion.ChampionPushInfoRes.prototype.getChampioninfo = function() {
  return /** @type{?proto.PbModel.Champion.ChampionInfoModel} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Champion.ChampionInfoModel, 1));
};


/**
 * @param {?proto.PbModel.Champion.ChampionInfoModel|undefined} value
 * @return {!proto.PbModel.Champion.ChampionPushInfoRes} returns this
*/
proto.PbModel.Champion.ChampionPushInfoRes.prototype.setChampioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionPushInfoRes} returns this
 */
proto.PbModel.Champion.ChampionPushInfoRes.prototype.clearChampioninfo = function() {
  return this.setChampioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionPushInfoRes.prototype.hasChampioninfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPushScreamMarkRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPushScreamMarkRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    screammark: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPushScreamMarkRes}
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPushScreamMarkRes;
  return proto.PbModel.Champion.ChampionPushScreamMarkRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPushScreamMarkRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPushScreamMarkRes}
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScreammark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPushScreamMarkRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPushScreamMarkRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScreammark();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 ScreamMark = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.prototype.getScreammark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionPushScreamMarkRes} returns this
 */
proto.PbModel.Champion.ChampionPushScreamMarkRes.prototype.setScreammark = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPushSignUpWindowRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPushSignUpWindowRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    signupendtimetick: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signupfighttimetick: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPushSignUpWindowRes}
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPushSignUpWindowRes;
  return proto.PbModel.Champion.ChampionPushSignUpWindowRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPushSignUpWindowRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPushSignUpWindowRes}
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSignupendtimetick(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSignupfighttimetick(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPushSignUpWindowRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPushSignUpWindowRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignupendtimetick();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSignupfighttimetick();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 SignUpEndTimeTick = 1;
 * @return {number}
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.prototype.getSignupendtimetick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionPushSignUpWindowRes} returns this
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.prototype.setSignupendtimetick = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 SignUpFightTimeTick = 2;
 * @return {number}
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.prototype.getSignupfighttimetick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Champion.ChampionPushSignUpWindowRes} returns this
 */
proto.PbModel.Champion.ChampionPushSignUpWindowRes.prototype.setSignupfighttimetick = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPushGuessWindowRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPushGuessWindowRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    player1: (f = msg.getPlayer1()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPushGuessWindowRes}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPushGuessWindowRes;
  return proto.PbModel.Champion.ChampionPushGuessWindowRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPushGuessWindowRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPushGuessWindowRes}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 2:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPushGuessWindowRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPushGuessWindowRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player1 = 1;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.getPlayer1 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionPushGuessWindowRes} returns this
*/
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.setPlayer1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionPushGuessWindowRes} returns this
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.clearPlayer1 = function() {
  return this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes Player2 = 2;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.getPlayer2 = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 2));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionPushGuessWindowRes} returns this
*/
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.setPlayer2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionPushGuessWindowRes} returns this
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.clearPlayer2 = function() {
  return this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionPushGuessWindowRes.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Champion.ChampionPushChampionWindowRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Champion.ChampionPushChampionWindowRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    championinfo: (f = msg.getChampioninfo()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Champion.ChampionPushChampionWindowRes}
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Champion.ChampionPushChampionWindowRes;
  return proto.PbModel.Champion.ChampionPushChampionWindowRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Champion.ChampionPushChampionWindowRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Champion.ChampionPushChampionWindowRes}
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setChampioninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Champion.ChampionPushChampionWindowRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Champion.ChampionPushChampionWindowRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChampioninfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes ChampionInfo = 1;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.prototype.getChampioninfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Champion.ChampionPushChampionWindowRes} returns this
*/
proto.PbModel.Champion.ChampionPushChampionWindowRes.prototype.setChampioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Champion.ChampionPushChampionWindowRes} returns this
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.prototype.clearChampioninfo = function() {
  return this.setChampioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Champion.ChampionPushChampionWindowRes.prototype.hasChampioninfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.PbModel.Champion);

// source: PvePass.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
goog.exportSymbol('proto.PbModel.PvePass.PvePassDrawRewardReq', null, global);
goog.exportSymbol('proto.PbModel.PvePass.PvePassDrawRewardRes', null, global);
goog.exportSymbol('proto.PbModel.PvePass.PvePassGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.PvePass.PvePassGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.PvePass.PvePassPageInfo', null, global);
goog.exportSymbol('proto.PbModel.PvePass.PvePassTask', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.PvePass.PvePassDrawRewardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.PvePass.PvePassDrawRewardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.PvePass.PvePassDrawRewardReq.displayName = 'proto.PbModel.PvePass.PvePassDrawRewardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.PvePass.PvePassDrawRewardRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.PvePass.PvePassDrawRewardRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.PvePass.PvePassDrawRewardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.PvePass.PvePassDrawRewardRes.displayName = 'proto.PbModel.PvePass.PvePassDrawRewardRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.PvePass.PvePassGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.PvePass.PvePassGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.PvePass.PvePassGetInfoReq.displayName = 'proto.PbModel.PvePass.PvePassGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.PvePass.PvePassGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.PvePass.PvePassGetInfoRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.PvePass.PvePassGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.PvePass.PvePassGetInfoRes.displayName = 'proto.PbModel.PvePass.PvePassGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.PvePass.PvePassPageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.PvePass.PvePassPageInfo.repeatedFields_, null);
};
goog.inherits(proto.PbModel.PvePass.PvePassPageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.PvePass.PvePassPageInfo.displayName = 'proto.PbModel.PvePass.PvePassPageInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.PvePass.PvePassTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.PvePass.PvePassTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.PvePass.PvePassTask.displayName = 'proto.PbModel.PvePass.PvePassTask';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.PvePass.PvePassDrawRewardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.PvePass.PvePassDrawRewardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardReq}
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.PvePass.PvePassDrawRewardReq;
  return proto.PbModel.PvePass.PvePassDrawRewardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.PvePass.PvePassDrawRewardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardReq}
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActivityid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.PvePass.PvePassDrawRewardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.PvePass.PvePassDrawRewardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPageid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 ActivityId = 1;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.prototype.getActivityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardReq} returns this
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.prototype.setActivityid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 PageId = 2;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.prototype.getPageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardReq} returns this
 */
proto.PbModel.PvePass.PvePassDrawRewardReq.prototype.setPageid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.PvePass.PvePassDrawRewardRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.PvePass.PvePassDrawRewardRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    pvemaxnodeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tasklistList: jspb.Message.toObjectList(msg.getTasklistList(),
    proto.PbModel.PvePass.PvePassPageInfo.toObject, includeInstance),
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardRes}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.PvePass.PvePassDrawRewardRes;
  return proto.PbModel.PvePass.PvePassDrawRewardRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.PvePass.PvePassDrawRewardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardRes}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPvemaxnodeid(value);
      break;
    case 2:
      var value = new proto.PbModel.PvePass.PvePassPageInfo;
      reader.readMessage(value,proto.PbModel.PvePass.PvePassPageInfo.deserializeBinaryFromReader);
      msg.addTasklist(value);
      break;
    case 3:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.PvePass.PvePassDrawRewardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.PvePass.PvePassDrawRewardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPvemaxnodeid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTasklistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.PvePass.PvePassPageInfo.serializeBinaryToWriter
    );
  }
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 PveMaxNodeId = 1;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.getPvemaxnodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardRes} returns this
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.setPvemaxnodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PvePassPageInfo TaskList = 2;
 * @return {!Array<!proto.PbModel.PvePass.PvePassPageInfo>}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.getTasklistList = function() {
  return /** @type{!Array<!proto.PbModel.PvePass.PvePassPageInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.PvePass.PvePassPageInfo, 2));
};


/**
 * @param {!Array<!proto.PbModel.PvePass.PvePassPageInfo>} value
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardRes} returns this
*/
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.setTasklistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.PvePass.PvePassPageInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.PvePass.PvePassPageInfo}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.addTasklist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.PvePass.PvePassPageInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardRes} returns this
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.clearTasklistList = function() {
  return this.setTasklistList([]);
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 3;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 3));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardRes} returns this
*/
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.PvePass.PvePassDrawRewardRes} returns this
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.PvePass.PvePassDrawRewardRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.PvePass.PvePassGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.PvePass.PvePassGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.PvePass.PvePassGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.PvePass.PvePassGetInfoReq}
 */
proto.PbModel.PvePass.PvePassGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.PvePass.PvePassGetInfoReq;
  return proto.PbModel.PvePass.PvePassGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.PvePass.PvePassGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.PvePass.PvePassGetInfoReq}
 */
proto.PbModel.PvePass.PvePassGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActivityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.PvePass.PvePassGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.PvePass.PvePassGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.PvePass.PvePassGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ActivityId = 1;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassGetInfoReq.prototype.getActivityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassGetInfoReq} returns this
 */
proto.PbModel.PvePass.PvePassGetInfoReq.prototype.setActivityid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.PvePass.PvePassGetInfoRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.PvePass.PvePassGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.PvePass.PvePassGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    pvemaxnodeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tasklistList: jspb.Message.toObjectList(msg.getTasklistList(),
    proto.PbModel.PvePass.PvePassPageInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.PvePass.PvePassGetInfoRes}
 */
proto.PbModel.PvePass.PvePassGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.PvePass.PvePassGetInfoRes;
  return proto.PbModel.PvePass.PvePassGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.PvePass.PvePassGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.PvePass.PvePassGetInfoRes}
 */
proto.PbModel.PvePass.PvePassGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPvemaxnodeid(value);
      break;
    case 2:
      var value = new proto.PbModel.PvePass.PvePassPageInfo;
      reader.readMessage(value,proto.PbModel.PvePass.PvePassPageInfo.deserializeBinaryFromReader);
      msg.addTasklist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.PvePass.PvePassGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.PvePass.PvePassGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPvemaxnodeid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTasklistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.PvePass.PvePassPageInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 PveMaxNodeId = 1;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.getPvemaxnodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassGetInfoRes} returns this
 */
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.setPvemaxnodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PvePassPageInfo TaskList = 2;
 * @return {!Array<!proto.PbModel.PvePass.PvePassPageInfo>}
 */
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.getTasklistList = function() {
  return /** @type{!Array<!proto.PbModel.PvePass.PvePassPageInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.PvePass.PvePassPageInfo, 2));
};


/**
 * @param {!Array<!proto.PbModel.PvePass.PvePassPageInfo>} value
 * @return {!proto.PbModel.PvePass.PvePassGetInfoRes} returns this
*/
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.setTasklistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.PvePass.PvePassPageInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.PvePass.PvePassPageInfo}
 */
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.addTasklist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.PvePass.PvePassPageInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.PvePass.PvePassGetInfoRes} returns this
 */
proto.PbModel.PvePass.PvePassGetInfoRes.prototype.clearTasklistList = function() {
  return this.setTasklistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.PvePass.PvePassPageInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.PvePass.PvePassPageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.PvePass.PvePassPageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassPageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    ischarged: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    tasklistList: jspb.Message.toObjectList(msg.getTasklistList(),
    proto.PbModel.PvePass.PvePassTask.toObject, includeInstance),
    productid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.PvePass.PvePassPageInfo}
 */
proto.PbModel.PvePass.PvePassPageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.PvePass.PvePassPageInfo;
  return proto.PbModel.PvePass.PvePassPageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.PvePass.PvePassPageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.PvePass.PvePassPageInfo}
 */
proto.PbModel.PvePass.PvePassPageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscharged(value);
      break;
    case 4:
      var value = new proto.PbModel.PvePass.PvePassTask;
      reader.readMessage(value,proto.PbModel.PvePass.PvePassTask.deserializeBinaryFromReader);
      msg.addTasklist(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.PvePass.PvePassPageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.PvePass.PvePassPageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassPageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getIscharged();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTasklistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.PbModel.PvePass.PvePassTask.serializeBinaryToWriter
    );
  }
  f = message.getProductid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 PageId = 1;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.getPageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassPageInfo} returns this
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.setPageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double Price = 2;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassPageInfo} returns this
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool IsCharged = 3;
 * @return {boolean}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.getIscharged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.PvePass.PvePassPageInfo} returns this
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.setIscharged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated PvePassTask TaskList = 4;
 * @return {!Array<!proto.PbModel.PvePass.PvePassTask>}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.getTasklistList = function() {
  return /** @type{!Array<!proto.PbModel.PvePass.PvePassTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.PvePass.PvePassTask, 4));
};


/**
 * @param {!Array<!proto.PbModel.PvePass.PvePassTask>} value
 * @return {!proto.PbModel.PvePass.PvePassPageInfo} returns this
*/
proto.PbModel.PvePass.PvePassPageInfo.prototype.setTasklistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.PbModel.PvePass.PvePassTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.PvePass.PvePassTask}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.addTasklist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.PbModel.PvePass.PvePassTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.PvePass.PvePassPageInfo} returns this
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.clearTasklistList = function() {
  return this.setTasklistList([]);
};


/**
 * optional string ProductId = 5;
 * @return {string}
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.getProductid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.PvePass.PvePassPageInfo} returns this
 */
proto.PbModel.PvePass.PvePassPageInfo.prototype.setProductid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.PvePass.PvePassTask.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.PvePass.PvePassTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.PvePass.PvePassTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tagnodeid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    normalreward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    chargereward: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isnormaldraw: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    ischargedraw: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.PvePass.PvePassTask}
 */
proto.PbModel.PvePass.PvePassTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.PvePass.PvePassTask;
  return proto.PbModel.PvePass.PvePassTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.PvePass.PvePassTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.PvePass.PvePassTask}
 */
proto.PbModel.PvePass.PvePassTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTagnodeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormalreward(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChargereward(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnormaldraw(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIschargedraw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.PvePass.PvePassTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.PvePass.PvePassTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.PvePass.PvePassTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.PvePass.PvePassTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTagnodeid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNormalreward();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChargereward();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsnormaldraw();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIschargedraw();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 TaskId = 1;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassTask.prototype.getTaskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassTask} returns this
 */
proto.PbModel.PvePass.PvePassTask.prototype.setTaskid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 TagNodeId = 2;
 * @return {number}
 */
proto.PbModel.PvePass.PvePassTask.prototype.getTagnodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.PvePass.PvePassTask} returns this
 */
proto.PbModel.PvePass.PvePassTask.prototype.setTagnodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string NormalReward = 3;
 * @return {string}
 */
proto.PbModel.PvePass.PvePassTask.prototype.getNormalreward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.PvePass.PvePassTask} returns this
 */
proto.PbModel.PvePass.PvePassTask.prototype.setNormalreward = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ChargeReward = 4;
 * @return {string}
 */
proto.PbModel.PvePass.PvePassTask.prototype.getChargereward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.PvePass.PvePassTask} returns this
 */
proto.PbModel.PvePass.PvePassTask.prototype.setChargereward = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool IsNormalDraw = 5;
 * @return {boolean}
 */
proto.PbModel.PvePass.PvePassTask.prototype.getIsnormaldraw = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.PvePass.PvePassTask} returns this
 */
proto.PbModel.PvePass.PvePassTask.prototype.setIsnormaldraw = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool IsChargeDraw = 6;
 * @return {boolean}
 */
proto.PbModel.PvePass.PvePassTask.prototype.getIschargedraw = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.PvePass.PvePassTask} returns this
 */
proto.PbModel.PvePass.PvePassTask.prototype.setIschargedraw = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


goog.object.extend(exports, proto.PbModel.PvePass);

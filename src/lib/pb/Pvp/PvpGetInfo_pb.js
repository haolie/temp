// source: Pvp/PvpGetInfo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.PbModel.Pvp.PvpChallengeItem', null, global);
goog.exportSymbol('proto.PbModel.Pvp.PvpGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Pvp.PvpGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Pvp.PvpRankItem', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Pvp.PvpGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Pvp.PvpGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Pvp.PvpGetInfoReq.displayName = 'proto.PbModel.Pvp.PvpGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Pvp.PvpGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Pvp.PvpGetInfoRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Pvp.PvpGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Pvp.PvpGetInfoRes.displayName = 'proto.PbModel.Pvp.PvpGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Pvp.PvpRankItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Pvp.PvpRankItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Pvp.PvpRankItem.displayName = 'proto.PbModel.Pvp.PvpRankItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Pvp.PvpChallengeItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Pvp.PvpChallengeItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Pvp.PvpChallengeItem.displayName = 'proto.PbModel.Pvp.PvpChallengeItem';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Pvp.PvpGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Pvp.PvpGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Pvp.PvpGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Pvp.PvpGetInfoReq}
 */
proto.PbModel.Pvp.PvpGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Pvp.PvpGetInfoReq;
  return proto.PbModel.Pvp.PvpGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Pvp.PvpGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Pvp.PvpGetInfoReq}
 */
proto.PbModel.Pvp.PvpGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Pvp.PvpGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Pvp.PvpGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Pvp.PvpGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Pvp.PvpGetInfoRes.repeatedFields_ = [6,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Pvp.PvpGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Pvp.PvpGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxrank: jspb.Message.getFieldWithDefault(msg, 2, 0),
    myrank: jspb.Message.getFieldWithDefault(msg, 3, 0),
    myscore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxnum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    grouprewardreceivelistList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    dayrefreshtime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    weekrefreshtime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    topthreerankinfoList: jspb.Message.toObjectList(msg.getTopthreerankinfoList(),
    proto.PbModel.Pvp.PvpRankItem.toObject, includeInstance),
    challengeinfoList: jspb.Message.toObjectList(msg.getChallengeinfoList(),
    proto.PbModel.Pvp.PvpChallengeItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes}
 */
proto.PbModel.Pvp.PvpGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Pvp.PvpGetInfoRes;
  return proto.PbModel.Pvp.PvpGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Pvp.PvpGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes}
 */
proto.PbModel.Pvp.PvpGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxrank(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMyrank(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMyscore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxnum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addGrouprewardreceivelist(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDayrefreshtime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWeekrefreshtime(value);
      break;
    case 9:
      var value = new proto.PbModel.Pvp.PvpRankItem;
      reader.readMessage(value,proto.PbModel.Pvp.PvpRankItem.deserializeBinaryFromReader);
      msg.addTopthreerankinfo(value);
      break;
    case 10:
      var value = new proto.PbModel.Pvp.PvpChallengeItem;
      reader.readMessage(value,proto.PbModel.Pvp.PvpChallengeItem.deserializeBinaryFromReader);
      msg.addChallengeinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Pvp.PvpGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Pvp.PvpGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMaxrank();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMyrank();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMyscore();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMaxnum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGrouprewardreceivelistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getDayrefreshtime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getWeekrefreshtime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getTopthreerankinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.PbModel.Pvp.PvpRankItem.serializeBinaryToWriter
    );
  }
  f = message.getChallengeinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.PbModel.Pvp.PvpChallengeItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 GroupId = 1;
 * @return {number}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 MaxRank = 2;
 * @return {number}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getMaxrank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setMaxrank = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 MyRank = 3;
 * @return {number}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getMyrank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setMyrank = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 MyScore = 4;
 * @return {number}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getMyscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setMyscore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 MaxNum = 5;
 * @return {number}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getMaxnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setMaxnum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated string GroupRewardReceiveList = 6;
 * @return {!Array<string>}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getGrouprewardreceivelistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setGrouprewardreceivelistList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.addGrouprewardreceivelist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.clearGrouprewardreceivelistList = function() {
  return this.setGrouprewardreceivelistList([]);
};


/**
 * optional int64 DayRefreshTime = 7;
 * @return {number}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getDayrefreshtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setDayrefreshtime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 WeekRefreshTime = 8;
 * @return {number}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getWeekrefreshtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setWeekrefreshtime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated PvpRankItem TopThreeRankInfo = 9;
 * @return {!Array<!proto.PbModel.Pvp.PvpRankItem>}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getTopthreerankinfoList = function() {
  return /** @type{!Array<!proto.PbModel.Pvp.PvpRankItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Pvp.PvpRankItem, 9));
};


/**
 * @param {!Array<!proto.PbModel.Pvp.PvpRankItem>} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
*/
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setTopthreerankinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.PbModel.Pvp.PvpRankItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Pvp.PvpRankItem}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.addTopthreerankinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.PbModel.Pvp.PvpRankItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.clearTopthreerankinfoList = function() {
  return this.setTopthreerankinfoList([]);
};


/**
 * repeated PvpChallengeItem ChallengeInfo = 10;
 * @return {!Array<!proto.PbModel.Pvp.PvpChallengeItem>}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.getChallengeinfoList = function() {
  return /** @type{!Array<!proto.PbModel.Pvp.PvpChallengeItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Pvp.PvpChallengeItem, 10));
};


/**
 * @param {!Array<!proto.PbModel.Pvp.PvpChallengeItem>} value
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
*/
proto.PbModel.Pvp.PvpGetInfoRes.prototype.setChallengeinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.PbModel.Pvp.PvpChallengeItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Pvp.PvpChallengeItem}
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.addChallengeinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.PbModel.Pvp.PvpChallengeItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Pvp.PvpGetInfoRes} returns this
 */
proto.PbModel.Pvp.PvpGetInfoRes.prototype.clearChallengeinfoList = function() {
  return this.setChallengeinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Pvp.PvpRankItem.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Pvp.PvpRankItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Pvp.PvpRankItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpRankItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerinfo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    score: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isnpc: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Pvp.PvpRankItem}
 */
proto.PbModel.Pvp.PvpRankItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Pvp.PvpRankItem;
  return proto.PbModel.Pvp.PvpRankItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Pvp.PvpRankItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Pvp.PvpRankItem}
 */
proto.PbModel.Pvp.PvpRankItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerinfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnpc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Pvp.PvpRankItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Pvp.PvpRankItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Pvp.PvpRankItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpRankItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerinfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsnpc();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Pvp.PvpRankItem.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Pvp.PvpRankItem} returns this
 */
proto.PbModel.Pvp.PvpRankItem.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PlayerInfo = 2;
 * @return {string}
 */
proto.PbModel.Pvp.PvpRankItem.prototype.getPlayerinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Pvp.PvpRankItem} returns this
 */
proto.PbModel.Pvp.PvpRankItem.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 Score = 3;
 * @return {number}
 */
proto.PbModel.Pvp.PvpRankItem.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpRankItem} returns this
 */
proto.PbModel.Pvp.PvpRankItem.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool IsNpc = 4;
 * @return {boolean}
 */
proto.PbModel.Pvp.PvpRankItem.prototype.getIsnpc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Pvp.PvpRankItem} returns this
 */
proto.PbModel.Pvp.PvpRankItem.prototype.setIsnpc = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Pvp.PvpChallengeItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Pvp.PvpChallengeItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpChallengeItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerinfo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    num: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isnpc: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    npcid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Pvp.PvpChallengeItem}
 */
proto.PbModel.Pvp.PvpChallengeItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Pvp.PvpChallengeItem;
  return proto.PbModel.Pvp.PvpChallengeItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Pvp.PvpChallengeItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Pvp.PvpChallengeItem}
 */
proto.PbModel.Pvp.PvpChallengeItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerinfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnpc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNpcid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Pvp.PvpChallengeItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Pvp.PvpChallengeItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Pvp.PvpChallengeItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerinfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsnpc();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getNpcid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Pvp.PvpChallengeItem} returns this
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PlayerInfo = 2;
 * @return {string}
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.getPlayerinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Pvp.PvpChallengeItem} returns this
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 Num = 3;
 * @return {number}
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpChallengeItem} returns this
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool IsNpc = 4;
 * @return {boolean}
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.getIsnpc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Pvp.PvpChallengeItem} returns this
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.setIsnpc = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 NpcId = 5;
 * @return {number}
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.getNpcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Pvp.PvpChallengeItem} returns this
 */
proto.PbModel.Pvp.PvpChallengeItem.prototype.setNpcid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.PbModel.Pvp);

// source: Player.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Hero_pb = require('./Hero_pb.js');
goog.object.extend(proto, Hero_pb);
var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
var PlayerEquip_pb = require('./PlayerEquip_pb.js');
goog.object.extend(proto, PlayerEquip_pb);
goog.exportSymbol('proto.PbModel.Player.PlayerAlterPlayerNameReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerAlterPlayerNameRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerBaseInfo', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerCommonInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerDivinityClientBase', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerLoginForTestReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerLoginForTestRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerLoginReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerLoginRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerModifyLvForDebugReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerModifyLvForDebugRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerModifyNewStepInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerModifyNewStepInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerNewPlayerReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerNewPlayerRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerPushChargeRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerPushChatInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerPushFapInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerPushNewStepInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerPushReddotInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerPushRsInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerReLoginReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerReLoginRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerRedModuleInfo', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerRsInfo', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerShuCangInfo', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerViewAllInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerViewAllInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerViewBaseInfo', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerViewFashionInfo', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerViewReddotReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerViewReddotRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerXinTiaoReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerXinTiaoRes', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerYaceLoginReq', null, global);
goog.exportSymbol('proto.PbModel.Player.PlayerYaceLoginRes', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerModifyNewStepInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerModifyNewStepInfoReq.displayName = 'proto.PbModel.Player.PlayerModifyNewStepInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerModifyNewStepInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerModifyNewStepInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerModifyNewStepInfoRes.displayName = 'proto.PbModel.Player.PlayerModifyNewStepInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerPushNewStepInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerPushNewStepInfoRes.displayName = 'proto.PbModel.Player.PlayerPushNewStepInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerAlterPlayerNameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerAlterPlayerNameReq.displayName = 'proto.PbModel.Player.PlayerAlterPlayerNameReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerAlterPlayerNameRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerAlterPlayerNameRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerAlterPlayerNameRes.displayName = 'proto.PbModel.Player.PlayerAlterPlayerNameRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerBaseInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerBaseInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerBaseInfo.displayName = 'proto.PbModel.Player.PlayerBaseInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerCommonInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerCommonInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerCommonInfoRes.displayName = 'proto.PbModel.Player.PlayerCommonInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerDivinityClientBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerDivinityClientBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerDivinityClientBase.displayName = 'proto.PbModel.Player.PlayerDivinityClientBase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerLoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerLoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerLoginReq.displayName = 'proto.PbModel.Player.PlayerLoginReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerLoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerLoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerLoginRes.displayName = 'proto.PbModel.Player.PlayerLoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerLoginForTestReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerLoginForTestReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerLoginForTestReq.displayName = 'proto.PbModel.Player.PlayerLoginForTestReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerLoginForTestRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerLoginForTestRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerLoginForTestRes.displayName = 'proto.PbModel.Player.PlayerLoginForTestRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerModifyLvForDebugReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerModifyLvForDebugReq.displayName = 'proto.PbModel.Player.PlayerModifyLvForDebugReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerModifyLvForDebugRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerModifyLvForDebugRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerModifyLvForDebugRes.displayName = 'proto.PbModel.Player.PlayerModifyLvForDebugRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerNewPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerNewPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerNewPlayerReq.displayName = 'proto.PbModel.Player.PlayerNewPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerNewPlayerRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerNewPlayerRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerNewPlayerRes.displayName = 'proto.PbModel.Player.PlayerNewPlayerRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerPushChatInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerPushChatInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerPushChatInfoRes.displayName = 'proto.PbModel.Player.PlayerPushChatInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerReLoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerReLoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerReLoginReq.displayName = 'proto.PbModel.Player.PlayerReLoginReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerReLoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerReLoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerReLoginRes.displayName = 'proto.PbModel.Player.PlayerReLoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerRsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerRsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerRsInfo.displayName = 'proto.PbModel.Player.PlayerRsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerShuCangInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerShuCangInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerShuCangInfo.displayName = 'proto.PbModel.Player.PlayerShuCangInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerViewAllInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerViewAllInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerViewAllInfoReq.displayName = 'proto.PbModel.Player.PlayerViewAllInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerViewAllInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerViewAllInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerViewAllInfoRes.displayName = 'proto.PbModel.Player.PlayerViewAllInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerViewBaseInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerViewBaseInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerViewBaseInfo.displayName = 'proto.PbModel.Player.PlayerViewBaseInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerViewFashionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerViewFashionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerViewFashionInfo.displayName = 'proto.PbModel.Player.PlayerViewFashionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerViewReddotReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Player.PlayerViewReddotReq.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Player.PlayerViewReddotReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerViewReddotReq.displayName = 'proto.PbModel.Player.PlayerViewReddotReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerViewReddotRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerViewReddotRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerViewReddotRes.displayName = 'proto.PbModel.Player.PlayerViewReddotRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerXinTiaoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerXinTiaoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerXinTiaoReq.displayName = 'proto.PbModel.Player.PlayerXinTiaoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerXinTiaoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerXinTiaoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerXinTiaoRes.displayName = 'proto.PbModel.Player.PlayerXinTiaoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerYaceLoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerYaceLoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerYaceLoginReq.displayName = 'proto.PbModel.Player.PlayerYaceLoginReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerYaceLoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerYaceLoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerYaceLoginRes.displayName = 'proto.PbModel.Player.PlayerYaceLoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerPushFapInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerPushFapInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerPushFapInfoRes.displayName = 'proto.PbModel.Player.PlayerPushFapInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerPushReddotInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Player.PlayerPushReddotInfoRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Player.PlayerPushReddotInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerPushReddotInfoRes.displayName = 'proto.PbModel.Player.PlayerPushReddotInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerRedModuleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerRedModuleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerRedModuleInfo.displayName = 'proto.PbModel.Player.PlayerRedModuleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerPushChargeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerPushChargeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerPushChargeRes.displayName = 'proto.PbModel.Player.PlayerPushChargeRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Player.PlayerPushRsInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Player.PlayerPushRsInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Player.PlayerPushRsInfoRes.displayName = 'proto.PbModel.Player.PlayerPushRsInfoRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerModifyNewStepInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerModifyNewStepInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepkey: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stepvalue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerModifyNewStepInfoReq}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerModifyNewStepInfoReq;
  return proto.PbModel.Player.PlayerModifyNewStepInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerModifyNewStepInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerModifyNewStepInfoReq}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStepkey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStepvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerModifyNewStepInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerModifyNewStepInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepkey();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStepvalue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 StepKey = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.prototype.getStepkey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerModifyNewStepInfoReq} returns this
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.prototype.setStepkey = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 StepValue = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.prototype.getStepvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerModifyNewStepInfoReq} returns this
 */
proto.PbModel.Player.PlayerModifyNewStepInfoReq.prototype.setStepvalue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerModifyNewStepInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerModifyNewStepInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyNewStepInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerModifyNewStepInfoRes}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerModifyNewStepInfoRes;
  return proto.PbModel.Player.PlayerModifyNewStepInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerModifyNewStepInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerModifyNewStepInfoRes}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerModifyNewStepInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerModifyNewStepInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerModifyNewStepInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyNewStepInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerPushNewStepInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerPushNewStepInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepinfoMap: (f = msg.getStepinfoMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerPushNewStepInfoRes}
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerPushNewStepInfoRes;
  return proto.PbModel.Player.PlayerPushNewStepInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerPushNewStepInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerPushNewStepInfoRes}
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getStepinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerPushNewStepInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerPushNewStepInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<int32, int32> StepInfo = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.prototype.getStepinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Player.PlayerPushNewStepInfoRes} returns this
 */
proto.PbModel.Player.PlayerPushNewStepInfoRes.prototype.clearStepinfoMap = function() {
  this.getStepinfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerAlterPlayerNameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerAlterPlayerNameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    newplayername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    consumetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerAlterPlayerNameReq}
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerAlterPlayerNameReq;
  return proto.PbModel.Player.PlayerAlterPlayerNameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerAlterPlayerNameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerAlterPlayerNameReq}
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewplayername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConsumetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerAlterPlayerNameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerAlterPlayerNameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewplayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConsumetype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string NewPlayerName = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.prototype.getNewplayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerAlterPlayerNameReq} returns this
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.prototype.setNewplayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 ConsumeType = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.prototype.getConsumetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerAlterPlayerNameReq} returns this
 */
proto.PbModel.Player.PlayerAlterPlayerNameReq.prototype.setConsumetype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerAlterPlayerNameRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerAlterPlayerNameRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerAlterPlayerNameRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerAlterPlayerNameRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerAlterPlayerNameRes}
 */
proto.PbModel.Player.PlayerAlterPlayerNameRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerAlterPlayerNameRes;
  return proto.PbModel.Player.PlayerAlterPlayerNameRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerAlterPlayerNameRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerAlterPlayerNameRes}
 */
proto.PbModel.Player.PlayerAlterPlayerNameRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerAlterPlayerNameRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerAlterPlayerNameRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerAlterPlayerNameRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerAlterPlayerNameRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerBaseInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerBaseInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerBaseInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 5, 0),
    playername: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerBaseInfo}
 */
proto.PbModel.Player.PlayerBaseInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerBaseInfo;
  return proto.PbModel.Player.PlayerBaseInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerBaseInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerBaseInfo}
 */
proto.PbModel.Player.PlayerBaseInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerBaseInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerBaseInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerBaseInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnerid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerBaseInfo} returns this
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 PartnerId = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.getPartnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerBaseInfo} returns this
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.setPartnerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 ServerId = 3;
 * @return {number}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerBaseInfo} returns this
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string UserId = 4;
 * @return {string}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerBaseInfo} returns this
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 Gender = 5;
 * @return {number}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerBaseInfo} returns this
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.setGender = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string PlayerName = 6;
 * @return {string}
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerBaseInfo} returns this
 */
proto.PbModel.Player.PlayerBaseInfo.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerCommonInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerCommonInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerCommonInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    servername: jspb.Message.getFieldWithDefault(msg, 4, ""),
    servergroupid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    lv: jspb.Message.getFieldWithDefault(msg, 7, 0),
    vip: jspb.Message.getFieldWithDefault(msg, 8, 0),
    playername: jspb.Message.getFieldWithDefault(msg, 9, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 10, 0),
    fap: jspb.Message.getFieldWithDefault(msg, 11, 0),
    maxfap: jspb.Message.getFieldWithDefault(msg, 12, 0),
    guildid: jspb.Message.getFieldWithDefault(msg, 13, ""),
    guildname: jspb.Message.getFieldWithDefault(msg, 14, ""),
    wearfashionid: jspb.Message.getFieldWithDefault(msg, 15, 0),
    wearfashionheadid: jspb.Message.getFieldWithDefault(msg, 16, 0),
    wearfashionheadframeid: jspb.Message.getFieldWithDefault(msg, 17, 0),
    wearfashionvcardsid: jspb.Message.getFieldWithDefault(msg, 18, 0),
    biglv: jspb.Message.getFieldWithDefault(msg, 19, 0),
    headavatarurl: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Player.PlayerCommonInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerCommonInfoRes;
  return proto.PbModel.Player.PlayerCommonInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerCommonInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Player.PlayerCommonInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServername(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServergroupid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVip(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxfap(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuildid(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuildname(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionid(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionheadid(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionheadframeid(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionvcardsid(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBiglv(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadavatarurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerCommonInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerCommonInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerCommonInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnerid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getServername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServergroupid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getVip();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getMaxfap();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getGuildid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getGuildname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getWearfashionid();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getWearfashionheadid();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getWearfashionheadframeid();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getWearfashionvcardsid();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getBiglv();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getHeadavatarurl();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 PartnerId = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getPartnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setPartnerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 ServerId = 3;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ServerName = 4;
 * @return {string}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getServername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setServername = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 ServerGroupId = 5;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getServergroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setServergroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string UserId = 6;
 * @return {string}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 Lv = 7;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 Vip = 8;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setVip = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string PlayerName = 9;
 * @return {string}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 Gender = 10;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setGender = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 Fap = 11;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 MaxFap = 12;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getMaxfap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setMaxfap = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string GuildId = 13;
 * @return {string}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getGuildid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setGuildid = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string GuildName = 14;
 * @return {string}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getGuildname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setGuildname = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 WearFashionId = 15;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getWearfashionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setWearfashionid = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 WearFashionHeadId = 16;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getWearfashionheadid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setWearfashionheadid = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 WearFashionHeadframeId = 17;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getWearfashionheadframeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setWearfashionheadframeid = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 WearFashionVcardsId = 18;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getWearfashionvcardsid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setWearfashionvcardsid = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 BigLv = 19;
 * @return {number}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getBiglv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setBiglv = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string HeadAvatarUrl = 20;
 * @return {string}
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.getHeadavatarurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerCommonInfoRes} returns this
 */
proto.PbModel.Player.PlayerCommonInfoRes.prototype.setHeadavatarurl = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerDivinityClientBase.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerDivinityClientBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerDivinityClientBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerDivinityClientBase.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerDivinityClientBase}
 */
proto.PbModel.Player.PlayerDivinityClientBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerDivinityClientBase;
  return proto.PbModel.Player.PlayerDivinityClientBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerDivinityClientBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerDivinityClientBase}
 */
proto.PbModel.Player.PlayerDivinityClientBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerDivinityClientBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerDivinityClientBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerDivinityClientBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerDivinityClientBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerLoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerLoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerLoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partnerid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerLoginReq}
 */
proto.PbModel.Player.PlayerLoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerLoginReq;
  return proto.PbModel.Player.PlayerLoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerLoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerLoginReq}
 */
proto.PbModel.Player.PlayerLoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerLoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerLoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerLoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPartnerid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string UserId = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginReq} returns this
 */
proto.PbModel.Player.PlayerLoginReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 ServerId = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerLoginReq.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerLoginReq} returns this
 */
proto.PbModel.Player.PlayerLoginReq.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 PartnerId = 3;
 * @return {number}
 */
proto.PbModel.Player.PlayerLoginReq.prototype.getPartnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerLoginReq} returns this
 */
proto.PbModel.Player.PlayerLoginReq.prototype.setPartnerid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerLoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerLoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    safecode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isdefaultname: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isnewplayer: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerLoginRes}
 */
proto.PbModel.Player.PlayerLoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerLoginRes;
  return proto.PbModel.Player.PlayerLoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerLoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerLoginRes}
 */
proto.PbModel.Player.PlayerLoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdefaultname(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnewplayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerLoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerLoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSafecode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsdefaultname();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsnewplayer();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string SafeCode = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.getSafecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginRes} returns this
 */
proto.PbModel.Player.PlayerLoginRes.prototype.setSafecode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginRes} returns this
 */
proto.PbModel.Player.PlayerLoginRes.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string PlayerName = 3;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginRes} returns this
 */
proto.PbModel.Player.PlayerLoginRes.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UserId = 4;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginRes} returns this
 */
proto.PbModel.Player.PlayerLoginRes.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool IsDefaultName = 5;
 * @return {boolean}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.getIsdefaultname = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Player.PlayerLoginRes} returns this
 */
proto.PbModel.Player.PlayerLoginRes.prototype.setIsdefaultname = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool IsNewPlayer = 6;
 * @return {boolean}
 */
proto.PbModel.Player.PlayerLoginRes.prototype.getIsnewplayer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Player.PlayerLoginRes} returns this
 */
proto.PbModel.Player.PlayerLoginRes.prototype.setIsnewplayer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerLoginForTestReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerLoginForTestReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginForTestReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    os: jspb.Message.getFieldWithDefault(msg, 2, ""),
    randnum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inputencryptedstring: jspb.Message.getFieldWithDefault(msg, 4, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerLoginForTestReq}
 */
proto.PbModel.Player.PlayerLoginForTestReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerLoginForTestReq;
  return proto.PbModel.Player.PlayerLoginForTestReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerLoginForTestReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerLoginForTestReq}
 */
proto.PbModel.Player.PlayerLoginForTestReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRandnum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputencryptedstring(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerLoginForTestReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerLoginForTestReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginForTestReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRandnum();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInputencryptedstring();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string Device = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestReq} returns this
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Os = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestReq} returns this
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.setOs = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 RandNum = 3;
 * @return {number}
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.getRandnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestReq} returns this
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.setRandnum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string InputEncryptedString = 4;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.getInputencryptedstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestReq} returns this
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.setInputencryptedstring = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string PlayerName = 5;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestReq} returns this
 */
proto.PbModel.Player.PlayerLoginForTestReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerLoginForTestRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerLoginForTestRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginForTestRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    safecode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isdefaultname: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isnewplayer: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes}
 */
proto.PbModel.Player.PlayerLoginForTestRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerLoginForTestRes;
  return proto.PbModel.Player.PlayerLoginForTestRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerLoginForTestRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes}
 */
proto.PbModel.Player.PlayerLoginForTestRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdefaultname(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnewplayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerLoginForTestRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerLoginForTestRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerLoginForTestRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSafecode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsdefaultname();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsnewplayer();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string SafeCode = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.getSafecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes} returns this
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.setSafecode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes} returns this
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string PlayerName = 3;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes} returns this
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UserId = 4;
 * @return {string}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes} returns this
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool IsDefaultName = 5;
 * @return {boolean}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.getIsdefaultname = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes} returns this
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.setIsdefaultname = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool IsNewPlayer = 6;
 * @return {boolean}
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.getIsnewplayer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Player.PlayerLoginForTestRes} returns this
 */
proto.PbModel.Player.PlayerLoginForTestRes.prototype.setIsnewplayer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerModifyLvForDebugReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerModifyLvForDebugReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    lv: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerModifyLvForDebugReq}
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerModifyLvForDebugReq;
  return proto.PbModel.Player.PlayerModifyLvForDebugReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerModifyLvForDebugReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerModifyLvForDebugReq}
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerModifyLvForDebugReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerModifyLvForDebugReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 Lv = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerModifyLvForDebugReq} returns this
 */
proto.PbModel.Player.PlayerModifyLvForDebugReq.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerModifyLvForDebugRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerModifyLvForDebugRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerModifyLvForDebugRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyLvForDebugRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerModifyLvForDebugRes}
 */
proto.PbModel.Player.PlayerModifyLvForDebugRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerModifyLvForDebugRes;
  return proto.PbModel.Player.PlayerModifyLvForDebugRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerModifyLvForDebugRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerModifyLvForDebugRes}
 */
proto.PbModel.Player.PlayerModifyLvForDebugRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerModifyLvForDebugRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerModifyLvForDebugRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerModifyLvForDebugRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerModifyLvForDebugRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerNewPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerNewPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerNewPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerNewPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    gender: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerNewPlayerReq}
 */
proto.PbModel.Player.PlayerNewPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerNewPlayerReq;
  return proto.PbModel.Player.PlayerNewPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerNewPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerNewPlayerReq}
 */
proto.PbModel.Player.PlayerNewPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerNewPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerNewPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerNewPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerNewPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 Gender = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerNewPlayerReq.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerNewPlayerReq} returns this
 */
proto.PbModel.Player.PlayerNewPlayerReq.prototype.setGender = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerNewPlayerReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerNewPlayerReq} returns this
 */
proto.PbModel.Player.PlayerNewPlayerReq.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerNewPlayerRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerNewPlayerRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerNewPlayerRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerNewPlayerRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerNewPlayerRes}
 */
proto.PbModel.Player.PlayerNewPlayerRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerNewPlayerRes;
  return proto.PbModel.Player.PlayerNewPlayerRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerNewPlayerRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerNewPlayerRes}
 */
proto.PbModel.Player.PlayerNewPlayerRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerNewPlayerRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerNewPlayerRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerNewPlayerRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerNewPlayerRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerPushChatInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerPushChatInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerPushChatInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushChatInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaturl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chattoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerPushChatInfoRes}
 */
proto.PbModel.Player.PlayerPushChatInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerPushChatInfoRes;
  return proto.PbModel.Player.PlayerPushChatInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerPushChatInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerPushChatInfoRes}
 */
proto.PbModel.Player.PlayerPushChatInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChaturl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChattoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerPushChatInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerPushChatInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerPushChatInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushChatInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaturl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChattoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ChatUrl = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerPushChatInfoRes.prototype.getChaturl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerPushChatInfoRes} returns this
 */
proto.PbModel.Player.PlayerPushChatInfoRes.prototype.setChaturl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ChatToken = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerPushChatInfoRes.prototype.getChattoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerPushChatInfoRes} returns this
 */
proto.PbModel.Player.PlayerPushChatInfoRes.prototype.setChattoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerReLoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerReLoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerReLoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerReLoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerReLoginReq}
 */
proto.PbModel.Player.PlayerReLoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerReLoginReq;
  return proto.PbModel.Player.PlayerReLoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerReLoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerReLoginReq}
 */
proto.PbModel.Player.PlayerReLoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerReLoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerReLoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerReLoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerReLoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerReLoginReq.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerReLoginReq} returns this
 */
proto.PbModel.Player.PlayerReLoginReq.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Token = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerReLoginReq.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerReLoginReq} returns this
 */
proto.PbModel.Player.PlayerReLoginReq.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerReLoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerReLoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerReLoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerReLoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    safecode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerReLoginRes}
 */
proto.PbModel.Player.PlayerReLoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerReLoginRes;
  return proto.PbModel.Player.PlayerReLoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerReLoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerReLoginRes}
 */
proto.PbModel.Player.PlayerReLoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerReLoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerReLoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerReLoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerReLoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSafecode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string SafeCode = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerReLoginRes.prototype.getSafecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerReLoginRes} returns this
 */
proto.PbModel.Player.PlayerReLoginRes.prototype.setSafecode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerRsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerRsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerRsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    lv: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vip: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chargenum: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    biglv: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fap: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalfap: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerRsInfo}
 */
proto.PbModel.Player.PlayerRsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerRsInfo;
  return proto.PbModel.Player.PlayerRsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerRsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerRsInfo}
 */
proto.PbModel.Player.PlayerRsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVip(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChargenum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBiglv(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalfap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerRsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerRsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerRsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVip();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChargenum();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getBiglv();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTotalfap();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int32 Lv = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerRsInfo} returns this
 */
proto.PbModel.Player.PlayerRsInfo.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Vip = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerRsInfo} returns this
 */
proto.PbModel.Player.PlayerRsInfo.prototype.setVip = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double ChargeNum = 3;
 * @return {number}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.getChargenum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerRsInfo} returns this
 */
proto.PbModel.Player.PlayerRsInfo.prototype.setChargenum = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 BigLv = 4;
 * @return {number}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.getBiglv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerRsInfo} returns this
 */
proto.PbModel.Player.PlayerRsInfo.prototype.setBiglv = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Fap = 5;
 * @return {number}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerRsInfo} returns this
 */
proto.PbModel.Player.PlayerRsInfo.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 TotalFap = 6;
 * @return {number}
 */
proto.PbModel.Player.PlayerRsInfo.prototype.getTotalfap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerRsInfo} returns this
 */
proto.PbModel.Player.PlayerRsInfo.prototype.setTotalfap = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerShuCangInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerShuCangInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerShuCangInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lv: jspb.Message.getFieldWithDefault(msg, 5, 0),
    vip: jspb.Message.getFieldWithDefault(msg, 6, 0),
    chargenum: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerShuCangInfo}
 */
proto.PbModel.Player.PlayerShuCangInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerShuCangInfo;
  return proto.PbModel.Player.PlayerShuCangInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerShuCangInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerShuCangInfo}
 */
proto.PbModel.Player.PlayerShuCangInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVip(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChargenum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerShuCangInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerShuCangInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerShuCangInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnerid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getVip();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getChargenum();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerShuCangInfo} returns this
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 PartnerId = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.getPartnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerShuCangInfo} returns this
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.setPartnerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 ServerId = 3;
 * @return {number}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerShuCangInfo} returns this
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string UserId = 4;
 * @return {string}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerShuCangInfo} returns this
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 Lv = 5;
 * @return {number}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerShuCangInfo} returns this
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 Vip = 6;
 * @return {number}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerShuCangInfo} returns this
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.setVip = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 ChargeNum = 7;
 * @return {number}
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.getChargenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerShuCangInfo} returns this
 */
proto.PbModel.Player.PlayerShuCangInfo.prototype.setChargenum = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerViewAllInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerViewAllInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerViewAllInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewAllInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoReq}
 */
proto.PbModel.Player.PlayerViewAllInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerViewAllInfoReq;
  return proto.PbModel.Player.PlayerViewAllInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerViewAllInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoReq}
 */
proto.PbModel.Player.PlayerViewAllInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerViewAllInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerViewAllInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerViewAllInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewAllInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerViewAllInfoReq.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerViewAllInfoReq} returns this
 */
proto.PbModel.Player.PlayerViewAllInfoReq.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerViewAllInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerViewAllInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewAllInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseinfo: (f = msg.getBaseinfo()) && proto.PbModel.Player.PlayerViewBaseInfo.toObject(includeInstance, f),
    herosMap: (f = msg.getHerosMap()) ? f.toObject(includeInstance, proto.PbModel.Hero.HeroFullAttributeInfo.toObject) : [],
    fashioninfo: (f = msg.getFashioninfo()) && proto.PbModel.Player.PlayerViewFashionInfo.toObject(includeInstance, f),
    playerequipwearinfo: (f = msg.getPlayerequipwearinfo()) && PlayerEquip_pb.PlayerEquipInfo.toObject(includeInstance, f),
    playerattrMap: (f = msg.getPlayerattrMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerViewAllInfoRes;
  return proto.PbModel.Player.PlayerViewAllInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerViewAllInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Player.PlayerViewBaseInfo;
      reader.readMessage(value,proto.PbModel.Player.PlayerViewBaseInfo.deserializeBinaryFromReader);
      msg.setBaseinfo(value);
      break;
    case 2:
      var value = msg.getHerosMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Hero.HeroFullAttributeInfo.deserializeBinaryFromReader, "", new proto.PbModel.Hero.HeroFullAttributeInfo());
         });
      break;
    case 3:
      var value = new proto.PbModel.Player.PlayerViewFashionInfo;
      reader.readMessage(value,proto.PbModel.Player.PlayerViewFashionInfo.deserializeBinaryFromReader);
      msg.setFashioninfo(value);
      break;
    case 4:
      var value = new PlayerEquip_pb.PlayerEquipInfo;
      reader.readMessage(value,PlayerEquip_pb.PlayerEquipInfo.deserializeBinaryFromReader);
      msg.setPlayerequipwearinfo(value);
      break;
    case 5:
      var value = msg.getPlayerattrMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerViewAllInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerViewAllInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewAllInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Player.PlayerViewBaseInfo.serializeBinaryToWriter
    );
  }
  f = message.getHerosMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Hero.HeroFullAttributeInfo.serializeBinaryToWriter);
  }
  f = message.getFashioninfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PbModel.Player.PlayerViewFashionInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayerequipwearinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      PlayerEquip_pb.PlayerEquipInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayerattrMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt64);
  }
};


/**
 * optional PlayerViewBaseInfo BaseInfo = 1;
 * @return {?proto.PbModel.Player.PlayerViewBaseInfo}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.getBaseinfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerViewBaseInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Player.PlayerViewBaseInfo, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerViewBaseInfo|undefined} value
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
*/
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.setBaseinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.clearBaseinfo = function() {
  return this.setBaseinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.hasBaseinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, PbModel.Hero.HeroFullAttributeInfo> Heros = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.PbModel.Hero.HeroFullAttributeInfo>}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.getHerosMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.PbModel.Hero.HeroFullAttributeInfo>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.PbModel.Hero.HeroFullAttributeInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.clearHerosMap = function() {
  this.getHerosMap().clear();
  return this;};


/**
 * optional PlayerViewFashionInfo FashionInfo = 3;
 * @return {?proto.PbModel.Player.PlayerViewFashionInfo}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.getFashioninfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerViewFashionInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Player.PlayerViewFashionInfo, 3));
};


/**
 * @param {?proto.PbModel.Player.PlayerViewFashionInfo|undefined} value
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
*/
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.setFashioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.clearFashioninfo = function() {
  return this.setFashioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.hasFashioninfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PbModel.PlayerEquip.PlayerEquipInfo PlayerEquipWearInfo = 4;
 * @return {?proto.PbModel.PlayerEquip.PlayerEquipInfo}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.getPlayerequipwearinfo = function() {
  return /** @type{?proto.PbModel.PlayerEquip.PlayerEquipInfo} */ (
    jspb.Message.getWrapperField(this, PlayerEquip_pb.PlayerEquipInfo, 4));
};


/**
 * @param {?proto.PbModel.PlayerEquip.PlayerEquipInfo|undefined} value
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
*/
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.setPlayerequipwearinfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.clearPlayerequipwearinfo = function() {
  return this.setPlayerequipwearinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.hasPlayerequipwearinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<int32, int64> PlayerAttr = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.getPlayerattrMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Player.PlayerViewAllInfoRes} returns this
 */
proto.PbModel.Player.PlayerViewAllInfoRes.prototype.clearPlayerattrMap = function() {
  this.getPlayerattrMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerViewBaseInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerViewBaseInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewBaseInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    servername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fap: jspb.Message.getFieldWithDefault(msg, 4, 0),
    headimageid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lv: jspb.Message.getFieldWithDefault(msg, 6, 0),
    registertime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    guildname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    ipaddress: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo}
 */
proto.PbModel.Player.PlayerViewBaseInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerViewBaseInfo;
  return proto.PbModel.Player.PlayerViewBaseInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerViewBaseInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo}
 */
proto.PbModel.Player.PlayerViewBaseInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServername(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadimageid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegistertime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuildname(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerViewBaseInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerViewBaseInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewBaseInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHeadimageid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRegistertime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getGuildname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIpaddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ServerName = 3;
 * @return {string}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getServername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setServername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 Fap = 4;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 HeadImageId = 5;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getHeadimageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setHeadimageid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 Lv = 6;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 RegisterTime = 7;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getRegistertime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setRegistertime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string GuildName = 8;
 * @return {string}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getGuildname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setGuildname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string IpAddress = 9;
 * @return {string}
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.getIpaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerViewBaseInfo} returns this
 */
proto.PbModel.Player.PlayerViewBaseInfo.prototype.setIpaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerViewFashionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerViewFashionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewFashionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    wearfashionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wearfashionheadid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wearfashionheadframeid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wearfashionvcardsid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    headavatarurl: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerViewFashionInfo}
 */
proto.PbModel.Player.PlayerViewFashionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerViewFashionInfo;
  return proto.PbModel.Player.PlayerViewFashionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerViewFashionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerViewFashionInfo}
 */
proto.PbModel.Player.PlayerViewFashionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionheadid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionheadframeid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWearfashionvcardsid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadavatarurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerViewFashionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerViewFashionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewFashionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWearfashionid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWearfashionheadid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWearfashionheadframeid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWearfashionvcardsid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHeadavatarurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 WearFashionId = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.getWearfashionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewFashionInfo} returns this
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.setWearfashionid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 WearFashionHeadId = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.getWearfashionheadid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewFashionInfo} returns this
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.setWearfashionheadid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 WearFashionHeadframeId = 3;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.getWearfashionheadframeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewFashionInfo} returns this
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.setWearfashionheadframeid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 WearFashionVcardsId = 4;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.getWearfashionvcardsid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewFashionInfo} returns this
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.setWearfashionvcardsid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string HeadAvatarUrl = 5;
 * @return {string}
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.getHeadavatarurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerViewFashionInfo} returns this
 */
proto.PbModel.Player.PlayerViewFashionInfo.prototype.setHeadavatarurl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Player.PlayerViewReddotReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerViewReddotReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerViewReddotReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewReddotReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerViewReddotReq}
 */
proto.PbModel.Player.PlayerViewReddotReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerViewReddotReq;
  return proto.PbModel.Player.PlayerViewReddotReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerViewReddotReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerViewReddotReq}
 */
proto.PbModel.Player.PlayerViewReddotReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerViewReddotReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerViewReddotReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewReddotReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSubidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional int32 Id = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerViewReddotReq} returns this
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string SubIds = 2;
 * @return {!Array<string>}
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.getSubidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Player.PlayerViewReddotReq} returns this
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.setSubidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Player.PlayerViewReddotReq} returns this
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.addSubids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Player.PlayerViewReddotReq} returns this
 */
proto.PbModel.Player.PlayerViewReddotReq.prototype.clearSubidsList = function() {
  return this.setSubidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerViewReddotRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerViewReddotRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerViewReddotRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewReddotRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerViewReddotRes}
 */
proto.PbModel.Player.PlayerViewReddotRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerViewReddotRes;
  return proto.PbModel.Player.PlayerViewReddotRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerViewReddotRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerViewReddotRes}
 */
proto.PbModel.Player.PlayerViewReddotRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerViewReddotRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerViewReddotRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerViewReddotRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerViewReddotRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerXinTiaoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerXinTiaoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerXinTiaoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerXinTiaoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerXinTiaoReq}
 */
proto.PbModel.Player.PlayerXinTiaoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerXinTiaoReq;
  return proto.PbModel.Player.PlayerXinTiaoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerXinTiaoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerXinTiaoReq}
 */
proto.PbModel.Player.PlayerXinTiaoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerXinTiaoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerXinTiaoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerXinTiaoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerXinTiaoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerXinTiaoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerXinTiaoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerXinTiaoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerXinTiaoRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerXinTiaoRes}
 */
proto.PbModel.Player.PlayerXinTiaoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerXinTiaoRes;
  return proto.PbModel.Player.PlayerXinTiaoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerXinTiaoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerXinTiaoRes}
 */
proto.PbModel.Player.PlayerXinTiaoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerXinTiaoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerXinTiaoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerXinTiaoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerXinTiaoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerYaceLoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerYaceLoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerYaceLoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerYaceLoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerYaceLoginReq}
 */
proto.PbModel.Player.PlayerYaceLoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerYaceLoginReq;
  return proto.PbModel.Player.PlayerYaceLoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerYaceLoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerYaceLoginReq}
 */
proto.PbModel.Player.PlayerYaceLoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerYaceLoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerYaceLoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerYaceLoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerYaceLoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string PlayerName = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerYaceLoginReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerYaceLoginReq} returns this
 */
proto.PbModel.Player.PlayerYaceLoginReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerYaceLoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerYaceLoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerYaceLoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    safecode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isdefaultname: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isnewplayer: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes}
 */
proto.PbModel.Player.PlayerYaceLoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerYaceLoginRes;
  return proto.PbModel.Player.PlayerYaceLoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerYaceLoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes}
 */
proto.PbModel.Player.PlayerYaceLoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdefaultname(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnewplayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerYaceLoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerYaceLoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerYaceLoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSafecode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsdefaultname();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsnewplayer();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string SafeCode = 1;
 * @return {string}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.getSafecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes} returns this
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.setSafecode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes} returns this
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string PlayerName = 3;
 * @return {string}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes} returns this
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UserId = 4;
 * @return {string}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes} returns this
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool IsDefaultName = 5;
 * @return {boolean}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.getIsdefaultname = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes} returns this
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.setIsdefaultname = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool IsNewPlayer = 6;
 * @return {boolean}
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.getIsnewplayer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Player.PlayerYaceLoginRes} returns this
 */
proto.PbModel.Player.PlayerYaceLoginRes.prototype.setIsnewplayer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerPushFapInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerPushFapInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerPushFapInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushFapInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fap: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalfap: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerPushFapInfoRes}
 */
proto.PbModel.Player.PlayerPushFapInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerPushFapInfoRes;
  return proto.PbModel.Player.PlayerPushFapInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerPushFapInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerPushFapInfoRes}
 */
proto.PbModel.Player.PlayerPushFapInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalfap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerPushFapInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerPushFapInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerPushFapInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushFapInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalfap();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 Fap = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerPushFapInfoRes.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerPushFapInfoRes} returns this
 */
proto.PbModel.Player.PlayerPushFapInfoRes.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 TotalFap = 2;
 * @return {number}
 */
proto.PbModel.Player.PlayerPushFapInfoRes.prototype.getTotalfap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerPushFapInfoRes} returns this
 */
proto.PbModel.Player.PlayerPushFapInfoRes.prototype.setTotalfap = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerPushReddotInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerPushReddotInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.PbModel.Player.PlayerRedModuleInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerPushReddotInfoRes}
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerPushReddotInfoRes;
  return proto.PbModel.Player.PlayerPushReddotInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerPushReddotInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerPushReddotInfoRes}
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Player.PlayerRedModuleInfo;
      reader.readMessage(value,proto.PbModel.Player.PlayerRedModuleInfo.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerPushReddotInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerPushReddotInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Player.PlayerRedModuleInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerRedModuleInfo Data = 1;
 * @return {!Array<!proto.PbModel.Player.PlayerRedModuleInfo>}
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.prototype.getDataList = function() {
  return /** @type{!Array<!proto.PbModel.Player.PlayerRedModuleInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Player.PlayerRedModuleInfo, 1));
};


/**
 * @param {!Array<!proto.PbModel.Player.PlayerRedModuleInfo>} value
 * @return {!proto.PbModel.Player.PlayerPushReddotInfoRes} returns this
*/
proto.PbModel.Player.PlayerPushReddotInfoRes.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Player.PlayerRedModuleInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Player.PlayerRedModuleInfo}
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Player.PlayerRedModuleInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Player.PlayerPushReddotInfoRes} returns this
 */
proto.PbModel.Player.PlayerPushReddotInfoRes.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerRedModuleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerRedModuleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerRedModuleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerRedModuleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    submoduleid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    infoMap: (f = msg.getInfoMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerRedModuleInfo}
 */
proto.PbModel.Player.PlayerRedModuleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerRedModuleInfo;
  return proto.PbModel.Player.PlayerRedModuleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerRedModuleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerRedModuleInfo}
 */
proto.PbModel.Player.PlayerRedModuleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubmoduleid(value);
      break;
    case 2:
      var value = msg.getInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerRedModuleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerRedModuleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerRedModuleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerRedModuleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmoduleid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * optional int32 SubModuleId = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerRedModuleInfo.prototype.getSubmoduleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerRedModuleInfo} returns this
 */
proto.PbModel.Player.PlayerRedModuleInfo.prototype.setSubmoduleid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, bool> Info = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.PbModel.Player.PlayerRedModuleInfo.prototype.getInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Player.PlayerRedModuleInfo} returns this
 */
proto.PbModel.Player.PlayerRedModuleInfo.prototype.clearInfoMap = function() {
  this.getInfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerPushChargeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerPushChargeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerPushChargeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushChargeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    chargetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientresourcemodel: (f = msg.getClientresourcemodel()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerPushChargeRes}
 */
proto.PbModel.Player.PlayerPushChargeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerPushChargeRes;
  return proto.PbModel.Player.PlayerPushChargeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerPushChargeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerPushChargeRes}
 */
proto.PbModel.Player.PlayerPushChargeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChargetype(value);
      break;
    case 2:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setClientresourcemodel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerPushChargeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerPushChargeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerPushChargeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushChargeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChargetype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClientresourcemodel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 ChargeType = 1;
 * @return {number}
 */
proto.PbModel.Player.PlayerPushChargeRes.prototype.getChargetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Player.PlayerPushChargeRes} returns this
 */
proto.PbModel.Player.PlayerPushChargeRes.prototype.setChargetype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PbModel.Resource.ResourceToClientModel ClientResourceModel = 2;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Player.PlayerPushChargeRes.prototype.getClientresourcemodel = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 2));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Player.PlayerPushChargeRes} returns this
*/
proto.PbModel.Player.PlayerPushChargeRes.prototype.setClientresourcemodel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Player.PlayerPushChargeRes} returns this
 */
proto.PbModel.Player.PlayerPushChargeRes.prototype.clearClientresourcemodel = function() {
  return this.setClientresourcemodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Player.PlayerPushChargeRes.prototype.hasClientresourcemodel = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Player.PlayerPushRsInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Player.PlayerPushRsInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Player.PlayerPushRsInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushRsInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    rsinfo: (f = msg.getRsinfo()) && proto.PbModel.Player.PlayerRsInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Player.PlayerPushRsInfoRes}
 */
proto.PbModel.Player.PlayerPushRsInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Player.PlayerPushRsInfoRes;
  return proto.PbModel.Player.PlayerPushRsInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Player.PlayerPushRsInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Player.PlayerPushRsInfoRes}
 */
proto.PbModel.Player.PlayerPushRsInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Player.PlayerRsInfo;
      reader.readMessage(value,proto.PbModel.Player.PlayerRsInfo.deserializeBinaryFromReader);
      msg.setRsinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Player.PlayerPushRsInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Player.PlayerPushRsInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Player.PlayerPushRsInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Player.PlayerPushRsInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRsinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Player.PlayerRsInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerRsInfo RsInfo = 1;
 * @return {?proto.PbModel.Player.PlayerRsInfo}
 */
proto.PbModel.Player.PlayerPushRsInfoRes.prototype.getRsinfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerRsInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Player.PlayerRsInfo, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerRsInfo|undefined} value
 * @return {!proto.PbModel.Player.PlayerPushRsInfoRes} returns this
*/
proto.PbModel.Player.PlayerPushRsInfoRes.prototype.setRsinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Player.PlayerPushRsInfoRes} returns this
 */
proto.PbModel.Player.PlayerPushRsInfoRes.prototype.clearRsinfo = function() {
  return this.setRsinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Player.PlayerPushRsInfoRes.prototype.hasRsinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.PbModel.Player);

// source: ActivityTaskPass.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
goog.exportSymbol('proto.PbModel.ActivityTaskPass.ActivityTaskPassData', null, global);
goog.exportSymbol('proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward', null, global);
goog.exportSymbol('proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq', null, global);
goog.exportSymbol('proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.displayName = 'proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.displayName = 'proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.ActivityTaskPass.ActivityTaskPassData.repeatedFields_, null);
};
goog.inherits(proto.PbModel.ActivityTaskPass.ActivityTaskPassData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.ActivityTaskPass.ActivityTaskPassData.displayName = 'proto.PbModel.ActivityTaskPass.ActivityTaskPassData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.displayName = 'proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.displayName = 'proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.displayName = 'proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq;
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActivityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ActivityId = 1;
 * @return {number}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.prototype.getActivityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoReq.prototype.setActivityid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    activitytaskpassdata: (f = msg.getActivitytaskpassdata()) && proto.PbModel.ActivityTaskPass.ActivityTaskPassData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes;
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.ActivityTaskPass.ActivityTaskPassData;
      reader.readMessage(value,proto.PbModel.ActivityTaskPass.ActivityTaskPassData.deserializeBinaryFromReader);
      msg.setActivitytaskpassdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivitytaskpassdata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.ActivityTaskPass.ActivityTaskPassData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActivityTaskPassData ActivityTaskPassData = 1;
 * @return {?proto.PbModel.ActivityTaskPass.ActivityTaskPassData}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.prototype.getActivitytaskpassdata = function() {
  return /** @type{?proto.PbModel.ActivityTaskPass.ActivityTaskPassData} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.ActivityTaskPass.ActivityTaskPassData, 1));
};


/**
 * @param {?proto.PbModel.ActivityTaskPass.ActivityTaskPassData|undefined} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes} returns this
*/
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.prototype.setActivitytaskpassdata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.prototype.clearActivitytaskpassdata = function() {
  return this.setActivitytaskpassdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassGetInfoRes.prototype.hasActivitytaskpassdata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.toObject = function(includeInstance, msg) {
  var f, obj = {
    isunlocksenior: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    progressrewardlistList: jspb.Message.toObjectList(msg.getProgressrewardlistList(),
    proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.toObject, includeInstance),
    nowpoint: jspb.Message.getFieldWithDefault(msg, 3, 0),
    enddate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    productid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    price: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.ActivityTaskPass.ActivityTaskPassData;
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsunlocksenior(value);
      break;
    case 2:
      var value = new proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward;
      reader.readMessage(value,proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.deserializeBinaryFromReader);
      msg.addProgressrewardlist(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNowpoint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnddate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.ActivityTaskPass.ActivityTaskPassData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsunlocksenior();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getProgressrewardlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.serializeBinaryToWriter
    );
  }
  f = message.getNowpoint();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEnddate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getProductid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional bool IsUnlockSenior = 1;
 * @return {boolean}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.getIsunlocksenior = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.setIsunlocksenior = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated ActivityTaskPassProgressReward ProgressRewardList = 2;
 * @return {!Array<!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward>}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.getProgressrewardlistList = function() {
  return /** @type{!Array<!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward, 2));
};


/**
 * @param {!Array<!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward>} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} returns this
*/
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.setProgressrewardlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.addProgressrewardlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.clearProgressrewardlistList = function() {
  return this.setProgressrewardlistList([]);
};


/**
 * optional int32 NowPoint = 3;
 * @return {number}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.getNowpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.setNowpoint = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 EndDate = 4;
 * @return {number}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.getEnddate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.setEnddate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string ProductId = 5;
 * @return {string}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.getProductid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.setProductid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 Price = 6;
 * @return {number}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassData} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassData.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.toObject = function(includeInstance, msg) {
  var f, obj = {
    points: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commonreward: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seniorreward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    commonreceived: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    seniorreceived: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward;
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoints(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommonreward(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeniorreward(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommonreceived(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSeniorreceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoints();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommonreward();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeniorreward();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCommonreceived();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSeniorreceived();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 Points = 1;
 * @return {number}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.getPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.setPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string CommonReward = 2;
 * @return {string}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.getCommonreward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.setCommonreward = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string SeniorReward = 3;
 * @return {string}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.getSeniorreward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.setSeniorreward = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool CommonReceived = 4;
 * @return {boolean}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.getCommonreceived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.setCommonreceived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool SeniorReceived = 5;
 * @return {boolean}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.getSeniorreceived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassProgressReward.prototype.setSeniorreceived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq;
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActivityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ActivityId = 1;
 * @return {number}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.prototype.getActivityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressReq.prototype.setActivityid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    activitytaskpassdata: (f = msg.getActivitytaskpassdata()) && proto.PbModel.ActivityTaskPass.ActivityTaskPassData.toObject(includeInstance, f),
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes;
  return proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.ActivityTaskPass.ActivityTaskPassData;
      reader.readMessage(value,proto.PbModel.ActivityTaskPass.ActivityTaskPassData.deserializeBinaryFromReader);
      msg.setActivitytaskpassdata(value);
      break;
    case 2:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivitytaskpassdata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.ActivityTaskPass.ActivityTaskPassData.serializeBinaryToWriter
    );
  }
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional ActivityTaskPassData ActivityTaskPassData = 1;
 * @return {?proto.PbModel.ActivityTaskPass.ActivityTaskPassData}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.getActivitytaskpassdata = function() {
  return /** @type{?proto.PbModel.ActivityTaskPass.ActivityTaskPassData} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.ActivityTaskPass.ActivityTaskPassData, 1));
};


/**
 * @param {?proto.PbModel.ActivityTaskPass.ActivityTaskPassData|undefined} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes} returns this
*/
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.setActivitytaskpassdata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.clearActivitytaskpassdata = function() {
  return this.setActivitytaskpassdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.hasActivitytaskpassdata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 2;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 2));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes} returns this
*/
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes} returns this
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.ActivityTaskPass.ActivityTaskPassReceiveProgressRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.PbModel.ActivityTaskPass);

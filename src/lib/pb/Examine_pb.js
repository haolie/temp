// source: Examine.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Player_pb = require('./Player_pb.js');
goog.object.extend(proto, Player_pb);
var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
var Fight_pb = require('./Fight_pb.js');
goog.object.extend(proto, Fight_pb);
goog.exportSymbol('proto.PbModel.Examine.ExamineFapMinInfo', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineFightReq', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineFightRes', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineInfo', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineMinPassReq', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineMinPassRes', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExaminePassInfo', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineReceiveFristRewardReq', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineReceiveFristRewardRes', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineStarsMinInfo', null, global);
goog.exportSymbol('proto.PbModel.Examine.ExamineTeamHeroInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Examine.ExamineInfo.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Examine.ExamineInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineInfo.displayName = 'proto.PbModel.Examine.ExamineInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineFightReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineFightReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineFightReq.displayName = 'proto.PbModel.Examine.ExamineFightReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineFightRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineFightRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineFightRes.displayName = 'proto.PbModel.Examine.ExamineFightRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineGetInfoReq.displayName = 'proto.PbModel.Examine.ExamineGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineGetInfoRes.displayName = 'proto.PbModel.Examine.ExamineGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineReceiveFristRewardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineReceiveFristRewardReq.displayName = 'proto.PbModel.Examine.ExamineReceiveFristRewardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineReceiveFristRewardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineReceiveFristRewardRes.displayName = 'proto.PbModel.Examine.ExamineReceiveFristRewardRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineTeamHeroInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineTeamHeroInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineTeamHeroInfo.displayName = 'proto.PbModel.Examine.ExamineTeamHeroInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineMinPassReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineMinPassReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineMinPassReq.displayName = 'proto.PbModel.Examine.ExamineMinPassReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineMinPassRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineMinPassRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineMinPassRes.displayName = 'proto.PbModel.Examine.ExamineMinPassRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineFapMinInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineFapMinInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineFapMinInfo.displayName = 'proto.PbModel.Examine.ExamineFapMinInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExamineStarsMinInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Examine.ExamineStarsMinInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExamineStarsMinInfo.displayName = 'proto.PbModel.Examine.ExamineStarsMinInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Examine.ExaminePassInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Examine.ExaminePassInfo.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Examine.ExaminePassInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Examine.ExaminePassInfo.displayName = 'proto.PbModel.Examine.ExaminePassInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Examine.ExamineInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    chapterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    passnodeidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    receivefristreward: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    fristplayerinfo: (f = msg.getFristplayerinfo()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineInfo}
 */
proto.PbModel.Examine.ExamineInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineInfo;
  return proto.PbModel.Examine.ExamineInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineInfo}
 */
proto.PbModel.Examine.ExamineInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChapterid(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPassnodeidsList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceivefristreward(value);
      break;
    case 4:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setFristplayerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChapterid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPassnodeidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getReceivefristreward();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFristplayerinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 ChapterId = 1;
 * @return {number}
 */
proto.PbModel.Examine.ExamineInfo.prototype.getChapterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineInfo} returns this
 */
proto.PbModel.Examine.ExamineInfo.prototype.setChapterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 PassNodeIds = 2;
 * @return {!Array<number>}
 */
proto.PbModel.Examine.ExamineInfo.prototype.getPassnodeidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Examine.ExamineInfo} returns this
 */
proto.PbModel.Examine.ExamineInfo.prototype.setPassnodeidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Examine.ExamineInfo} returns this
 */
proto.PbModel.Examine.ExamineInfo.prototype.addPassnodeids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Examine.ExamineInfo} returns this
 */
proto.PbModel.Examine.ExamineInfo.prototype.clearPassnodeidsList = function() {
  return this.setPassnodeidsList([]);
};


/**
 * optional bool ReceiveFristReward = 3;
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineInfo.prototype.getReceivefristreward = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Examine.ExamineInfo} returns this
 */
proto.PbModel.Examine.ExamineInfo.prototype.setReceivefristreward = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes FristPlayerInfo = 4;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Examine.ExamineInfo.prototype.getFristplayerinfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 4));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Examine.ExamineInfo} returns this
*/
proto.PbModel.Examine.ExamineInfo.prototype.setFristplayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineInfo} returns this
 */
proto.PbModel.Examine.ExamineInfo.prototype.clearFristplayerinfo = function() {
  return this.setFristplayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineInfo.prototype.hasFristplayerinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineFightReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineFightReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineFightReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineFightReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    chapterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineFightReq}
 */
proto.PbModel.Examine.ExamineFightReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineFightReq;
  return proto.PbModel.Examine.ExamineFightReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineFightReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineFightReq}
 */
proto.PbModel.Examine.ExamineFightReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChapterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineFightReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineFightReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineFightReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineFightReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChapterid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 ChapterId = 1;
 * @return {number}
 */
proto.PbModel.Examine.ExamineFightReq.prototype.getChapterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineFightReq} returns this
 */
proto.PbModel.Examine.ExamineFightReq.prototype.setChapterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 NodeId = 2;
 * @return {number}
 */
proto.PbModel.Examine.ExamineFightReq.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineFightReq} returns this
 */
proto.PbModel.Examine.ExamineFightReq.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineFightRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineFightRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineFightRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    iswin: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    info: (f = msg.getInfo()) && proto.PbModel.Examine.ExamineInfo.toObject(includeInstance, f),
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f),
    islastnode: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    fightreport: (f = msg.getFightreport()) && Fight_pb.FightReport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineFightRes}
 */
proto.PbModel.Examine.ExamineFightRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineFightRes;
  return proto.PbModel.Examine.ExamineFightRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineFightRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineFightRes}
 */
proto.PbModel.Examine.ExamineFightRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswin(value);
      break;
    case 2:
      var value = new proto.PbModel.Examine.ExamineInfo;
      reader.readMessage(value,proto.PbModel.Examine.ExamineInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 3:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslastnode(value);
      break;
    case 5:
      var value = new Fight_pb.FightReport;
      reader.readMessage(value,Fight_pb.FightReport.deserializeBinaryFromReader);
      msg.setFightreport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineFightRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineFightRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineFightRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIswin();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PbModel.Examine.ExamineInfo.serializeBinaryToWriter
    );
  }
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
  f = message.getIslastnode();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFightreport();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      Fight_pb.FightReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool IsWin = 1;
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.getIswin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
 */
proto.PbModel.Examine.ExamineFightRes.prototype.setIswin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional ExamineInfo Info = 2;
 * @return {?proto.PbModel.Examine.ExamineInfo}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.getInfo = function() {
  return /** @type{?proto.PbModel.Examine.ExamineInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Examine.ExamineInfo, 2));
};


/**
 * @param {?proto.PbModel.Examine.ExamineInfo|undefined} value
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
*/
proto.PbModel.Examine.ExamineFightRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
 */
proto.PbModel.Examine.ExamineFightRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 3;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 3));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
*/
proto.PbModel.Examine.ExamineFightRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
 */
proto.PbModel.Examine.ExamineFightRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool IsLastNode = 4;
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.getIslastnode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
 */
proto.PbModel.Examine.ExamineFightRes.prototype.setIslastnode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional PbModel.Fight.FightReport FightReport = 5;
 * @return {?proto.PbModel.Fight.FightReport}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.getFightreport = function() {
  return /** @type{?proto.PbModel.Fight.FightReport} */ (
    jspb.Message.getWrapperField(this, Fight_pb.FightReport, 5));
};


/**
 * @param {?proto.PbModel.Fight.FightReport|undefined} value
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
*/
proto.PbModel.Examine.ExamineFightRes.prototype.setFightreport = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineFightRes} returns this
 */
proto.PbModel.Examine.ExamineFightRes.prototype.clearFightreport = function() {
  return this.setFightreport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineFightRes.prototype.hasFightreport = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineGetInfoReq}
 */
proto.PbModel.Examine.ExamineGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineGetInfoReq;
  return proto.PbModel.Examine.ExamineGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineGetInfoReq}
 */
proto.PbModel.Examine.ExamineGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    examinesMap: (f = msg.getExaminesMap()) ? f.toObject(includeInstance, proto.PbModel.Examine.ExamineInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineGetInfoRes}
 */
proto.PbModel.Examine.ExamineGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineGetInfoRes;
  return proto.PbModel.Examine.ExamineGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineGetInfoRes}
 */
proto.PbModel.Examine.ExamineGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getExaminesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Examine.ExamineInfo.deserializeBinaryFromReader, 0, new proto.PbModel.Examine.ExamineInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExaminesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Examine.ExamineInfo.serializeBinaryToWriter);
  }
};


/**
 * map<int32, ExamineInfo> Examines = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PbModel.Examine.ExamineInfo>}
 */
proto.PbModel.Examine.ExamineGetInfoRes.prototype.getExaminesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PbModel.Examine.ExamineInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.PbModel.Examine.ExamineInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Examine.ExamineGetInfoRes} returns this
 */
proto.PbModel.Examine.ExamineGetInfoRes.prototype.clearExaminesMap = function() {
  this.getExaminesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineReceiveFristRewardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineReceiveFristRewardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    chapterid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardReq}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineReceiveFristRewardReq;
  return proto.PbModel.Examine.ExamineReceiveFristRewardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineReceiveFristRewardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardReq}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChapterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineReceiveFristRewardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineReceiveFristRewardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChapterid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ChapterId = 1;
 * @return {number}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.prototype.getChapterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardReq} returns this
 */
proto.PbModel.Examine.ExamineReceiveFristRewardReq.prototype.setChapterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineReceiveFristRewardRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineReceiveFristRewardRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.PbModel.Examine.ExamineInfo.toObject(includeInstance, f),
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardRes}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineReceiveFristRewardRes;
  return proto.PbModel.Examine.ExamineReceiveFristRewardRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineReceiveFristRewardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardRes}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Examine.ExamineInfo;
      reader.readMessage(value,proto.PbModel.Examine.ExamineInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineReceiveFristRewardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineReceiveFristRewardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Examine.ExamineInfo.serializeBinaryToWriter
    );
  }
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExamineInfo Info = 1;
 * @return {?proto.PbModel.Examine.ExamineInfo}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.getInfo = function() {
  return /** @type{?proto.PbModel.Examine.ExamineInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Examine.ExamineInfo, 1));
};


/**
 * @param {?proto.PbModel.Examine.ExamineInfo|undefined} value
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardRes} returns this
*/
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardRes} returns this
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 2;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 2));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardRes} returns this
*/
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineReceiveFristRewardRes} returns this
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineReceiveFristRewardRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineTeamHeroInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineTeamHeroInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    heroid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modelid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lv: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stars: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fap: jspb.Message.getFieldWithDefault(msg, 5, 0),
    corpslv: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineTeamHeroInfo;
  return proto.PbModel.Examine.ExamineTeamHeroInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineTeamHeroInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeroid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModelid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStars(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorpslv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineTeamHeroInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineTeamHeroInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeroid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModelid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStars();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCorpslv();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string HeroId = 1;
 * @return {string}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.getHeroid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo} returns this
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.setHeroid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 ModelId = 2;
 * @return {number}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.getModelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo} returns this
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.setModelid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 Lv = 3;
 * @return {number}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo} returns this
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 Stars = 4;
 * @return {number}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.getStars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo} returns this
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.setStars = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Fap = 5;
 * @return {number}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo} returns this
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 CorpsLv = 6;
 * @return {number}
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.getCorpslv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo} returns this
 */
proto.PbModel.Examine.ExamineTeamHeroInfo.prototype.setCorpslv = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineMinPassReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineMinPassReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineMinPassReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineMinPassReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    chapterid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineMinPassReq}
 */
proto.PbModel.Examine.ExamineMinPassReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineMinPassReq;
  return proto.PbModel.Examine.ExamineMinPassReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineMinPassReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineMinPassReq}
 */
proto.PbModel.Examine.ExamineMinPassReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChapterid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineMinPassReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineMinPassReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineMinPassReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineMinPassReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChapterid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 ChapterId = 1;
 * @return {number}
 */
proto.PbModel.Examine.ExamineMinPassReq.prototype.getChapterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineMinPassReq} returns this
 */
proto.PbModel.Examine.ExamineMinPassReq.prototype.setChapterid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 NodeId = 2;
 * @return {number}
 */
proto.PbModel.Examine.ExamineMinPassReq.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineMinPassReq} returns this
 */
proto.PbModel.Examine.ExamineMinPassReq.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineMinPassRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineMinPassRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineMinPassRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fapmin: (f = msg.getFapmin()) && proto.PbModel.Examine.ExamineFapMinInfo.toObject(includeInstance, f),
    starsmin: (f = msg.getStarsmin()) && proto.PbModel.Examine.ExamineStarsMinInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineMinPassRes}
 */
proto.PbModel.Examine.ExamineMinPassRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineMinPassRes;
  return proto.PbModel.Examine.ExamineMinPassRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineMinPassRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineMinPassRes}
 */
proto.PbModel.Examine.ExamineMinPassRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Examine.ExamineFapMinInfo;
      reader.readMessage(value,proto.PbModel.Examine.ExamineFapMinInfo.deserializeBinaryFromReader);
      msg.setFapmin(value);
      break;
    case 2:
      var value = new proto.PbModel.Examine.ExamineStarsMinInfo;
      reader.readMessage(value,proto.PbModel.Examine.ExamineStarsMinInfo.deserializeBinaryFromReader);
      msg.setStarsmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineMinPassRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineMinPassRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineMinPassRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFapmin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Examine.ExamineFapMinInfo.serializeBinaryToWriter
    );
  }
  f = message.getStarsmin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PbModel.Examine.ExamineStarsMinInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExamineFapMinInfo FapMin = 1;
 * @return {?proto.PbModel.Examine.ExamineFapMinInfo}
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.getFapmin = function() {
  return /** @type{?proto.PbModel.Examine.ExamineFapMinInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Examine.ExamineFapMinInfo, 1));
};


/**
 * @param {?proto.PbModel.Examine.ExamineFapMinInfo|undefined} value
 * @return {!proto.PbModel.Examine.ExamineMinPassRes} returns this
*/
proto.PbModel.Examine.ExamineMinPassRes.prototype.setFapmin = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineMinPassRes} returns this
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.clearFapmin = function() {
  return this.setFapmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.hasFapmin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExamineStarsMinInfo StarsMin = 2;
 * @return {?proto.PbModel.Examine.ExamineStarsMinInfo}
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.getStarsmin = function() {
  return /** @type{?proto.PbModel.Examine.ExamineStarsMinInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Examine.ExamineStarsMinInfo, 2));
};


/**
 * @param {?proto.PbModel.Examine.ExamineStarsMinInfo|undefined} value
 * @return {!proto.PbModel.Examine.ExamineMinPassRes} returns this
*/
proto.PbModel.Examine.ExamineMinPassRes.prototype.setStarsmin = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineMinPassRes} returns this
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.clearStarsmin = function() {
  return this.setStarsmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineMinPassRes.prototype.hasStarsmin = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineFapMinInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineFapMinInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineFapMinInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    teamfap: jspb.Message.getFieldWithDefault(msg, 2, 0),
    passinfoMap: (f = msg.getPassinfoMap()) ? f.toObject(includeInstance, proto.PbModel.Examine.ExaminePassInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineFapMinInfo}
 */
proto.PbModel.Examine.ExamineFapMinInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineFapMinInfo;
  return proto.PbModel.Examine.ExamineFapMinInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineFapMinInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineFapMinInfo}
 */
proto.PbModel.Examine.ExamineFapMinInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamfap(value);
      break;
    case 3:
      var value = msg.getPassinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Examine.ExaminePassInfo.deserializeBinaryFromReader, 0, new proto.PbModel.Examine.ExaminePassInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineFapMinInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineFapMinInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineFapMinInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getTeamfap();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPassinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Examine.ExaminePassInfo.serializeBinaryToWriter);
  }
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes PlayerInfo = 1;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.getPlayerinfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Examine.ExamineFapMinInfo} returns this
*/
proto.PbModel.Examine.ExamineFapMinInfo.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineFapMinInfo} returns this
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.clearPlayerinfo = function() {
  return this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 TeamFap = 2;
 * @return {number}
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.getTeamfap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineFapMinInfo} returns this
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.setTeamfap = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<int32, ExaminePassInfo> PassInfo = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PbModel.Examine.ExaminePassInfo>}
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.getPassinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PbModel.Examine.ExaminePassInfo>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.PbModel.Examine.ExaminePassInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Examine.ExamineFapMinInfo} returns this
 */
proto.PbModel.Examine.ExamineFapMinInfo.prototype.clearPassinfoMap = function() {
  this.getPassinfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExamineStarsMinInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExamineStarsMinInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineStarsMinInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && Player_pb.PlayerCommonInfoRes.toObject(includeInstance, f),
    teamfap: jspb.Message.getFieldWithDefault(msg, 2, 0),
    passinfoMap: (f = msg.getPassinfoMap()) ? f.toObject(includeInstance, proto.PbModel.Examine.ExaminePassInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExamineStarsMinInfo}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExamineStarsMinInfo;
  return proto.PbModel.Examine.ExamineStarsMinInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExamineStarsMinInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExamineStarsMinInfo}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Player_pb.PlayerCommonInfoRes;
      reader.readMessage(value,Player_pb.PlayerCommonInfoRes.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamfap(value);
      break;
    case 3:
      var value = msg.getPassinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Examine.ExaminePassInfo.deserializeBinaryFromReader, 0, new proto.PbModel.Examine.ExaminePassInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExamineStarsMinInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExamineStarsMinInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExamineStarsMinInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Player_pb.PlayerCommonInfoRes.serializeBinaryToWriter
    );
  }
  f = message.getTeamfap();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPassinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Examine.ExaminePassInfo.serializeBinaryToWriter);
  }
};


/**
 * optional PbModel.Player.PlayerCommonInfoRes PlayerInfo = 1;
 * @return {?proto.PbModel.Player.PlayerCommonInfoRes}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.getPlayerinfo = function() {
  return /** @type{?proto.PbModel.Player.PlayerCommonInfoRes} */ (
    jspb.Message.getWrapperField(this, Player_pb.PlayerCommonInfoRes, 1));
};


/**
 * @param {?proto.PbModel.Player.PlayerCommonInfoRes|undefined} value
 * @return {!proto.PbModel.Examine.ExamineStarsMinInfo} returns this
*/
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Examine.ExamineStarsMinInfo} returns this
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.clearPlayerinfo = function() {
  return this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 TeamFap = 2;
 * @return {number}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.getTeamfap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Examine.ExamineStarsMinInfo} returns this
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.setTeamfap = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<int32, ExaminePassInfo> PassInfo = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PbModel.Examine.ExaminePassInfo>}
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.getPassinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PbModel.Examine.ExaminePassInfo>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.PbModel.Examine.ExaminePassInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Examine.ExamineStarsMinInfo} returns this
 */
proto.PbModel.Examine.ExamineStarsMinInfo.prototype.clearPassinfoMap = function() {
  this.getPassinfoMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Examine.ExaminePassInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Examine.ExaminePassInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Examine.ExaminePassInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Examine.ExaminePassInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExaminePassInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    herosList: jspb.Message.toObjectList(msg.getHerosList(),
    proto.PbModel.Examine.ExamineTeamHeroInfo.toObject, includeInstance),
    battlereportid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Examine.ExaminePassInfo}
 */
proto.PbModel.Examine.ExaminePassInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Examine.ExaminePassInfo;
  return proto.PbModel.Examine.ExaminePassInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Examine.ExaminePassInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Examine.ExaminePassInfo}
 */
proto.PbModel.Examine.ExaminePassInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Examine.ExamineTeamHeroInfo;
      reader.readMessage(value,proto.PbModel.Examine.ExamineTeamHeroInfo.deserializeBinaryFromReader);
      msg.addHeros(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattlereportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Examine.ExaminePassInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Examine.ExaminePassInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Examine.ExaminePassInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Examine.ExaminePassInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHerosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Examine.ExamineTeamHeroInfo.serializeBinaryToWriter
    );
  }
  f = message.getBattlereportid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated ExamineTeamHeroInfo Heros = 1;
 * @return {!Array<!proto.PbModel.Examine.ExamineTeamHeroInfo>}
 */
proto.PbModel.Examine.ExaminePassInfo.prototype.getHerosList = function() {
  return /** @type{!Array<!proto.PbModel.Examine.ExamineTeamHeroInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Examine.ExamineTeamHeroInfo, 1));
};


/**
 * @param {!Array<!proto.PbModel.Examine.ExamineTeamHeroInfo>} value
 * @return {!proto.PbModel.Examine.ExaminePassInfo} returns this
*/
proto.PbModel.Examine.ExaminePassInfo.prototype.setHerosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Examine.ExamineTeamHeroInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Examine.ExamineTeamHeroInfo}
 */
proto.PbModel.Examine.ExaminePassInfo.prototype.addHeros = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Examine.ExamineTeamHeroInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Examine.ExaminePassInfo} returns this
 */
proto.PbModel.Examine.ExaminePassInfo.prototype.clearHerosList = function() {
  return this.setHerosList([]);
};


/**
 * optional string BattleReportId = 2;
 * @return {string}
 */
proto.PbModel.Examine.ExaminePassInfo.prototype.getBattlereportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Examine.ExaminePassInfo} returns this
 */
proto.PbModel.Examine.ExaminePassInfo.prototype.setBattlereportid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.PbModel.Examine);

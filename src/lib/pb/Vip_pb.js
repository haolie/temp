// source: Vip.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
goog.exportSymbol('proto.PbModel.Vip.VipGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.Vip.VipGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Vip.VipPlayerVipInfo', null, global);
goog.exportSymbol('proto.PbModel.Vip.VipReceiveFreeReq', null, global);
goog.exportSymbol('proto.PbModel.Vip.VipReceiveFreeRes', null, global);
goog.exportSymbol('proto.PbModel.Vip.VipShopInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Vip.VipPlayerVipInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Vip.VipPlayerVipInfo.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Vip.VipPlayerVipInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Vip.VipPlayerVipInfo.displayName = 'proto.PbModel.Vip.VipPlayerVipInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Vip.VipShopInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Vip.VipShopInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Vip.VipShopInfo.displayName = 'proto.PbModel.Vip.VipShopInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Vip.VipGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Vip.VipGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Vip.VipGetInfoReq.displayName = 'proto.PbModel.Vip.VipGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Vip.VipGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Vip.VipGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Vip.VipGetInfoRes.displayName = 'proto.PbModel.Vip.VipGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Vip.VipReceiveFreeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Vip.VipReceiveFreeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Vip.VipReceiveFreeReq.displayName = 'proto.PbModel.Vip.VipReceiveFreeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Vip.VipReceiveFreeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Vip.VipReceiveFreeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Vip.VipReceiveFreeRes.displayName = 'proto.PbModel.Vip.VipReceiveFreeRes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Vip.VipPlayerVipInfo.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Vip.VipPlayerVipInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Vip.VipPlayerVipInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipPlayerVipInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    payviplvlistList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    freeviplvlistList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    shoplistList: jspb.Message.toObjectList(msg.getShoplistList(),
    proto.PbModel.Vip.VipShopInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo}
 */
proto.PbModel.Vip.VipPlayerVipInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Vip.VipPlayerVipInfo;
  return proto.PbModel.Vip.VipPlayerVipInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Vip.VipPlayerVipInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo}
 */
proto.PbModel.Vip.VipPlayerVipInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPayviplvlistList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setFreeviplvlistList(value);
      break;
    case 3:
      var value = new proto.PbModel.Vip.VipShopInfo;
      reader.readMessage(value,proto.PbModel.Vip.VipShopInfo.deserializeBinaryFromReader);
      msg.addShoplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Vip.VipPlayerVipInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Vip.VipPlayerVipInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipPlayerVipInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayviplvlistList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getFreeviplvlistList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getShoplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PbModel.Vip.VipShopInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated int32 PayVipLvList = 1;
 * @return {!Array<number>}
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.getPayviplvlistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.setPayviplvlistList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.addPayviplvlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.clearPayviplvlistList = function() {
  return this.setPayviplvlistList([]);
};


/**
 * repeated int32 FreeVipLvList = 2;
 * @return {!Array<number>}
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.getFreeviplvlistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.setFreeviplvlistList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.addFreeviplvlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.clearFreeviplvlistList = function() {
  return this.setFreeviplvlistList([]);
};


/**
 * repeated VipShopInfo ShopList = 3;
 * @return {!Array<!proto.PbModel.Vip.VipShopInfo>}
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.getShoplistList = function() {
  return /** @type{!Array<!proto.PbModel.Vip.VipShopInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Vip.VipShopInfo, 3));
};


/**
 * @param {!Array<!proto.PbModel.Vip.VipShopInfo>} value
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
*/
proto.PbModel.Vip.VipPlayerVipInfo.prototype.setShoplistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PbModel.Vip.VipShopInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Vip.VipShopInfo}
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.addShoplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PbModel.Vip.VipShopInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Vip.VipPlayerVipInfo} returns this
 */
proto.PbModel.Vip.VipPlayerVipInfo.prototype.clearShoplistList = function() {
  return this.setShoplistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Vip.VipShopInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Vip.VipShopInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Vip.VipShopInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipShopInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    viplv: jspb.Message.getFieldWithDefault(msg, 1, 0),
    productid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Vip.VipShopInfo}
 */
proto.PbModel.Vip.VipShopInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Vip.VipShopInfo;
  return proto.PbModel.Vip.VipShopInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Vip.VipShopInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Vip.VipShopInfo}
 */
proto.PbModel.Vip.VipShopInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViplv(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Vip.VipShopInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Vip.VipShopInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Vip.VipShopInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipShopInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViplv();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProductid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 VipLv = 1;
 * @return {number}
 */
proto.PbModel.Vip.VipShopInfo.prototype.getViplv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Vip.VipShopInfo} returns this
 */
proto.PbModel.Vip.VipShopInfo.prototype.setViplv = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ProductId = 2;
 * @return {string}
 */
proto.PbModel.Vip.VipShopInfo.prototype.getProductid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Vip.VipShopInfo} returns this
 */
proto.PbModel.Vip.VipShopInfo.prototype.setProductid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Vip.VipGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Vip.VipGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Vip.VipGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Vip.VipGetInfoReq}
 */
proto.PbModel.Vip.VipGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Vip.VipGetInfoReq;
  return proto.PbModel.Vip.VipGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Vip.VipGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Vip.VipGetInfoReq}
 */
proto.PbModel.Vip.VipGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Vip.VipGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Vip.VipGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Vip.VipGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Vip.VipGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Vip.VipGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Vip.VipGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.PbModel.Vip.VipPlayerVipInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Vip.VipGetInfoRes}
 */
proto.PbModel.Vip.VipGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Vip.VipGetInfoRes;
  return proto.PbModel.Vip.VipGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Vip.VipGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Vip.VipGetInfoRes}
 */
proto.PbModel.Vip.VipGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Vip.VipPlayerVipInfo;
      reader.readMessage(value,proto.PbModel.Vip.VipPlayerVipInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Vip.VipGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Vip.VipGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Vip.VipGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Vip.VipPlayerVipInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional VipPlayerVipInfo Info = 1;
 * @return {?proto.PbModel.Vip.VipPlayerVipInfo}
 */
proto.PbModel.Vip.VipGetInfoRes.prototype.getInfo = function() {
  return /** @type{?proto.PbModel.Vip.VipPlayerVipInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Vip.VipPlayerVipInfo, 1));
};


/**
 * @param {?proto.PbModel.Vip.VipPlayerVipInfo|undefined} value
 * @return {!proto.PbModel.Vip.VipGetInfoRes} returns this
*/
proto.PbModel.Vip.VipGetInfoRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Vip.VipGetInfoRes} returns this
 */
proto.PbModel.Vip.VipGetInfoRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Vip.VipGetInfoRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Vip.VipReceiveFreeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Vip.VipReceiveFreeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Vip.VipReceiveFreeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipReceiveFreeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    viplv: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Vip.VipReceiveFreeReq}
 */
proto.PbModel.Vip.VipReceiveFreeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Vip.VipReceiveFreeReq;
  return proto.PbModel.Vip.VipReceiveFreeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Vip.VipReceiveFreeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Vip.VipReceiveFreeReq}
 */
proto.PbModel.Vip.VipReceiveFreeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViplv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Vip.VipReceiveFreeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Vip.VipReceiveFreeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Vip.VipReceiveFreeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipReceiveFreeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViplv();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 VipLv = 1;
 * @return {number}
 */
proto.PbModel.Vip.VipReceiveFreeReq.prototype.getViplv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Vip.VipReceiveFreeReq} returns this
 */
proto.PbModel.Vip.VipReceiveFreeReq.prototype.setViplv = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Vip.VipReceiveFreeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Vip.VipReceiveFreeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipReceiveFreeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.PbModel.Vip.VipPlayerVipInfo.toObject(includeInstance, f),
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Vip.VipReceiveFreeRes}
 */
proto.PbModel.Vip.VipReceiveFreeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Vip.VipReceiveFreeRes;
  return proto.PbModel.Vip.VipReceiveFreeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Vip.VipReceiveFreeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Vip.VipReceiveFreeRes}
 */
proto.PbModel.Vip.VipReceiveFreeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Vip.VipPlayerVipInfo;
      reader.readMessage(value,proto.PbModel.Vip.VipPlayerVipInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Vip.VipReceiveFreeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Vip.VipReceiveFreeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Vip.VipReceiveFreeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Vip.VipPlayerVipInfo.serializeBinaryToWriter
    );
  }
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional VipPlayerVipInfo Info = 1;
 * @return {?proto.PbModel.Vip.VipPlayerVipInfo}
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.getInfo = function() {
  return /** @type{?proto.PbModel.Vip.VipPlayerVipInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Vip.VipPlayerVipInfo, 1));
};


/**
 * @param {?proto.PbModel.Vip.VipPlayerVipInfo|undefined} value
 * @return {!proto.PbModel.Vip.VipReceiveFreeRes} returns this
*/
proto.PbModel.Vip.VipReceiveFreeRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Vip.VipReceiveFreeRes} returns this
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 2;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 2));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Vip.VipReceiveFreeRes} returns this
*/
proto.PbModel.Vip.VipReceiveFreeRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Vip.VipReceiveFreeRes} returns this
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Vip.VipReceiveFreeRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.PbModel.Vip);

// source: Fight.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.PbModel.Fight.FightAttackEffectEnum', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightAutoReq', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightAutoRes', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightClientHero', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightClientPlayer', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightErrorCode', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightHeroExtraAttr', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightInitReq', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightInitRes', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightModelBattleReport', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightModelCalcRequest', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightModelCalcResponse', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightObject', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightObjectTeamInfo', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightRemainHp', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReport', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportDamage', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportHPStatistic', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportInit', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportOneAction', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportOneShow', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportPlayer', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportResult', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportRound', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportShowType', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportTeamStatistic', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightReportUnit', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightStopReq', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightStopRes', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightTestForDebugReq', null, global);
goog.exportSymbol('proto.PbModel.Fight.FightTestForDebugRes', null, global);
goog.exportSymbol('proto.PbModel.Fight.UnitTypeEnum', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightClientHero = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightClientHero.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightClientHero, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightClientHero.displayName = 'proto.PbModel.Fight.FightClientHero';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightClientPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightClientPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightClientPlayer.displayName = 'proto.PbModel.Fight.FightClientPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightObject.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightObject.displayName = 'proto.PbModel.Fight.FightObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightObjectTeamInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightObjectTeamInfo.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightObjectTeamInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightObjectTeamInfo.displayName = 'proto.PbModel.Fight.FightObjectTeamInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightHeroExtraAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightHeroExtraAttr.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightHeroExtraAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightHeroExtraAttr.displayName = 'proto.PbModel.Fight.FightHeroExtraAttr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightRemainHp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightRemainHp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightRemainHp.displayName = 'proto.PbModel.Fight.FightRemainHp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportDamage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightReportDamage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportDamage.displayName = 'proto.PbModel.Fight.FightReportDamage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightReport.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReport.displayName = 'proto.PbModel.Fight.FightReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportHPStatistic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightReportHPStatistic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportHPStatistic.displayName = 'proto.PbModel.Fight.FightReportHPStatistic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportTeamStatistic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightReportTeamStatistic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportTeamStatistic.displayName = 'proto.PbModel.Fight.FightReportTeamStatistic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightReportInit.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightReportInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportInit.displayName = 'proto.PbModel.Fight.FightReportInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportOneAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightReportOneAction.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightReportOneAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportOneAction.displayName = 'proto.PbModel.Fight.FightReportOneAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportOneShow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightReportOneShow.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightReportOneShow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportOneShow.displayName = 'proto.PbModel.Fight.FightReportOneShow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightReportPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportPlayer.displayName = 'proto.PbModel.Fight.FightReportPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightReportResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportResult.displayName = 'proto.PbModel.Fight.FightReportResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportRound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightReportRound.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightReportRound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportRound.displayName = 'proto.PbModel.Fight.FightReportRound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightReportUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightReportUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightReportUnit.displayName = 'proto.PbModel.Fight.FightReportUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightTestForDebugReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightTestForDebugReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightTestForDebugReq.displayName = 'proto.PbModel.Fight.FightTestForDebugReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightTestForDebugRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightTestForDebugRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightTestForDebugRes.displayName = 'proto.PbModel.Fight.FightTestForDebugRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightAutoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightAutoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightAutoReq.displayName = 'proto.PbModel.Fight.FightAutoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightAutoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightAutoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightAutoRes.displayName = 'proto.PbModel.Fight.FightAutoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightInitReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightInitReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightInitReq.displayName = 'proto.PbModel.Fight.FightInitReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightInitRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightInitRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightInitRes.displayName = 'proto.PbModel.Fight.FightInitRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightStopReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightStopReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightStopReq.displayName = 'proto.PbModel.Fight.FightStopReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightStopRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightStopRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightStopRes.displayName = 'proto.PbModel.Fight.FightStopRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightModelBattleReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Fight.FightModelBattleReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightModelBattleReport.displayName = 'proto.PbModel.Fight.FightModelBattleReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightModelCalcRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightModelCalcRequest.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightModelCalcRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightModelCalcRequest.displayName = 'proto.PbModel.Fight.FightModelCalcRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Fight.FightModelCalcResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Fight.FightModelCalcResponse.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Fight.FightModelCalcResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Fight.FightModelCalcResponse.displayName = 'proto.PbModel.Fight.FightModelCalcResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightClientHero.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightClientHero.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightClientHero.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightClientHero} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightClientHero.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    locate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    totalattrMap: (f = msg.getTotalattrMap()) ? f.toObject(includeInstance, undefined) : [],
    skilllistList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    curhpper: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currentrp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fap: jspb.Message.getFieldWithDefault(msg, 7, 0),
    heroid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    lv: jspb.Message.getFieldWithDefault(msg, 9, 0),
    profession: jspb.Message.getFieldWithDefault(msg, 10, 0),
    showinfoMap: (f = msg.getShowinfoMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightClientHero}
 */
proto.PbModel.Fight.FightClientHero.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightClientHero;
  return proto.PbModel.Fight.FightClientHero.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightClientHero} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightClientHero}
 */
proto.PbModel.Fight.FightClientHero.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModelid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocate(value);
      break;
    case 3:
      var value = msg.getTotalattrMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setSkilllistList(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurhpper(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentrp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeroid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProfession(value);
      break;
    case 11:
      var value = msg.getShowinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightClientHero.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightClientHero.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightClientHero} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightClientHero.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLocate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotalattrMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getSkilllistList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getCurhpper();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCurrentrp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getHeroid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getProfession();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getShowinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int32 ModelId = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightClientHero.prototype.getModelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setModelid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Locate = 2;
 * @return {string}
 */
proto.PbModel.Fight.FightClientHero.prototype.getLocate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setLocate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<int32, int64> TotalAttr = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Fight.FightClientHero.prototype.getTotalattrMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.clearTotalattrMap = function() {
  this.getTotalattrMap().clear();
  return this;};


/**
 * repeated int32 SkillList = 4;
 * @return {!Array<number>}
 */
proto.PbModel.Fight.FightClientHero.prototype.getSkilllistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setSkilllistList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.addSkilllist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.clearSkilllistList = function() {
  return this.setSkilllistList([]);
};


/**
 * optional int64 CurHpPer = 5;
 * @return {number}
 */
proto.PbModel.Fight.FightClientHero.prototype.getCurhpper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setCurhpper = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 CurrentRP = 6;
 * @return {number}
 */
proto.PbModel.Fight.FightClientHero.prototype.getCurrentrp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setCurrentrp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Fap = 7;
 * @return {number}
 */
proto.PbModel.Fight.FightClientHero.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string HeroId = 8;
 * @return {string}
 */
proto.PbModel.Fight.FightClientHero.prototype.getHeroid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setHeroid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 Lv = 9;
 * @return {number}
 */
proto.PbModel.Fight.FightClientHero.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 Profession = 10;
 * @return {number}
 */
proto.PbModel.Fight.FightClientHero.prototype.getProfession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.setProfession = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * map<string, string> ShowInfo = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.PbModel.Fight.FightClientHero.prototype.getShowinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightClientHero} returns this
 */
proto.PbModel.Fight.FightClientHero.prototype.clearShowinfoMap = function() {
  this.getShowinfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightClientPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightClientPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightClientPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    skilldicMap: (f = msg.getSkilldicMap()) ? f.toObject(includeInstance, undefined) : [],
    fap: jspb.Message.getFieldWithDefault(msg, 3, 0),
    showinfoMap: (f = msg.getShowinfoMap()) ? f.toObject(includeInstance, undefined) : [],
    totalattrMap: (f = msg.getTotalattrMap()) ? f.toObject(includeInstance, undefined) : [],
    lv: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightClientPlayer}
 */
proto.PbModel.Fight.FightClientPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightClientPlayer;
  return proto.PbModel.Fight.FightClientPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightClientPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightClientPlayer}
 */
proto.PbModel.Fight.FightClientPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = msg.getSkilldicMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 4:
      var value = msg.getShowinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = msg.getTotalattrMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightClientPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightClientPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightClientPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSkilldicMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getShowinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTotalattrMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightClientPlayer} returns this
 */
proto.PbModel.Fight.FightClientPlayer.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<int32, int32> SkillDic = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.getSkilldicMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightClientPlayer} returns this
 */
proto.PbModel.Fight.FightClientPlayer.prototype.clearSkilldicMap = function() {
  this.getSkilldicMap().clear();
  return this;};


/**
 * optional int64 Fap = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientPlayer} returns this
 */
proto.PbModel.Fight.FightClientPlayer.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * map<string, string> ShowInfo = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.getShowinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightClientPlayer} returns this
 */
proto.PbModel.Fight.FightClientPlayer.prototype.clearShowinfoMap = function() {
  this.getShowinfoMap().clear();
  return this;};


/**
 * map<int32, int64> TotalAttr = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.getTotalattrMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightClientPlayer} returns this
 */
proto.PbModel.Fight.FightClientPlayer.prototype.clearTotalattrMap = function() {
  this.getTotalattrMap().clear();
  return this;};


/**
 * optional int32 Lv = 6;
 * @return {number}
 */
proto.PbModel.Fight.FightClientPlayer.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightClientPlayer} returns this
 */
proto.PbModel.Fight.FightClientPlayer.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightObject.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightObject.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    atkteaminfosList: jspb.Message.toObjectList(msg.getAtkteaminfosList(),
    proto.PbModel.Fight.FightObjectTeamInfo.toObject, includeInstance),
    defteaminfosList: jspb.Message.toObjectList(msg.getDefteaminfosList(),
    proto.PbModel.Fight.FightObjectTeamInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightObject}
 */
proto.PbModel.Fight.FightObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightObject;
  return proto.PbModel.Fight.FightObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightObject}
 */
proto.PbModel.Fight.FightObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightObjectTeamInfo;
      reader.readMessage(value,proto.PbModel.Fight.FightObjectTeamInfo.deserializeBinaryFromReader);
      msg.addAtkteaminfos(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightObjectTeamInfo;
      reader.readMessage(value,proto.PbModel.Fight.FightObjectTeamInfo.deserializeBinaryFromReader);
      msg.addDefteaminfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAtkteaminfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Fight.FightObjectTeamInfo.serializeBinaryToWriter
    );
  }
  f = message.getDefteaminfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Fight.FightObjectTeamInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FightObjectTeamInfo AtkTeamInfos = 1;
 * @return {!Array<!proto.PbModel.Fight.FightObjectTeamInfo>}
 */
proto.PbModel.Fight.FightObject.prototype.getAtkteaminfosList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightObjectTeamInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightObjectTeamInfo, 1));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightObjectTeamInfo>} value
 * @return {!proto.PbModel.Fight.FightObject} returns this
*/
proto.PbModel.Fight.FightObject.prototype.setAtkteaminfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Fight.FightObjectTeamInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo}
 */
proto.PbModel.Fight.FightObject.prototype.addAtkteaminfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Fight.FightObjectTeamInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightObject} returns this
 */
proto.PbModel.Fight.FightObject.prototype.clearAtkteaminfosList = function() {
  return this.setAtkteaminfosList([]);
};


/**
 * repeated FightObjectTeamInfo DefTeamInfos = 2;
 * @return {!Array<!proto.PbModel.Fight.FightObjectTeamInfo>}
 */
proto.PbModel.Fight.FightObject.prototype.getDefteaminfosList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightObjectTeamInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightObjectTeamInfo, 2));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightObjectTeamInfo>} value
 * @return {!proto.PbModel.Fight.FightObject} returns this
*/
proto.PbModel.Fight.FightObject.prototype.setDefteaminfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Fight.FightObjectTeamInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo}
 */
proto.PbModel.Fight.FightObject.prototype.addDefteaminfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Fight.FightObjectTeamInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightObject} returns this
 */
proto.PbModel.Fight.FightObject.prototype.clearDefteaminfosList = function() {
  return this.setDefteaminfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightObjectTeamInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightObjectTeamInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightObjectTeamInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightObjectTeamInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.PbModel.Fight.FightClientPlayer.toObject(includeInstance, f),
    herosList: jspb.Message.toObjectList(msg.getHerosList(),
    proto.PbModel.Fight.FightClientHero.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo}
 */
proto.PbModel.Fight.FightObjectTeamInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightObjectTeamInfo;
  return proto.PbModel.Fight.FightObjectTeamInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightObjectTeamInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo}
 */
proto.PbModel.Fight.FightObjectTeamInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightClientPlayer;
      reader.readMessage(value,proto.PbModel.Fight.FightClientPlayer.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightClientHero;
      reader.readMessage(value,proto.PbModel.Fight.FightClientHero.deserializeBinaryFromReader);
      msg.addHeros(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightObjectTeamInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightObjectTeamInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightObjectTeamInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Fight.FightClientPlayer.serializeBinaryToWriter
    );
  }
  f = message.getHerosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Fight.FightClientHero.serializeBinaryToWriter
    );
  }
};


/**
 * optional FightClientPlayer Player = 1;
 * @return {?proto.PbModel.Fight.FightClientPlayer}
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.getPlayer = function() {
  return /** @type{?proto.PbModel.Fight.FightClientPlayer} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightClientPlayer, 1));
};


/**
 * @param {?proto.PbModel.Fight.FightClientPlayer|undefined} value
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo} returns this
*/
proto.PbModel.Fight.FightObjectTeamInfo.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo} returns this
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FightClientHero Heros = 2;
 * @return {!Array<!proto.PbModel.Fight.FightClientHero>}
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.getHerosList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightClientHero>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightClientHero, 2));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightClientHero>} value
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo} returns this
*/
proto.PbModel.Fight.FightObjectTeamInfo.prototype.setHerosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Fight.FightClientHero=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightClientHero}
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.addHeros = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Fight.FightClientHero, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightObjectTeamInfo} returns this
 */
proto.PbModel.Fight.FightObjectTeamInfo.prototype.clearHerosList = function() {
  return this.setHerosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightHeroExtraAttr.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightHeroExtraAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightHeroExtraAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightHeroExtraAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    skillidlistList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    attrdicMap: (f = msg.getAttrdicMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightHeroExtraAttr}
 */
proto.PbModel.Fight.FightHeroExtraAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightHeroExtraAttr;
  return proto.PbModel.Fight.FightHeroExtraAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightHeroExtraAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightHeroExtraAttr}
 */
proto.PbModel.Fight.FightHeroExtraAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setSkillidlistList(value);
      break;
    case 2:
      var value = msg.getAttrdicMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readDouble, null, 0, 0.0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightHeroExtraAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightHeroExtraAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightHeroExtraAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkillidlistList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getAttrdicMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeDouble);
  }
};


/**
 * repeated int32 SkillIdList = 1;
 * @return {!Array<number>}
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.getSkillidlistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Fight.FightHeroExtraAttr} returns this
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.setSkillidlistList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightHeroExtraAttr} returns this
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.addSkillidlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightHeroExtraAttr} returns this
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.clearSkillidlistList = function() {
  return this.setSkillidlistList([]);
};


/**
 * map<int32, double> AttrDic = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.getAttrdicMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightHeroExtraAttr} returns this
 */
proto.PbModel.Fight.FightHeroExtraAttr.prototype.clearAttrdicMap = function() {
  this.getAttrdicMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightRemainHp.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightRemainHp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightRemainHp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightRemainHp.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heromodelid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentrp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    curhpper: jspb.Message.getFieldWithDefault(msg, 4, 0),
    heroid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightRemainHp}
 */
proto.PbModel.Fight.FightRemainHp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightRemainHp;
  return proto.PbModel.Fight.FightRemainHp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightRemainHp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightRemainHp}
 */
proto.PbModel.Fight.FightRemainHp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeromodelid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentrp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurhpper(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeroid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightRemainHp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightRemainHp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightRemainHp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightRemainHp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeromodelid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCurrentrp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCurhpper();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHeroid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 Group = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightRemainHp.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightRemainHp} returns this
 */
proto.PbModel.Fight.FightRemainHp.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 HeroModelId = 2;
 * @return {number}
 */
proto.PbModel.Fight.FightRemainHp.prototype.getHeromodelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightRemainHp} returns this
 */
proto.PbModel.Fight.FightRemainHp.prototype.setHeromodelid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 CurrentRP = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightRemainHp.prototype.getCurrentrp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightRemainHp} returns this
 */
proto.PbModel.Fight.FightRemainHp.prototype.setCurrentrp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 CurHpPer = 4;
 * @return {number}
 */
proto.PbModel.Fight.FightRemainHp.prototype.getCurhpper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightRemainHp} returns this
 */
proto.PbModel.Fight.FightRemainHp.prototype.setCurhpper = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string HeroId = 5;
 * @return {string}
 */
proto.PbModel.Fight.FightRemainHp.prototype.getHeroid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightRemainHp} returns this
 */
proto.PbModel.Fight.FightRemainHp.prototype.setHeroid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportDamage.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportDamage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportDamage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportDamage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceunitid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isalive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    curhp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cursheild: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sheild: jspb.Message.getFieldWithDefault(msg, 6, 0),
    attackeffectenum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    currp: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportDamage}
 */
proto.PbModel.Fight.FightReportDamage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportDamage;
  return proto.PbModel.Fight.FightReportDamage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportDamage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportDamage}
 */
proto.PbModel.Fight.FightReportDamage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSourceunitid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsalive(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurhp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCursheild(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSheild(value);
      break;
    case 7:
      var value = /** @type {!proto.PbModel.Fight.FightAttackEffectEnum} */ (reader.readEnum());
      msg.setAttackeffectenum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportDamage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportDamage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportDamage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportDamage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceunitid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIsalive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCurhp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCursheild();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getSheild();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getAttackeffectenum();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getCurrp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional int32 SourceUnitId = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getSourceunitid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setSourceunitid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool IsAlive = 2;
 * @return {boolean}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getIsalive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setIsalive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 CurHP = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getCurhp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setCurhp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 CurSheild = 4;
 * @return {number}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getCursheild = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setCursheild = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Value = 5;
 * @return {number}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 Sheild = 6;
 * @return {number}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getSheild = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setSheild = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional FightAttackEffectEnum AttackEffectEnum = 7;
 * @return {!proto.PbModel.Fight.FightAttackEffectEnum}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getAttackeffectenum = function() {
  return /** @type {!proto.PbModel.Fight.FightAttackEffectEnum} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.PbModel.Fight.FightAttackEffectEnum} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setAttackeffectenum = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional int64 CurRP = 8;
 * @return {number}
 */
proto.PbModel.Fight.FightReportDamage.prototype.getCurrp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportDamage} returns this
 */
proto.PbModel.Fight.FightReportDamage.prototype.setCurrp = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightReport.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReport.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    init: (f = msg.getInit()) && proto.PbModel.Fight.FightReportInit.toObject(includeInstance, f),
    startList: jspb.Message.toObjectList(msg.getStartList(),
    proto.PbModel.Fight.FightReportOneShow.toObject, includeInstance),
    roundMap: (f = msg.getRoundMap()) ? f.toObject(includeInstance, proto.PbModel.Fight.FightReportRound.toObject) : [],
    result: (f = msg.getResult()) && proto.PbModel.Fight.FightReportResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReport}
 */
proto.PbModel.Fight.FightReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReport;
  return proto.PbModel.Fight.FightReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReport}
 */
proto.PbModel.Fight.FightReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightReportInit;
      reader.readMessage(value,proto.PbModel.Fight.FightReportInit.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightReportOneShow;
      reader.readMessage(value,proto.PbModel.Fight.FightReportOneShow.deserializeBinaryFromReader);
      msg.addStart(value);
      break;
    case 3:
      var value = msg.getRoundMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Fight.FightReportRound.deserializeBinaryFromReader, 0, new proto.PbModel.Fight.FightReportRound());
         });
      break;
    case 4:
      var value = new proto.PbModel.Fight.FightReportResult;
      reader.readMessage(value,proto.PbModel.Fight.FightReportResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Fight.FightReportInit.serializeBinaryToWriter
    );
  }
  f = message.getStartList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Fight.FightReportOneShow.serializeBinaryToWriter
    );
  }
  f = message.getRoundMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Fight.FightReportRound.serializeBinaryToWriter);
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PbModel.Fight.FightReportResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional FightReportInit Init = 1;
 * @return {?proto.PbModel.Fight.FightReportInit}
 */
proto.PbModel.Fight.FightReport.prototype.getInit = function() {
  return /** @type{?proto.PbModel.Fight.FightReportInit} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightReportInit, 1));
};


/**
 * @param {?proto.PbModel.Fight.FightReportInit|undefined} value
 * @return {!proto.PbModel.Fight.FightReport} returns this
*/
proto.PbModel.Fight.FightReport.prototype.setInit = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightReport} returns this
 */
proto.PbModel.Fight.FightReport.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightReport.prototype.hasInit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FightReportOneShow Start = 2;
 * @return {!Array<!proto.PbModel.Fight.FightReportOneShow>}
 */
proto.PbModel.Fight.FightReport.prototype.getStartList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightReportOneShow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightReportOneShow, 2));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightReportOneShow>} value
 * @return {!proto.PbModel.Fight.FightReport} returns this
*/
proto.PbModel.Fight.FightReport.prototype.setStartList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Fight.FightReportOneShow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow}
 */
proto.PbModel.Fight.FightReport.prototype.addStart = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Fight.FightReportOneShow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReport} returns this
 */
proto.PbModel.Fight.FightReport.prototype.clearStartList = function() {
  return this.setStartList([]);
};


/**
 * map<int32, FightReportRound> Round = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PbModel.Fight.FightReportRound>}
 */
proto.PbModel.Fight.FightReport.prototype.getRoundMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PbModel.Fight.FightReportRound>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.PbModel.Fight.FightReportRound));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReport} returns this
 */
proto.PbModel.Fight.FightReport.prototype.clearRoundMap = function() {
  this.getRoundMap().clear();
  return this;};


/**
 * optional FightReportResult Result = 4;
 * @return {?proto.PbModel.Fight.FightReportResult}
 */
proto.PbModel.Fight.FightReport.prototype.getResult = function() {
  return /** @type{?proto.PbModel.Fight.FightReportResult} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightReportResult, 4));
};


/**
 * @param {?proto.PbModel.Fight.FightReportResult|undefined} value
 * @return {!proto.PbModel.Fight.FightReport} returns this
*/
proto.PbModel.Fight.FightReport.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightReport} returns this
 */
proto.PbModel.Fight.FightReport.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightReport.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportHPStatistic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportHPStatistic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportHPStatistic.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, 0),
    modelid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    curhp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    damage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    behurt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    heal: jspb.Message.getFieldWithDefault(msg, 7, 0),
    buffCtrl: jspb.Message.getFieldWithDefault(msg, 8, 0),
    entityid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportHPStatistic}
 */
proto.PbModel.Fight.FightReportHPStatistic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportHPStatistic;
  return proto.PbModel.Fight.FightReportHPStatistic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportHPStatistic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportHPStatistic}
 */
proto.PbModel.Fight.FightReportHPStatistic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModelid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurhp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDamage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBehurt(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeal(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBuffCtrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportHPStatistic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportHPStatistic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportHPStatistic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getModelid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCurhp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCurrp();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDamage();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getBehurt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getHeal();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getBuffCtrl();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getEntityid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 Group = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 ModelId = 2;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getModelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setModelid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 CurHP = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getCurhp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setCurhp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 CurRP = 4;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getCurrp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setCurrp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Damage = 5;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 BeHurt = 6;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getBehurt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setBehurt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Heal = 7;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getHeal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setHeal = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 Buff_Ctrl = 8;
 * @return {number}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getBuffCtrl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setBuffCtrl = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string EntityId = 9;
 * @return {string}
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.getEntityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightReportHPStatistic} returns this
 */
proto.PbModel.Fight.FightReportHPStatistic.prototype.setEntityid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportTeamStatistic.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportTeamStatistic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportTeamStatistic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportTeamStatistic.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalatkdmg: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportTeamStatistic}
 */
proto.PbModel.Fight.FightReportTeamStatistic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportTeamStatistic;
  return proto.PbModel.Fight.FightReportTeamStatistic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportTeamStatistic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportTeamStatistic}
 */
proto.PbModel.Fight.FightReportTeamStatistic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalatkdmg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportTeamStatistic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportTeamStatistic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportTeamStatistic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportTeamStatistic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTotalatkdmg();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int32 Group = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightReportTeamStatistic.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportTeamStatistic} returns this
 */
proto.PbModel.Fight.FightReportTeamStatistic.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 TotalAtkDmg = 5;
 * @return {number}
 */
proto.PbModel.Fight.FightReportTeamStatistic.prototype.getTotalatkdmg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportTeamStatistic} returns this
 */
proto.PbModel.Fight.FightReportTeamStatistic.prototype.setTotalatkdmg = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightReportInit.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportInit.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.PbModel.Fight.FightReportUnit.toObject, includeInstance),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PbModel.Fight.FightReportPlayer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportInit}
 */
proto.PbModel.Fight.FightReportInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportInit;
  return proto.PbModel.Fight.FightReportInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportInit}
 */
proto.PbModel.Fight.FightReportInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightReportUnit;
      reader.readMessage(value,proto.PbModel.Fight.FightReportUnit.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightReportPlayer;
      reader.readMessage(value,proto.PbModel.Fight.FightReportPlayer.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Fight.FightReportUnit.serializeBinaryToWriter
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Fight.FightReportPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FightReportUnit Units = 1;
 * @return {!Array<!proto.PbModel.Fight.FightReportUnit>}
 */
proto.PbModel.Fight.FightReportInit.prototype.getUnitsList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightReportUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightReportUnit, 1));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightReportUnit>} value
 * @return {!proto.PbModel.Fight.FightReportInit} returns this
*/
proto.PbModel.Fight.FightReportInit.prototype.setUnitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Fight.FightReportUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportUnit}
 */
proto.PbModel.Fight.FightReportInit.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Fight.FightReportUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportInit} returns this
 */
proto.PbModel.Fight.FightReportInit.prototype.clearUnitsList = function() {
  return this.setUnitsList([]);
};


/**
 * repeated FightReportPlayer Players = 2;
 * @return {!Array<!proto.PbModel.Fight.FightReportPlayer>}
 */
proto.PbModel.Fight.FightReportInit.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightReportPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightReportPlayer, 2));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightReportPlayer>} value
 * @return {!proto.PbModel.Fight.FightReportInit} returns this
*/
proto.PbModel.Fight.FightReportInit.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Fight.FightReportPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportPlayer}
 */
proto.PbModel.Fight.FightReportInit.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Fight.FightReportPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportInit} returns this
 */
proto.PbModel.Fight.FightReportInit.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightReportOneAction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportOneAction.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportOneAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportOneAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportOneAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    showlistList: jspb.Message.toObjectList(msg.getShowlistList(),
    proto.PbModel.Fight.FightReportOneShow.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportOneAction}
 */
proto.PbModel.Fight.FightReportOneAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportOneAction;
  return proto.PbModel.Fight.FightReportOneAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportOneAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportOneAction}
 */
proto.PbModel.Fight.FightReportOneAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightReportOneShow;
      reader.readMessage(value,proto.PbModel.Fight.FightReportOneShow.deserializeBinaryFromReader);
      msg.addShowlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportOneAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportOneAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportOneAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportOneAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShowlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Fight.FightReportOneShow.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FightReportOneShow ShowList = 1;
 * @return {!Array<!proto.PbModel.Fight.FightReportOneShow>}
 */
proto.PbModel.Fight.FightReportOneAction.prototype.getShowlistList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightReportOneShow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightReportOneShow, 1));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightReportOneShow>} value
 * @return {!proto.PbModel.Fight.FightReportOneAction} returns this
*/
proto.PbModel.Fight.FightReportOneAction.prototype.setShowlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Fight.FightReportOneShow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow}
 */
proto.PbModel.Fight.FightReportOneAction.prototype.addShowlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Fight.FightReportOneShow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportOneAction} returns this
 */
proto.PbModel.Fight.FightReportOneAction.prototype.clearShowlistList = function() {
  return this.setShowlistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightReportOneShow.repeatedFields_ = [7,9,13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportOneShow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportOneShow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportOneShow.toObject = function(includeInstance, msg) {
  var f, obj = {
    showtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    showpoint: jspb.Message.getFieldWithDefault(msg, 2, 0),
    skillid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    skilldamage: (f = msg.getSkilldamage()) && proto.PbModel.Fight.FightReportDamage.toObject(includeInstance, f),
    buffid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bufftarget: jspb.Message.getFieldWithDefault(msg, 6, 0),
    roundatkseqList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    roundnum: jspb.Message.getFieldWithDefault(msg, 8, 0),
    movepositionList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    unitid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    skillrof: jspb.Message.getFieldWithDefault(msg, 11, 0),
    rp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    maintargetidsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    alltargetidsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    skillcdMap: (f = msg.getSkillcdMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportOneShow}
 */
proto.PbModel.Fight.FightReportOneShow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportOneShow;
  return proto.PbModel.Fight.FightReportOneShow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportOneShow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportOneShow}
 */
proto.PbModel.Fight.FightReportOneShow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PbModel.Fight.FightReportShowType} */ (reader.readEnum());
      msg.setShowtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShowpoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSkillid(value);
      break;
    case 4:
      var value = new proto.PbModel.Fight.FightReportDamage;
      reader.readMessage(value,proto.PbModel.Fight.FightReportDamage.deserializeBinaryFromReader);
      msg.setSkilldamage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBuffid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBufftarget(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setRoundatkseqList(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoundnum(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addMoveposition(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnitid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkillrof(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRp(value);
      break;
    case 13:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setMaintargetidsList(value);
      break;
    case 14:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setAlltargetidsList(value);
      break;
    case 15:
      var value = msg.getSkillcdMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportOneShow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportOneShow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportOneShow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShowtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getShowpoint();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSkillid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSkilldamage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PbModel.Fight.FightReportDamage.serializeBinaryToWriter
    );
  }
  f = message.getBuffid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getBufftarget();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRoundatkseqList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getRoundnum();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMovepositionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getUnitid();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getSkillrof();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getRp();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMaintargetidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      13,
      f
    );
  }
  f = message.getAlltargetidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      14,
      f
    );
  }
  f = message.getSkillcdMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * optional FightReportShowType ShowType = 1;
 * @return {!proto.PbModel.Fight.FightReportShowType}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getShowtype = function() {
  return /** @type {!proto.PbModel.Fight.FightReportShowType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.PbModel.Fight.FightReportShowType} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setShowtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 ShowPoint = 2;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getShowpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setShowpoint = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 SkillId = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getSkillid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setSkillid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional FightReportDamage SkillDamage = 4;
 * @return {?proto.PbModel.Fight.FightReportDamage}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getSkilldamage = function() {
  return /** @type{?proto.PbModel.Fight.FightReportDamage} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightReportDamage, 4));
};


/**
 * @param {?proto.PbModel.Fight.FightReportDamage|undefined} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
*/
proto.PbModel.Fight.FightReportOneShow.prototype.setSkilldamage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.clearSkilldamage = function() {
  return this.setSkilldamage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.hasSkilldamage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 BuffId = 5;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getBuffid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setBuffid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 BuffTarget = 6;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getBufftarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setBufftarget = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated int32 RoundAtkSeq = 7;
 * @return {!Array<number>}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getRoundatkseqList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setRoundatkseqList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.addRoundatkseq = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.clearRoundatkseqList = function() {
  return this.setRoundatkseqList([]);
};


/**
 * optional int32 RoundNum = 8;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getRoundnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setRoundnum = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated string MovePosition = 9;
 * @return {!Array<string>}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getMovepositionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setMovepositionList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.addMoveposition = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.clearMovepositionList = function() {
  return this.setMovepositionList([]);
};


/**
 * optional int32 UnitId = 10;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getUnitid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setUnitid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 SkillRof = 11;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getSkillrof = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setSkillrof = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 Rp = 12;
 * @return {number}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getRp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setRp = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated int32 MainTargetIds = 13;
 * @return {!Array<number>}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getMaintargetidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setMaintargetidsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.addMaintargetids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.clearMaintargetidsList = function() {
  return this.setMaintargetidsList([]);
};


/**
 * repeated int32 AllTargetIds = 14;
 * @return {!Array<number>}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getAlltargetidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.setAlltargetidsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.addAlltargetids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.clearAlltargetidsList = function() {
  return this.setAlltargetidsList([]);
};


/**
 * map<int32, int32> SkillCD = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Fight.FightReportOneShow.prototype.getSkillcdMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReportOneShow} returns this
 */
proto.PbModel.Fight.FightReportOneShow.prototype.clearSkillcdMap = function() {
  this.getSkillcdMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fap: jspb.Message.getFieldWithDefault(msg, 2, 0),
    skilliddicMap: (f = msg.getSkilliddicMap()) ? f.toObject(includeInstance, undefined) : [],
    showinfoMap: (f = msg.getShowinfoMap()) ? f.toObject(includeInstance, undefined) : [],
    playerid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    curhp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lv: jspb.Message.getFieldWithDefault(msg, 7, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportPlayer}
 */
proto.PbModel.Fight.FightReportPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportPlayer;
  return proto.PbModel.Fight.FightReportPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportPlayer}
 */
proto.PbModel.Fight.FightReportPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 3:
      var value = msg.getSkilliddicMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 4:
      var value = msg.getShowinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurhp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSkilliddicMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getShowinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCurhp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 Group = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Fap = 2;
 * @return {number}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<int32, int32> SkillIdDic = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getSkilliddicMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.clearSkilliddicMap = function() {
  this.getSkilliddicMap().clear();
  return this;};


/**
 * map<string, string> ShowInfo = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getShowinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.clearShowinfoMap = function() {
  this.getShowinfoMap().clear();
  return this;};


/**
 * optional string PlayerId = 5;
 * @return {string}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 CurHP = 6;
 * @return {number}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getCurhp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.setCurhp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 Lv = 7;
 * @return {number}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 Uid = 8;
 * @return {number}
 */
proto.PbModel.Fight.FightReportPlayer.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportPlayer} returns this
 */
proto.PbModel.Fight.FightReportPlayer.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportResult.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    iswin: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    herosMap: (f = msg.getHerosMap()) ? f.toObject(includeInstance, proto.PbModel.Fight.FightReportHPStatistic.toObject) : [],
    teamsMap: (f = msg.getTeamsMap()) ? f.toObject(includeInstance, proto.PbModel.Fight.FightReportTeamStatistic.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportResult}
 */
proto.PbModel.Fight.FightReportResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportResult;
  return proto.PbModel.Fight.FightReportResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportResult}
 */
proto.PbModel.Fight.FightReportResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswin(value);
      break;
    case 2:
      var value = msg.getHerosMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Fight.FightReportHPStatistic.deserializeBinaryFromReader, 0, new proto.PbModel.Fight.FightReportHPStatistic());
         });
      break;
    case 3:
      var value = msg.getTeamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Fight.FightReportTeamStatistic.deserializeBinaryFromReader, 0, new proto.PbModel.Fight.FightReportTeamStatistic());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIswin();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getHerosMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Fight.FightReportHPStatistic.serializeBinaryToWriter);
  }
  f = message.getTeamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Fight.FightReportTeamStatistic.serializeBinaryToWriter);
  }
};


/**
 * optional bool IsWin = 1;
 * @return {boolean}
 */
proto.PbModel.Fight.FightReportResult.prototype.getIswin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Fight.FightReportResult} returns this
 */
proto.PbModel.Fight.FightReportResult.prototype.setIswin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * map<int32, FightReportHPStatistic> Heros = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PbModel.Fight.FightReportHPStatistic>}
 */
proto.PbModel.Fight.FightReportResult.prototype.getHerosMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PbModel.Fight.FightReportHPStatistic>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.PbModel.Fight.FightReportHPStatistic));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReportResult} returns this
 */
proto.PbModel.Fight.FightReportResult.prototype.clearHerosMap = function() {
  this.getHerosMap().clear();
  return this;};


/**
 * map<int32, FightReportTeamStatistic> Teams = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PbModel.Fight.FightReportTeamStatistic>}
 */
proto.PbModel.Fight.FightReportResult.prototype.getTeamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PbModel.Fight.FightReportTeamStatistic>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.PbModel.Fight.FightReportTeamStatistic));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReportResult} returns this
 */
proto.PbModel.Fight.FightReportResult.prototype.clearTeamsMap = function() {
  this.getTeamsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightReportRound.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportRound.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportRound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportRound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportRound.toObject = function(includeInstance, msg) {
  var f, obj = {
    roundstartList: jspb.Message.toObjectList(msg.getRoundstartList(),
    proto.PbModel.Fight.FightReportOneShow.toObject, includeInstance),
    roundoverList: jspb.Message.toObjectList(msg.getRoundoverList(),
    proto.PbModel.Fight.FightReportOneShow.toObject, includeInstance),
    roundingMap: (f = msg.getRoundingMap()) ? f.toObject(includeInstance, proto.PbModel.Fight.FightReportOneAction.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportRound}
 */
proto.PbModel.Fight.FightReportRound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportRound;
  return proto.PbModel.Fight.FightReportRound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportRound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportRound}
 */
proto.PbModel.Fight.FightReportRound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightReportOneShow;
      reader.readMessage(value,proto.PbModel.Fight.FightReportOneShow.deserializeBinaryFromReader);
      msg.addRoundstart(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightReportOneShow;
      reader.readMessage(value,proto.PbModel.Fight.FightReportOneShow.deserializeBinaryFromReader);
      msg.addRoundover(value);
      break;
    case 3:
      var value = msg.getRoundingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.PbModel.Fight.FightReportOneAction.deserializeBinaryFromReader, 0, new proto.PbModel.Fight.FightReportOneAction());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportRound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportRound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportRound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportRound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoundstartList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Fight.FightReportOneShow.serializeBinaryToWriter
    );
  }
  f = message.getRoundoverList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Fight.FightReportOneShow.serializeBinaryToWriter
    );
  }
  f = message.getRoundingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.PbModel.Fight.FightReportOneAction.serializeBinaryToWriter);
  }
};


/**
 * repeated FightReportOneShow RoundStart = 1;
 * @return {!Array<!proto.PbModel.Fight.FightReportOneShow>}
 */
proto.PbModel.Fight.FightReportRound.prototype.getRoundstartList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightReportOneShow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightReportOneShow, 1));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightReportOneShow>} value
 * @return {!proto.PbModel.Fight.FightReportRound} returns this
*/
proto.PbModel.Fight.FightReportRound.prototype.setRoundstartList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Fight.FightReportOneShow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow}
 */
proto.PbModel.Fight.FightReportRound.prototype.addRoundstart = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Fight.FightReportOneShow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportRound} returns this
 */
proto.PbModel.Fight.FightReportRound.prototype.clearRoundstartList = function() {
  return this.setRoundstartList([]);
};


/**
 * repeated FightReportOneShow RoundOver = 2;
 * @return {!Array<!proto.PbModel.Fight.FightReportOneShow>}
 */
proto.PbModel.Fight.FightReportRound.prototype.getRoundoverList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightReportOneShow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightReportOneShow, 2));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightReportOneShow>} value
 * @return {!proto.PbModel.Fight.FightReportRound} returns this
*/
proto.PbModel.Fight.FightReportRound.prototype.setRoundoverList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Fight.FightReportOneShow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightReportOneShow}
 */
proto.PbModel.Fight.FightReportRound.prototype.addRoundover = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Fight.FightReportOneShow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightReportRound} returns this
 */
proto.PbModel.Fight.FightReportRound.prototype.clearRoundoverList = function() {
  return this.setRoundoverList([]);
};


/**
 * map<int32, FightReportOneAction> Rounding = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.PbModel.Fight.FightReportOneAction>}
 */
proto.PbModel.Fight.FightReportRound.prototype.getRoundingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.PbModel.Fight.FightReportOneAction>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.PbModel.Fight.FightReportOneAction));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReportRound} returns this
 */
proto.PbModel.Fight.FightReportRound.prototype.clearRoundingMap = function() {
  this.getRoundingMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightReportUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightReportUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightReportUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heroid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    modelid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    position: jspb.Message.getFieldWithDefault(msg, 4, ""),
    group: jspb.Message.getFieldWithDefault(msg, 5, 0),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    curhp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    currp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    lv: jspb.Message.getFieldWithDefault(msg, 9, 0),
    profession: jspb.Message.getFieldWithDefault(msg, 10, 0),
    showinfoMap: (f = msg.getShowinfoMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightReportUnit}
 */
proto.PbModel.Fight.FightReportUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightReportUnit;
  return proto.PbModel.Fight.FightReportUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightReportUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightReportUnit}
 */
proto.PbModel.Fight.FightReportUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeroid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModelid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurhp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProfession(value);
      break;
    case 11:
      var value = msg.getShowinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightReportUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightReportUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightReportUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightReportUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeroid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModelid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCurhp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCurrp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getProfession();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getShowinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int32 Uid = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Heroid = 2;
 * @return {string}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getHeroid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setHeroid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 ModelId = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getModelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setModelid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string Position = 4;
 * @return {string}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 Group = 5;
 * @return {number}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string Name = 6;
 * @return {string}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 CurHP = 7;
 * @return {number}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getCurhp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setCurhp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 CurRP = 8;
 * @return {number}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getCurrp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setCurrp = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 Lv = 9;
 * @return {number}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 Profession = 10;
 * @return {number}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getProfession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.setProfession = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * map<string, string> ShowInfo = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.PbModel.Fight.FightReportUnit.prototype.getShowinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.PbModel.Fight.FightReportUnit} returns this
 */
proto.PbModel.Fight.FightReportUnit.prototype.clearShowinfoMap = function() {
  this.getShowinfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightTestForDebugReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightTestForDebugReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightTestForDebugReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightTestForDebugReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fightobject: (f = msg.getFightobject()) && proto.PbModel.Fight.FightObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightTestForDebugReq}
 */
proto.PbModel.Fight.FightTestForDebugReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightTestForDebugReq;
  return proto.PbModel.Fight.FightTestForDebugReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightTestForDebugReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightTestForDebugReq}
 */
proto.PbModel.Fight.FightTestForDebugReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightObject;
      reader.readMessage(value,proto.PbModel.Fight.FightObject.deserializeBinaryFromReader);
      msg.setFightobject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightTestForDebugReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightTestForDebugReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightTestForDebugReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightTestForDebugReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFightobject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Fight.FightObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional FightObject FightObject = 1;
 * @return {?proto.PbModel.Fight.FightObject}
 */
proto.PbModel.Fight.FightTestForDebugReq.prototype.getFightobject = function() {
  return /** @type{?proto.PbModel.Fight.FightObject} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightObject, 1));
};


/**
 * @param {?proto.PbModel.Fight.FightObject|undefined} value
 * @return {!proto.PbModel.Fight.FightTestForDebugReq} returns this
*/
proto.PbModel.Fight.FightTestForDebugReq.prototype.setFightobject = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightTestForDebugReq} returns this
 */
proto.PbModel.Fight.FightTestForDebugReq.prototype.clearFightobject = function() {
  return this.setFightobject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightTestForDebugReq.prototype.hasFightobject = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightTestForDebugRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightTestForDebugRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightTestForDebugRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightTestForDebugRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportfight: (f = msg.getReportfight()) && proto.PbModel.Fight.FightReport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightTestForDebugRes}
 */
proto.PbModel.Fight.FightTestForDebugRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightTestForDebugRes;
  return proto.PbModel.Fight.FightTestForDebugRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightTestForDebugRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightTestForDebugRes}
 */
proto.PbModel.Fight.FightTestForDebugRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightReport;
      reader.readMessage(value,proto.PbModel.Fight.FightReport.deserializeBinaryFromReader);
      msg.setReportfight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightTestForDebugRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightTestForDebugRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightTestForDebugRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightTestForDebugRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportfight();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Fight.FightReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional FightReport ReportFight = 1;
 * @return {?proto.PbModel.Fight.FightReport}
 */
proto.PbModel.Fight.FightTestForDebugRes.prototype.getReportfight = function() {
  return /** @type{?proto.PbModel.Fight.FightReport} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightReport, 1));
};


/**
 * @param {?proto.PbModel.Fight.FightReport|undefined} value
 * @return {!proto.PbModel.Fight.FightTestForDebugRes} returns this
*/
proto.PbModel.Fight.FightTestForDebugRes.prototype.setReportfight = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightTestForDebugRes} returns this
 */
proto.PbModel.Fight.FightTestForDebugRes.prototype.clearReportfight = function() {
  return this.setReportfight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightTestForDebugRes.prototype.hasReportfight = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightAutoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightAutoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightAutoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightAutoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetplayerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    submodelid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    targetsubmodelid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightAutoReq}
 */
proto.PbModel.Fight.FightAutoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightAutoReq;
  return proto.PbModel.Fight.FightAutoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightAutoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightAutoReq}
 */
proto.PbModel.Fight.FightAutoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetplayerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubmodelid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetsubmodelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightAutoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightAutoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightAutoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightAutoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetplayerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubmodelid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTargetsubmodelid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Fight.FightAutoReq.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightAutoReq} returns this
 */
proto.PbModel.Fight.FightAutoReq.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string TargetPlayerId = 2;
 * @return {string}
 */
proto.PbModel.Fight.FightAutoReq.prototype.getTargetplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightAutoReq} returns this
 */
proto.PbModel.Fight.FightAutoReq.prototype.setTargetplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 SubModelId = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightAutoReq.prototype.getSubmodelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightAutoReq} returns this
 */
proto.PbModel.Fight.FightAutoReq.prototype.setSubmodelid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 TargetSubModelId = 4;
 * @return {number}
 */
proto.PbModel.Fight.FightAutoReq.prototype.getTargetsubmodelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightAutoReq} returns this
 */
proto.PbModel.Fight.FightAutoReq.prototype.setTargetsubmodelid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightAutoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightAutoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightAutoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightAutoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportfight: (f = msg.getReportfight()) && proto.PbModel.Fight.FightReport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightAutoRes}
 */
proto.PbModel.Fight.FightAutoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightAutoRes;
  return proto.PbModel.Fight.FightAutoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightAutoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightAutoRes}
 */
proto.PbModel.Fight.FightAutoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightReport;
      reader.readMessage(value,proto.PbModel.Fight.FightReport.deserializeBinaryFromReader);
      msg.setReportfight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightAutoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightAutoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightAutoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightAutoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportfight();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Fight.FightReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional FightReport ReportFight = 1;
 * @return {?proto.PbModel.Fight.FightReport}
 */
proto.PbModel.Fight.FightAutoRes.prototype.getReportfight = function() {
  return /** @type{?proto.PbModel.Fight.FightReport} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightReport, 1));
};


/**
 * @param {?proto.PbModel.Fight.FightReport|undefined} value
 * @return {!proto.PbModel.Fight.FightAutoRes} returns this
*/
proto.PbModel.Fight.FightAutoRes.prototype.setReportfight = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightAutoRes} returns this
 */
proto.PbModel.Fight.FightAutoRes.prototype.clearReportfight = function() {
  return this.setReportfight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightAutoRes.prototype.hasReportfight = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightInitReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightInitReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightInitReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightInitReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fightid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fightobject: (f = msg.getFightobject()) && proto.PbModel.Fight.FightObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightInitReq}
 */
proto.PbModel.Fight.FightInitReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightInitReq;
  return proto.PbModel.Fight.FightInitReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightInitReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightInitReq}
 */
proto.PbModel.Fight.FightInitReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFightid(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightObject;
      reader.readMessage(value,proto.PbModel.Fight.FightObject.deserializeBinaryFromReader);
      msg.setFightobject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightInitReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightInitReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightInitReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightInitReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFightid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFightobject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PbModel.Fight.FightObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional string FightId = 1;
 * @return {string}
 */
proto.PbModel.Fight.FightInitReq.prototype.getFightid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightInitReq} returns this
 */
proto.PbModel.Fight.FightInitReq.prototype.setFightid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FightObject FightObject = 2;
 * @return {?proto.PbModel.Fight.FightObject}
 */
proto.PbModel.Fight.FightInitReq.prototype.getFightobject = function() {
  return /** @type{?proto.PbModel.Fight.FightObject} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightObject, 2));
};


/**
 * @param {?proto.PbModel.Fight.FightObject|undefined} value
 * @return {!proto.PbModel.Fight.FightInitReq} returns this
*/
proto.PbModel.Fight.FightInitReq.prototype.setFightobject = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightInitReq} returns this
 */
proto.PbModel.Fight.FightInitReq.prototype.clearFightobject = function() {
  return this.setFightobject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightInitReq.prototype.hasFightobject = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightInitRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightInitRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightInitRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightInitRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightInitRes}
 */
proto.PbModel.Fight.FightInitRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightInitRes;
  return proto.PbModel.Fight.FightInitRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightInitRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightInitRes}
 */
proto.PbModel.Fight.FightInitRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightInitRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightInitRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightInitRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightInitRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightStopReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightStopReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightStopReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightStopReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fightid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isstop: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightStopReq}
 */
proto.PbModel.Fight.FightStopReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightStopReq;
  return proto.PbModel.Fight.FightStopReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightStopReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightStopReq}
 */
proto.PbModel.Fight.FightStopReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFightid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightStopReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightStopReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightStopReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightStopReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFightid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsstop();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string FightId = 1;
 * @return {string}
 */
proto.PbModel.Fight.FightStopReq.prototype.getFightid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightStopReq} returns this
 */
proto.PbModel.Fight.FightStopReq.prototype.setFightid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool IsStop = 2;
 * @return {boolean}
 */
proto.PbModel.Fight.FightStopReq.prototype.getIsstop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Fight.FightStopReq} returns this
 */
proto.PbModel.Fight.FightStopReq.prototype.setIsstop = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightStopRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightStopRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightStopRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightStopRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightStopRes}
 */
proto.PbModel.Fight.FightStopRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightStopRes;
  return proto.PbModel.Fight.FightStopRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightStopRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightStopRes}
 */
proto.PbModel.Fight.FightStopRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightStopRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightStopRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightStopRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightStopRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightModelBattleReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightModelBattleReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightModelBattleReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    calcreq: (f = msg.getCalcreq()) && proto.PbModel.Fight.FightModelCalcRequest.toObject(includeInstance, f),
    calcres: (f = msg.getCalcres()) && proto.PbModel.Fight.FightModelCalcResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightModelBattleReport}
 */
proto.PbModel.Fight.FightModelBattleReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightModelBattleReport;
  return proto.PbModel.Fight.FightModelBattleReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightModelBattleReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightModelBattleReport}
 */
proto.PbModel.Fight.FightModelBattleReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Fight.FightModelCalcRequest;
      reader.readMessage(value,proto.PbModel.Fight.FightModelCalcRequest.deserializeBinaryFromReader);
      msg.setCalcreq(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightModelCalcResponse;
      reader.readMessage(value,proto.PbModel.Fight.FightModelCalcResponse.deserializeBinaryFromReader);
      msg.setCalcres(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightModelBattleReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightModelBattleReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightModelBattleReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalcreq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Fight.FightModelCalcRequest.serializeBinaryToWriter
    );
  }
  f = message.getCalcres();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PbModel.Fight.FightModelCalcResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional FightModelCalcRequest CalcReq = 1;
 * @return {?proto.PbModel.Fight.FightModelCalcRequest}
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.getCalcreq = function() {
  return /** @type{?proto.PbModel.Fight.FightModelCalcRequest} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightModelCalcRequest, 1));
};


/**
 * @param {?proto.PbModel.Fight.FightModelCalcRequest|undefined} value
 * @return {!proto.PbModel.Fight.FightModelBattleReport} returns this
*/
proto.PbModel.Fight.FightModelBattleReport.prototype.setCalcreq = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightModelBattleReport} returns this
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.clearCalcreq = function() {
  return this.setCalcreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.hasCalcreq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FightModelCalcResponse CalcRes = 2;
 * @return {?proto.PbModel.Fight.FightModelCalcResponse}
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.getCalcres = function() {
  return /** @type{?proto.PbModel.Fight.FightModelCalcResponse} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Fight.FightModelCalcResponse, 2));
};


/**
 * @param {?proto.PbModel.Fight.FightModelCalcResponse|undefined} value
 * @return {!proto.PbModel.Fight.FightModelBattleReport} returns this
*/
proto.PbModel.Fight.FightModelBattleReport.prototype.setCalcres = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Fight.FightModelBattleReport} returns this
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.clearCalcres = function() {
  return this.setCalcres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Fight.FightModelBattleReport.prototype.hasCalcres = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightModelCalcRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightModelCalcRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightModelCalcRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightModelCalcRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fightmodule: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fightobjsList: jspb.Message.toObjectList(msg.getFightobjsList(),
    proto.PbModel.Fight.FightObject.toObject, includeInstance),
    reportsavetime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ispvp: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightModelCalcRequest}
 */
proto.PbModel.Fight.FightModelCalcRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightModelCalcRequest;
  return proto.PbModel.Fight.FightModelCalcRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightModelCalcRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightModelCalcRequest}
 */
proto.PbModel.Fight.FightModelCalcRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFightmodule(value);
      break;
    case 2:
      var value = new proto.PbModel.Fight.FightObject;
      reader.readMessage(value,proto.PbModel.Fight.FightObject.deserializeBinaryFromReader);
      msg.addFightobjs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportsavetime(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspvp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightModelCalcRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightModelCalcRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightModelCalcRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFightmodule();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFightobjsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Fight.FightObject.serializeBinaryToWriter
    );
  }
  f = message.getReportsavetime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIspvp();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 FightModule = 1;
 * @return {number}
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.getFightmodule = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightModelCalcRequest} returns this
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.setFightmodule = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated FightObject FightObjs = 2;
 * @return {!Array<!proto.PbModel.Fight.FightObject>}
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.getFightobjsList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightObject, 2));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightObject>} value
 * @return {!proto.PbModel.Fight.FightModelCalcRequest} returns this
*/
proto.PbModel.Fight.FightModelCalcRequest.prototype.setFightobjsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Fight.FightObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightObject}
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.addFightobjs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Fight.FightObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightModelCalcRequest} returns this
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.clearFightobjsList = function() {
  return this.setFightobjsList([]);
};


/**
 * optional int32 ReportSaveTime = 3;
 * @return {number}
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.getReportsavetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightModelCalcRequest} returns this
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.setReportsavetime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool IsPvp = 4;
 * @return {boolean}
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.getIspvp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Fight.FightModelCalcRequest} returns this
 */
proto.PbModel.Fight.FightModelCalcRequest.prototype.setIspvp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Fight.FightModelCalcResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Fight.FightModelCalcResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Fight.FightModelCalcResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightModelCalcResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    iswin: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errormsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ret3: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ret4: jspb.Message.getFieldWithDefault(msg, 4, ""),
    errorcode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    remainhplistList: jspb.Message.toObjectList(msg.getRemainhplistList(),
    proto.PbModel.Fight.FightRemainHp.toObject, includeInstance),
    battlereportid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    fightround: jspb.Message.getFieldWithDefault(msg, 8, 0),
    extensioninfo: jspb.Message.getFieldWithDefault(msg, 9, ""),
    fightversion: jspb.Message.getFieldWithDefault(msg, 10, ""),
    report: jspb.Message.getFieldWithDefault(msg, 11, ""),
    totalatkdmg: jspb.Message.getFieldWithDefault(msg, 12, 0),
    statdata: jspb.Message.getFieldWithDefault(msg, 13, ""),
    amvp: jspb.Message.getFieldWithDefault(msg, 14, ""),
    dmvp: jspb.Message.getFieldWithDefault(msg, 15, ""),
    atkhpper: jspb.Message.getFieldWithDefault(msg, 16, 0),
    defhpper: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Fight.FightModelCalcResponse}
 */
proto.PbModel.Fight.FightModelCalcResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Fight.FightModelCalcResponse;
  return proto.PbModel.Fight.FightModelCalcResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Fight.FightModelCalcResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Fight.FightModelCalcResponse}
 */
proto.PbModel.Fight.FightModelCalcResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormsg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRet3(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRet4(value);
      break;
    case 5:
      var value = /** @type {!proto.PbModel.Fight.FightErrorCode} */ (reader.readEnum());
      msg.setErrorcode(value);
      break;
    case 6:
      var value = new proto.PbModel.Fight.FightRemainHp;
      reader.readMessage(value,proto.PbModel.Fight.FightRemainHp.deserializeBinaryFromReader);
      msg.addRemainhplist(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBattlereportid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFightround(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtensioninfo(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFightversion(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setReport(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalatkdmg(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatdata(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmvp(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setDmvp(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAtkhpper(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefhpper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Fight.FightModelCalcResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Fight.FightModelCalcResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Fight.FightModelCalcResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIswin();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRet3();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRet4();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getErrorcode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getRemainhplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.PbModel.Fight.FightRemainHp.serializeBinaryToWriter
    );
  }
  f = message.getBattlereportid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFightround();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getExtensioninfo();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFightversion();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getReport();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTotalatkdmg();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getStatdata();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAmvp();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getDmvp();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getAtkhpper();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getDefhpper();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
};


/**
 * optional bool IsWin = 1;
 * @return {boolean}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getIswin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setIswin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string ErrorMsg = 2;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getErrormsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setErrormsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Ret3 = 3;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getRet3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setRet3 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Ret4 = 4;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getRet4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setRet4 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional FightErrorCode ErrorCode = 5;
 * @return {!proto.PbModel.Fight.FightErrorCode}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getErrorcode = function() {
  return /** @type {!proto.PbModel.Fight.FightErrorCode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.PbModel.Fight.FightErrorCode} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setErrorcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated FightRemainHp RemainHpList = 6;
 * @return {!Array<!proto.PbModel.Fight.FightRemainHp>}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getRemainhplistList = function() {
  return /** @type{!Array<!proto.PbModel.Fight.FightRemainHp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Fight.FightRemainHp, 6));
};


/**
 * @param {!Array<!proto.PbModel.Fight.FightRemainHp>} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
*/
proto.PbModel.Fight.FightModelCalcResponse.prototype.setRemainhplistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.PbModel.Fight.FightRemainHp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Fight.FightRemainHp}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.addRemainhplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.PbModel.Fight.FightRemainHp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.clearRemainhplistList = function() {
  return this.setRemainhplistList([]);
};


/**
 * optional string BattleReportId = 7;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getBattlereportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setBattlereportid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 FightRound = 8;
 * @return {number}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getFightround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setFightround = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string ExtensionInfo = 9;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getExtensioninfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setExtensioninfo = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string FightVersion = 10;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getFightversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setFightversion = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string Report = 11;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getReport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setReport = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 TotalAtkDmg = 12;
 * @return {number}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getTotalatkdmg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setTotalatkdmg = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string StatData = 13;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getStatdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setStatdata = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string AMvp = 14;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getAmvp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setAmvp = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string DMvp = 15;
 * @return {string}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getDmvp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setDmvp = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int32 AtkHPPer = 16;
 * @return {number}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getAtkhpper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setAtkhpper = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 DefHPPer = 17;
 * @return {number}
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.getDefhpper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Fight.FightModelCalcResponse} returns this
 */
proto.PbModel.Fight.FightModelCalcResponse.prototype.setDefhpper = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * @enum {number}
 */
proto.PbModel.Fight.FightAttackEffectEnum = {
  NONEEFFECT: 0,
  DODGEEFFECT: 1,
  BOGEFFECT: 2,
  CRITICALHITSEFFECT: 3
};

/**
 * @enum {number}
 */
proto.PbModel.Fight.UnitTypeEnum = {
  HERO: 0,
  PLAYER: 1,
  SUMMONED: 2
};

/**
 * @enum {number}
 */
proto.PbModel.Fight.FightReportShowType = {
  RELEASESKILL: 0,
  HEROMOVE: 1,
  ROUNDSTART: 2,
  ROUNDOVER: 3,
  ADDBUFF: 4,
  ATKSEQ: 5,
  RPCHANGE: 6,
  TIGGERBUFF: 7,
  REMOVEBUFF: 8,
  ATTACKBEGIN: 9,
  ATTACKEND: 10
};

/**
 * @enum {number}
 */
proto.PbModel.Fight.FightErrorCode = {
  SUCCESS: 0,
  EXCEPTION: 1,
  INITFAIL: 2,
  FIGHTVERSIONINCON: 3,
  VERIFYFAIL: 4,
  HPERROR: 5,
  CONFIGVERSIONINCON: 6,
  RESULTVALUEERROR: 7
};

goog.object.extend(exports, proto.PbModel.Fight);

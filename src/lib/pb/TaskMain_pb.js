// source: TaskMain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainGetInfoReq', null, global);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainGetInfoRes', null, global);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainInfo', null, global);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq', null, global);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes', null, global);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainPushChangedRes', null, global);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainReceiveReq', null, global);
goog.exportSymbol('proto.PbModel.TaskMain.TaskMainReceiveRes', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainGetInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainGetInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainGetInfoReq.displayName = 'proto.PbModel.TaskMain.TaskMainGetInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainGetInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainGetInfoRes.displayName = 'proto.PbModel.TaskMain.TaskMainGetInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainInfo.displayName = 'proto.PbModel.TaskMain.TaskMainInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.displayName = 'proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.displayName = 'proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainReceiveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainReceiveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainReceiveReq.displayName = 'proto.PbModel.TaskMain.TaskMainReceiveReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainReceiveRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainReceiveRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainReceiveRes.displayName = 'proto.PbModel.TaskMain.TaskMainReceiveRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.TaskMain.TaskMainPushChangedRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.TaskMain.TaskMainPushChangedRes.displayName = 'proto.PbModel.TaskMain.TaskMainPushChangedRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainGetInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainGetInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainGetInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainGetInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainGetInfoReq}
 */
proto.PbModel.TaskMain.TaskMainGetInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainGetInfoReq;
  return proto.PbModel.TaskMain.TaskMainGetInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainGetInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainGetInfoReq}
 */
proto.PbModel.TaskMain.TaskMainGetInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainGetInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainGetInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainGetInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainGetInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainGetInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainGetInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    curtask: (f = msg.getCurtask()) && proto.PbModel.TaskMain.TaskMainInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainGetInfoRes}
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainGetInfoRes;
  return proto.PbModel.TaskMain.TaskMainGetInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainGetInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainGetInfoRes}
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.TaskMain.TaskMainInfo;
      reader.readMessage(value,proto.PbModel.TaskMain.TaskMainInfo.deserializeBinaryFromReader);
      msg.setCurtask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainGetInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainGetInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurtask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.TaskMain.TaskMainInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaskMainInfo CurTask = 1;
 * @return {?proto.PbModel.TaskMain.TaskMainInfo}
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.prototype.getCurtask = function() {
  return /** @type{?proto.PbModel.TaskMain.TaskMainInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.TaskMain.TaskMainInfo, 1));
};


/**
 * @param {?proto.PbModel.TaskMain.TaskMainInfo|undefined} value
 * @return {!proto.PbModel.TaskMain.TaskMainGetInfoRes} returns this
*/
proto.PbModel.TaskMain.TaskMainGetInfoRes.prototype.setCurtask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.TaskMain.TaskMainGetInfoRes} returns this
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.prototype.clearCurtask = function() {
  return this.setCurtask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.TaskMain.TaskMainGetInfoRes.prototype.hasCurtask = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isfinish: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    isreceive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    curprogress: jspb.Message.getFieldWithDefault(msg, 4, 0),
    completeprogress: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainInfo}
 */
proto.PbModel.TaskMain.TaskMainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainInfo;
  return proto.PbModel.TaskMain.TaskMainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainInfo}
 */
proto.PbModel.TaskMain.TaskMainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfinish(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreceive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurprogress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompleteprogress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIsfinish();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsreceive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCurprogress();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCompleteprogress();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int32 TaskId = 1;
 * @return {number}
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.getTaskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.TaskMain.TaskMainInfo} returns this
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.setTaskid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool IsFinish = 2;
 * @return {boolean}
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.getIsfinish = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.TaskMain.TaskMainInfo} returns this
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.setIsfinish = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool IsReceive = 3;
 * @return {boolean}
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.getIsreceive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.TaskMain.TaskMainInfo} returns this
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.setIsreceive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 CurProgress = 4;
 * @return {number}
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.getCurprogress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.TaskMain.TaskMainInfo} returns this
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.setCurprogress = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 CompleteProgress = 5;
 * @return {number}
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.getCompleteprogress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.TaskMain.TaskMainInfo} returns this
 */
proto.PbModel.TaskMain.TaskMainInfo.prototype.setCompleteprogress = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq;
  return proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 TaskId = 1;
 * @return {number}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.prototype.getTaskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq} returns this
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugReq.prototype.setTaskid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    curtask: (f = msg.getCurtask()) && proto.PbModel.TaskMain.TaskMainInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes;
  return proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.TaskMain.TaskMainInfo;
      reader.readMessage(value,proto.PbModel.TaskMain.TaskMainInfo.deserializeBinaryFromReader);
      msg.setCurtask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurtask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.TaskMain.TaskMainInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaskMainInfo CurTask = 1;
 * @return {?proto.PbModel.TaskMain.TaskMainInfo}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.prototype.getCurtask = function() {
  return /** @type{?proto.PbModel.TaskMain.TaskMainInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.TaskMain.TaskMainInfo, 1));
};


/**
 * @param {?proto.PbModel.TaskMain.TaskMainInfo|undefined} value
 * @return {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes} returns this
*/
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.prototype.setCurtask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes} returns this
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.prototype.clearCurtask = function() {
  return this.setCurtask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.TaskMain.TaskMainModifyTaskIdForDebugRes.prototype.hasCurtask = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainReceiveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainReceiveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainReceiveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainReceiveReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveReq}
 */
proto.PbModel.TaskMain.TaskMainReceiveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainReceiveReq;
  return proto.PbModel.TaskMain.TaskMainReceiveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainReceiveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveReq}
 */
proto.PbModel.TaskMain.TaskMainReceiveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainReceiveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainReceiveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainReceiveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainReceiveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainReceiveRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainReceiveRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    curtask: (f = msg.getCurtask()) && proto.PbModel.TaskMain.TaskMainInfo.toObject(includeInstance, f),
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveRes}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainReceiveRes;
  return proto.PbModel.TaskMain.TaskMainReceiveRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainReceiveRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveRes}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.TaskMain.TaskMainInfo;
      reader.readMessage(value,proto.PbModel.TaskMain.TaskMainInfo.deserializeBinaryFromReader);
      msg.setCurtask(value);
      break;
    case 2:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainReceiveRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainReceiveRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurtask();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.TaskMain.TaskMainInfo.serializeBinaryToWriter
    );
  }
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaskMainInfo CurTask = 1;
 * @return {?proto.PbModel.TaskMain.TaskMainInfo}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.getCurtask = function() {
  return /** @type{?proto.PbModel.TaskMain.TaskMainInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.TaskMain.TaskMainInfo, 1));
};


/**
 * @param {?proto.PbModel.TaskMain.TaskMainInfo|undefined} value
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveRes} returns this
*/
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.setCurtask = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveRes} returns this
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.clearCurtask = function() {
  return this.setCurtask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.hasCurtask = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 2;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 2));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveRes} returns this
*/
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.TaskMain.TaskMainReceiveRes} returns this
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.TaskMain.TaskMainReceiveRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.TaskMain.TaskMainPushChangedRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.TaskMain.TaskMainPushChangedRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskmaininfo: (f = msg.getTaskmaininfo()) && proto.PbModel.TaskMain.TaskMainInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.TaskMain.TaskMainPushChangedRes}
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.TaskMain.TaskMainPushChangedRes;
  return proto.PbModel.TaskMain.TaskMainPushChangedRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.TaskMain.TaskMainPushChangedRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.TaskMain.TaskMainPushChangedRes}
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.TaskMain.TaskMainInfo;
      reader.readMessage(value,proto.PbModel.TaskMain.TaskMainInfo.deserializeBinaryFromReader);
      msg.setTaskmaininfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.TaskMain.TaskMainPushChangedRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.TaskMain.TaskMainPushChangedRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskmaininfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.TaskMain.TaskMainInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaskMainInfo TaskMainInfo = 1;
 * @return {?proto.PbModel.TaskMain.TaskMainInfo}
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.prototype.getTaskmaininfo = function() {
  return /** @type{?proto.PbModel.TaskMain.TaskMainInfo} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.TaskMain.TaskMainInfo, 1));
};


/**
 * @param {?proto.PbModel.TaskMain.TaskMainInfo|undefined} value
 * @return {!proto.PbModel.TaskMain.TaskMainPushChangedRes} returns this
*/
proto.PbModel.TaskMain.TaskMainPushChangedRes.prototype.setTaskmaininfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.TaskMain.TaskMainPushChangedRes} returns this
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.prototype.clearTaskmaininfo = function() {
  return this.setTaskmaininfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.TaskMain.TaskMainPushChangedRes.prototype.hasTaskmaininfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.PbModel.TaskMain);

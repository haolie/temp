// source: Friend.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Resource_pb = require('./Resource_pb.js');
goog.object.extend(proto, Resource_pb);
goog.exportSymbol('proto.PbModel.Friend.FriendApplyBatchHandleReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendApplyBatchHandleRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendApplyHandleReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendApplyHandleRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendApplyReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendApplyRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendBlockDeleteReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendBlockDeleteRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendBlockReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendBlockRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendDeleteReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendDeleteRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendDetail', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetAddListReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetAddListRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetApplyListReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetApplyListRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetBlockListReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetBlockListRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetListReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetListRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetShipCoinReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGetShipCoinRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGiveAndGetShipCoinReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGiveAndGetShipCoinRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGiveShipCoinReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendGiveShipCoinRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendInfoModel', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendPushApplyRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendPushBlockInfosRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendPushChangeInfoRes', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendShortcutApplyReq', null, global);
goog.exportSymbol('proto.PbModel.Friend.FriendShortcutApplyRes', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendDetail.displayName = 'proto.PbModel.Friend.FriendDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendInfoModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendInfoModel.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendInfoModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendInfoModel.displayName = 'proto.PbModel.Friend.FriendInfoModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendApplyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendApplyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendApplyReq.displayName = 'proto.PbModel.Friend.FriendApplyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendApplyRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendApplyRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendApplyRes.displayName = 'proto.PbModel.Friend.FriendApplyRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendApplyBatchHandleReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendApplyBatchHandleReq.displayName = 'proto.PbModel.Friend.FriendApplyBatchHandleReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendApplyBatchHandleRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendApplyBatchHandleRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendApplyBatchHandleRes.displayName = 'proto.PbModel.Friend.FriendApplyBatchHandleRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendApplyHandleReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendApplyHandleReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendApplyHandleReq.displayName = 'proto.PbModel.Friend.FriendApplyHandleReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendApplyHandleRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendApplyHandleRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendApplyHandleRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendApplyHandleRes.displayName = 'proto.PbModel.Friend.FriendApplyHandleRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendBlockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendBlockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendBlockReq.displayName = 'proto.PbModel.Friend.FriendBlockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendBlockRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendBlockRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendBlockRes.displayName = 'proto.PbModel.Friend.FriendBlockRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendBlockDeleteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendBlockDeleteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendBlockDeleteReq.displayName = 'proto.PbModel.Friend.FriendBlockDeleteReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendBlockDeleteRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendBlockDeleteRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendBlockDeleteRes.displayName = 'proto.PbModel.Friend.FriendBlockDeleteRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendDeleteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendDeleteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendDeleteReq.displayName = 'proto.PbModel.Friend.FriendDeleteReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendDeleteRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendDeleteRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendDeleteRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendDeleteRes.displayName = 'proto.PbModel.Friend.FriendDeleteRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetAddListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetAddListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetAddListReq.displayName = 'proto.PbModel.Friend.FriendGetAddListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetAddListRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendGetAddListRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetAddListRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetAddListRes.displayName = 'proto.PbModel.Friend.FriendGetAddListRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetApplyListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetApplyListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetApplyListReq.displayName = 'proto.PbModel.Friend.FriendGetApplyListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetApplyListRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendGetApplyListRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetApplyListRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetApplyListRes.displayName = 'proto.PbModel.Friend.FriendGetApplyListRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetBlockListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetBlockListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetBlockListReq.displayName = 'proto.PbModel.Friend.FriendGetBlockListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetBlockListRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendGetBlockListRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetBlockListRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetBlockListRes.displayName = 'proto.PbModel.Friend.FriendGetBlockListRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetListReq.displayName = 'proto.PbModel.Friend.FriendGetListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetListRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendGetListRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetListRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetListRes.displayName = 'proto.PbModel.Friend.FriendGetListRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetShipCoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetShipCoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetShipCoinReq.displayName = 'proto.PbModel.Friend.FriendGetShipCoinReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGetShipCoinRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGetShipCoinRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGetShipCoinRes.displayName = 'proto.PbModel.Friend.FriendGetShipCoinRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGiveAndGetShipCoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.displayName = 'proto.PbModel.Friend.FriendGiveAndGetShipCoinReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGiveAndGetShipCoinRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.displayName = 'proto.PbModel.Friend.FriendGiveAndGetShipCoinRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGiveShipCoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGiveShipCoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGiveShipCoinReq.displayName = 'proto.PbModel.Friend.FriendGiveShipCoinReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendGiveShipCoinRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendGiveShipCoinRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendGiveShipCoinRes.displayName = 'proto.PbModel.Friend.FriendGiveShipCoinRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendPushBlockInfosRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendPushBlockInfosRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendPushBlockInfosRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendPushBlockInfosRes.displayName = 'proto.PbModel.Friend.FriendPushBlockInfosRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendPushChangeInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PbModel.Friend.FriendPushChangeInfoRes.repeatedFields_, null);
};
goog.inherits(proto.PbModel.Friend.FriendPushChangeInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendPushChangeInfoRes.displayName = 'proto.PbModel.Friend.FriendPushChangeInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendShortcutApplyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendShortcutApplyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendShortcutApplyReq.displayName = 'proto.PbModel.Friend.FriendShortcutApplyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendShortcutApplyRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendShortcutApplyRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendShortcutApplyRes.displayName = 'proto.PbModel.Friend.FriendShortcutApplyRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PbModel.Friend.FriendPushApplyRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PbModel.Friend.FriendPushApplyRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PbModel.Friend.FriendPushApplyRes.displayName = 'proto.PbModel.Friend.FriendPushApplyRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendplayerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    friendplayername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lv: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fap: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastonlinetime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    servername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    guildname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    headimageid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    createtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    partnerid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    isgive: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    receivetype: jspb.Message.getFieldWithDefault(msg, 13, 0),
    activetimetick: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendDetail;
  return proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendplayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendplayername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLv(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFap(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastonlinetime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setServername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuildname(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadimageid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartnerid(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgive(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceivetype(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActivetimetick(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFriendplayername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLv();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFap();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastonlinetime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getServername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGuildname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getHeadimageid();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPartnerid();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getIsgive();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getReceivetype();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getActivetimetick();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional string FriendPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendDetail.prototype.getFriendplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setFriendplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string FriendPlayerName = 2;
 * @return {string}
 */
proto.PbModel.Friend.FriendDetail.prototype.getFriendplayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setFriendplayername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 Lv = 3;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setLv = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Fap = 4;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getFap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setFap = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string LastOnlineTime = 5;
 * @return {string}
 */
proto.PbModel.Friend.FriendDetail.prototype.getLastonlinetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setLastonlinetime = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ServerName = 6;
 * @return {string}
 */
proto.PbModel.Friend.FriendDetail.prototype.getServername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setServername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string GuildName = 7;
 * @return {string}
 */
proto.PbModel.Friend.FriendDetail.prototype.getGuildname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setGuildname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 HeadImageId = 8;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getHeadimageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setHeadimageid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 CreateTime = 9;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 ServerId = 10;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 PartnerId = 11;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getPartnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setPartnerid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool IsGive = 12;
 * @return {boolean}
 */
proto.PbModel.Friend.FriendDetail.prototype.getIsgive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setIsgive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional int32 ReceiveType = 13;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getReceivetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setReceivetype = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 ActiveTimeTick = 14;
 * @return {number}
 */
proto.PbModel.Friend.FriendDetail.prototype.getActivetimetick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendDetail} returns this
 */
proto.PbModel.Friend.FriendDetail.prototype.setActivetimetick = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendInfoModel.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendInfoModel.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendInfoModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendInfoModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendInfoModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    giveplayeridlistList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    unclaimedplayeridlistList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    receiveplayeridlistList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendInfoModel}
 */
proto.PbModel.Friend.FriendInfoModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendInfoModel;
  return proto.PbModel.Friend.FriendInfoModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendInfoModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendInfoModel}
 */
proto.PbModel.Friend.FriendInfoModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGiveplayeridlist(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUnclaimedplayeridlist(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addReceiveplayeridlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendInfoModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendInfoModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendInfoModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendInfoModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGiveplayeridlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUnclaimedplayeridlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getReceiveplayeridlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string GivePlayerIdList = 1;
 * @return {!Array<string>}
 */
proto.PbModel.Friend.FriendInfoModel.prototype.getGiveplayeridlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.setGiveplayeridlistList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.addGiveplayeridlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.clearGiveplayeridlistList = function() {
  return this.setGiveplayeridlistList([]);
};


/**
 * repeated string UnclaimedPlayerIdList = 2;
 * @return {!Array<string>}
 */
proto.PbModel.Friend.FriendInfoModel.prototype.getUnclaimedplayeridlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.setUnclaimedplayeridlistList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.addUnclaimedplayeridlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.clearUnclaimedplayeridlistList = function() {
  return this.setUnclaimedplayeridlistList([]);
};


/**
 * repeated string ReceivePlayerIdList = 3;
 * @return {!Array<string>}
 */
proto.PbModel.Friend.FriendInfoModel.prototype.getReceiveplayeridlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.setReceiveplayeridlistList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.addReceiveplayeridlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendInfoModel} returns this
 */
proto.PbModel.Friend.FriendInfoModel.prototype.clearReceiveplayeridlistList = function() {
  return this.setReceiveplayeridlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendApplyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendApplyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendApplyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    applyplayerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendApplyReq}
 */
proto.PbModel.Friend.FriendApplyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendApplyReq;
  return proto.PbModel.Friend.FriendApplyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendApplyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendApplyReq}
 */
proto.PbModel.Friend.FriendApplyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplyplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendApplyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendApplyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendApplyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplyplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ApplyPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendApplyReq.prototype.getApplyplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendApplyReq} returns this
 */
proto.PbModel.Friend.FriendApplyReq.prototype.setApplyplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendApplyRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendApplyRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendApplyRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendApplyRes}
 */
proto.PbModel.Friend.FriendApplyRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendApplyRes;
  return proto.PbModel.Friend.FriendApplyRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendApplyRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendApplyRes}
 */
proto.PbModel.Friend.FriendApplyRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendApplyRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendApplyRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendApplyRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendApplyBatchHandleReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendApplyBatchHandleReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    isagree: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleReq}
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendApplyBatchHandleReq;
  return proto.PbModel.Friend.FriendApplyBatchHandleReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendApplyBatchHandleReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleReq}
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsagree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendApplyBatchHandleReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendApplyBatchHandleReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsagree();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool IsAgree = 1;
 * @return {boolean}
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.prototype.getIsagree = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleReq} returns this
 */
proto.PbModel.Friend.FriendApplyBatchHandleReq.prototype.setIsagree = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendApplyBatchHandleRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendApplyBatchHandleRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    haveadd: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    addlistList: jspb.Message.toObjectList(msg.getAddlistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleRes}
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendApplyBatchHandleRes;
  return proto.PbModel.Friend.FriendApplyBatchHandleRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendApplyBatchHandleRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleRes}
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaveadd(value);
      break;
    case 2:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addAddlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendApplyBatchHandleRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendApplyBatchHandleRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHaveadd();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAddlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool HaveAdd = 1;
 * @return {boolean}
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.getHaveadd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleRes} returns this
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.setHaveadd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated FriendDetail AddList = 2;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.getAddlistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 2));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleRes} returns this
*/
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.setAddlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.addAddlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendApplyBatchHandleRes} returns this
 */
proto.PbModel.Friend.FriendApplyBatchHandleRes.prototype.clearAddlistList = function() {
  return this.setAddlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendApplyHandleReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendApplyHandleReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendApplyHandleReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyHandleReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    appliedplayerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isagree: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendApplyHandleReq}
 */
proto.PbModel.Friend.FriendApplyHandleReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendApplyHandleReq;
  return proto.PbModel.Friend.FriendApplyHandleReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendApplyHandleReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendApplyHandleReq}
 */
proto.PbModel.Friend.FriendApplyHandleReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppliedplayerid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsagree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendApplyHandleReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendApplyHandleReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendApplyHandleReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyHandleReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppliedplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsagree();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string AppliedPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendApplyHandleReq.prototype.getAppliedplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendApplyHandleReq} returns this
 */
proto.PbModel.Friend.FriendApplyHandleReq.prototype.setAppliedplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool IsAgree = 2;
 * @return {boolean}
 */
proto.PbModel.Friend.FriendApplyHandleReq.prototype.getIsagree = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Friend.FriendApplyHandleReq} returns this
 */
proto.PbModel.Friend.FriendApplyHandleReq.prototype.setIsagree = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendApplyHandleRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendApplyHandleRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendApplyHandleRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendApplyHandleRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyHandleRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    haveadd: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    addlistList: jspb.Message.toObjectList(msg.getAddlistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendApplyHandleRes}
 */
proto.PbModel.Friend.FriendApplyHandleRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendApplyHandleRes;
  return proto.PbModel.Friend.FriendApplyHandleRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendApplyHandleRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendApplyHandleRes}
 */
proto.PbModel.Friend.FriendApplyHandleRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaveadd(value);
      break;
    case 2:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addAddlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendApplyHandleRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendApplyHandleRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendApplyHandleRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendApplyHandleRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHaveadd();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAddlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool HaveAdd = 1;
 * @return {boolean}
 */
proto.PbModel.Friend.FriendApplyHandleRes.prototype.getHaveadd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PbModel.Friend.FriendApplyHandleRes} returns this
 */
proto.PbModel.Friend.FriendApplyHandleRes.prototype.setHaveadd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated FriendDetail AddList = 2;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendApplyHandleRes.prototype.getAddlistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 2));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendApplyHandleRes} returns this
*/
proto.PbModel.Friend.FriendApplyHandleRes.prototype.setAddlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendApplyHandleRes.prototype.addAddlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendApplyHandleRes} returns this
 */
proto.PbModel.Friend.FriendApplyHandleRes.prototype.clearAddlistList = function() {
  return this.setAddlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendBlockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendBlockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendBlockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockplayerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendBlockReq}
 */
proto.PbModel.Friend.FriendBlockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendBlockReq;
  return proto.PbModel.Friend.FriendBlockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendBlockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendBlockReq}
 */
proto.PbModel.Friend.FriendBlockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendBlockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendBlockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendBlockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string BlockPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendBlockReq.prototype.getBlockplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendBlockReq} returns this
 */
proto.PbModel.Friend.FriendBlockReq.prototype.setBlockplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendBlockRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendBlockRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendBlockRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockplayerinfo: (f = msg.getBlockplayerinfo()) && proto.PbModel.Friend.FriendDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendBlockRes}
 */
proto.PbModel.Friend.FriendBlockRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendBlockRes;
  return proto.PbModel.Friend.FriendBlockRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendBlockRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendBlockRes}
 */
proto.PbModel.Friend.FriendBlockRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.setBlockplayerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendBlockRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendBlockRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendBlockRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockplayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional FriendDetail BlockPlayerInfo = 1;
 * @return {?proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendBlockRes.prototype.getBlockplayerinfo = function() {
  return /** @type{?proto.PbModel.Friend.FriendDetail} */ (
    jspb.Message.getWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {?proto.PbModel.Friend.FriendDetail|undefined} value
 * @return {!proto.PbModel.Friend.FriendBlockRes} returns this
*/
proto.PbModel.Friend.FriendBlockRes.prototype.setBlockplayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Friend.FriendBlockRes} returns this
 */
proto.PbModel.Friend.FriendBlockRes.prototype.clearBlockplayerinfo = function() {
  return this.setBlockplayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Friend.FriendBlockRes.prototype.hasBlockplayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendBlockDeleteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendBlockDeleteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendBlockDeleteReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockDeleteReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockplayerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendBlockDeleteReq}
 */
proto.PbModel.Friend.FriendBlockDeleteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendBlockDeleteReq;
  return proto.PbModel.Friend.FriendBlockDeleteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendBlockDeleteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendBlockDeleteReq}
 */
proto.PbModel.Friend.FriendBlockDeleteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendBlockDeleteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendBlockDeleteReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendBlockDeleteReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockDeleteReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string BlockPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendBlockDeleteReq.prototype.getBlockplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendBlockDeleteReq} returns this
 */
proto.PbModel.Friend.FriendBlockDeleteReq.prototype.setBlockplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendBlockDeleteRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendBlockDeleteRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendBlockDeleteRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockDeleteRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendBlockDeleteRes}
 */
proto.PbModel.Friend.FriendBlockDeleteRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendBlockDeleteRes;
  return proto.PbModel.Friend.FriendBlockDeleteRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendBlockDeleteRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendBlockDeleteRes}
 */
proto.PbModel.Friend.FriendBlockDeleteRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendBlockDeleteRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendBlockDeleteRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendBlockDeleteRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendBlockDeleteRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendDeleteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendDeleteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendDeleteReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendDeleteReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendplayerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendDeleteReq}
 */
proto.PbModel.Friend.FriendDeleteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendDeleteReq;
  return proto.PbModel.Friend.FriendDeleteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendDeleteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendDeleteReq}
 */
proto.PbModel.Friend.FriendDeleteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendDeleteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendDeleteReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendDeleteReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendDeleteReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string FriendPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendDeleteReq.prototype.getFriendplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendDeleteReq} returns this
 */
proto.PbModel.Friend.FriendDeleteReq.prototype.setFriendplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendDeleteRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendDeleteRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendDeleteRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendDeleteRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendDeleteRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendlistList: jspb.Message.toObjectList(msg.getFriendlistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendDeleteRes}
 */
proto.PbModel.Friend.FriendDeleteRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendDeleteRes;
  return proto.PbModel.Friend.FriendDeleteRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendDeleteRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendDeleteRes}
 */
proto.PbModel.Friend.FriendDeleteRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addFriendlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendDeleteRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendDeleteRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendDeleteRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendDeleteRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendDetail FriendList = 1;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendDeleteRes.prototype.getFriendlistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendDeleteRes} returns this
*/
proto.PbModel.Friend.FriendDeleteRes.prototype.setFriendlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendDeleteRes.prototype.addFriendlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendDeleteRes} returns this
 */
proto.PbModel.Friend.FriendDeleteRes.prototype.clearFriendlistList = function() {
  return this.setFriendlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetAddListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetAddListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetAddListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetAddListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetAddListReq}
 */
proto.PbModel.Friend.FriendGetAddListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetAddListReq;
  return proto.PbModel.Friend.FriendGetAddListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetAddListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetAddListReq}
 */
proto.PbModel.Friend.FriendGetAddListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetAddListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetAddListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetAddListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetAddListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string PlayerName = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendGetAddListReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendGetAddListReq} returns this
 */
proto.PbModel.Friend.FriendGetAddListReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendGetAddListRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetAddListRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetAddListRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetAddListRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetAddListRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    addlistList: jspb.Message.toObjectList(msg.getAddlistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetAddListRes}
 */
proto.PbModel.Friend.FriendGetAddListRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetAddListRes;
  return proto.PbModel.Friend.FriendGetAddListRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetAddListRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetAddListRes}
 */
proto.PbModel.Friend.FriendGetAddListRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addAddlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetAddListRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetAddListRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetAddListRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetAddListRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendDetail AddList = 1;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendGetAddListRes.prototype.getAddlistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendGetAddListRes} returns this
*/
proto.PbModel.Friend.FriendGetAddListRes.prototype.setAddlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendGetAddListRes.prototype.addAddlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendGetAddListRes} returns this
 */
proto.PbModel.Friend.FriendGetAddListRes.prototype.clearAddlistList = function() {
  return this.setAddlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetApplyListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetApplyListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetApplyListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetApplyListReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetApplyListReq}
 */
proto.PbModel.Friend.FriendGetApplyListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetApplyListReq;
  return proto.PbModel.Friend.FriendGetApplyListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetApplyListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetApplyListReq}
 */
proto.PbModel.Friend.FriendGetApplyListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetApplyListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetApplyListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetApplyListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetApplyListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendGetApplyListRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetApplyListRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetApplyListRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetApplyListRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetApplyListRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    applylistList: jspb.Message.toObjectList(msg.getApplylistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetApplyListRes}
 */
proto.PbModel.Friend.FriendGetApplyListRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetApplyListRes;
  return proto.PbModel.Friend.FriendGetApplyListRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetApplyListRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetApplyListRes}
 */
proto.PbModel.Friend.FriendGetApplyListRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addApplylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetApplyListRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetApplyListRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetApplyListRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetApplyListRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendDetail ApplyList = 1;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendGetApplyListRes.prototype.getApplylistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendGetApplyListRes} returns this
*/
proto.PbModel.Friend.FriendGetApplyListRes.prototype.setApplylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendGetApplyListRes.prototype.addApplylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendGetApplyListRes} returns this
 */
proto.PbModel.Friend.FriendGetApplyListRes.prototype.clearApplylistList = function() {
  return this.setApplylistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetBlockListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetBlockListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetBlockListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetBlockListReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetBlockListReq}
 */
proto.PbModel.Friend.FriendGetBlockListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetBlockListReq;
  return proto.PbModel.Friend.FriendGetBlockListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetBlockListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetBlockListReq}
 */
proto.PbModel.Friend.FriendGetBlockListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetBlockListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetBlockListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetBlockListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetBlockListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendGetBlockListRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetBlockListRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetBlockListRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetBlockListRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetBlockListRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocklistList: jspb.Message.toObjectList(msg.getBlocklistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetBlockListRes}
 */
proto.PbModel.Friend.FriendGetBlockListRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetBlockListRes;
  return proto.PbModel.Friend.FriendGetBlockListRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetBlockListRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetBlockListRes}
 */
proto.PbModel.Friend.FriendGetBlockListRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addBlocklist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetBlockListRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetBlockListRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetBlockListRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetBlockListRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocklistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendDetail BlockList = 1;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendGetBlockListRes.prototype.getBlocklistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendGetBlockListRes} returns this
*/
proto.PbModel.Friend.FriendGetBlockListRes.prototype.setBlocklistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendGetBlockListRes.prototype.addBlocklist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendGetBlockListRes} returns this
 */
proto.PbModel.Friend.FriendGetBlockListRes.prototype.clearBlocklistList = function() {
  return this.setBlocklistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetListReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetListReq}
 */
proto.PbModel.Friend.FriendGetListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetListReq;
  return proto.PbModel.Friend.FriendGetListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetListReq}
 */
proto.PbModel.Friend.FriendGetListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendGetListRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetListRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetListRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetListRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetListRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendlistList: jspb.Message.toObjectList(msg.getFriendlistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance),
    givecount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    receivecount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetListRes}
 */
proto.PbModel.Friend.FriendGetListRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetListRes;
  return proto.PbModel.Friend.FriendGetListRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetListRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetListRes}
 */
proto.PbModel.Friend.FriendGetListRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addFriendlist(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGivecount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceivecount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetListRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetListRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetListRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetListRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
  f = message.getGivecount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getReceivecount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated FriendDetail FriendList = 1;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendGetListRes.prototype.getFriendlistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendGetListRes} returns this
*/
proto.PbModel.Friend.FriendGetListRes.prototype.setFriendlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendGetListRes.prototype.addFriendlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendGetListRes} returns this
 */
proto.PbModel.Friend.FriendGetListRes.prototype.clearFriendlistList = function() {
  return this.setFriendlistList([]);
};


/**
 * optional int32 GiveCount = 2;
 * @return {number}
 */
proto.PbModel.Friend.FriendGetListRes.prototype.getGivecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendGetListRes} returns this
 */
proto.PbModel.Friend.FriendGetListRes.prototype.setGivecount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 ReceiveCount = 3;
 * @return {number}
 */
proto.PbModel.Friend.FriendGetListRes.prototype.getReceivecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendGetListRes} returns this
 */
proto.PbModel.Friend.FriendGetListRes.prototype.setReceivecount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetShipCoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetShipCoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetShipCoinReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetShipCoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetShipCoinReq}
 */
proto.PbModel.Friend.FriendGetShipCoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetShipCoinReq;
  return proto.PbModel.Friend.FriendGetShipCoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetShipCoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetShipCoinReq}
 */
proto.PbModel.Friend.FriendGetShipCoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetShipCoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetShipCoinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetShipCoinReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetShipCoinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendGetShipCoinReq.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendGetShipCoinReq} returns this
 */
proto.PbModel.Friend.FriendGetShipCoinReq.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGetShipCoinRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGetShipCoinRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGetShipCoinRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetShipCoinRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGetShipCoinRes}
 */
proto.PbModel.Friend.FriendGetShipCoinRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGetShipCoinRes;
  return proto.PbModel.Friend.FriendGetShipCoinRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGetShipCoinRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGetShipCoinRes}
 */
proto.PbModel.Friend.FriendGetShipCoinRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGetShipCoinRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGetShipCoinRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGetShipCoinRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGetShipCoinRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 1;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Friend.FriendGetShipCoinRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 1));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Friend.FriendGetShipCoinRes} returns this
*/
proto.PbModel.Friend.FriendGetShipCoinRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Friend.FriendGetShipCoinRes} returns this
 */
proto.PbModel.Friend.FriendGetShipCoinRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Friend.FriendGetShipCoinRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGiveAndGetShipCoinReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinReq}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGiveAndGetShipCoinReq;
  return proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGiveAndGetShipCoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinReq}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGiveAndGetShipCoinReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    giveplayerids: jspb.Message.getFieldWithDefault(msg, 1, ""),
    getplayerids: jspb.Message.getFieldWithDefault(msg, 2, ""),
    basegetgameresourcelist: (f = msg.getBasegetgameresourcelist()) && Resource_pb.ResourceToClientModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGiveAndGetShipCoinRes;
  return proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGiveplayerids(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGetplayerids(value);
      break;
    case 3:
      var value = new Resource_pb.ResourceToClientModel;
      reader.readMessage(value,Resource_pb.ResourceToClientModel.deserializeBinaryFromReader);
      msg.setBasegetgameresourcelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGiveplayerids();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGetplayerids();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBasegetgameresourcelist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Resource_pb.ResourceToClientModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional string GivePlayerIds = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.getGiveplayerids = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes} returns this
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.setGiveplayerids = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string GetPlayerIds = 2;
 * @return {string}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.getGetplayerids = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes} returns this
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.setGetplayerids = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PbModel.Resource.ResourceToClientModel BaseGetGameResourceList = 3;
 * @return {?proto.PbModel.Resource.ResourceToClientModel}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.getBasegetgameresourcelist = function() {
  return /** @type{?proto.PbModel.Resource.ResourceToClientModel} */ (
    jspb.Message.getWrapperField(this, Resource_pb.ResourceToClientModel, 3));
};


/**
 * @param {?proto.PbModel.Resource.ResourceToClientModel|undefined} value
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes} returns this
*/
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.setBasegetgameresourcelist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PbModel.Friend.FriendGiveAndGetShipCoinRes} returns this
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.clearBasegetgameresourcelist = function() {
  return this.setBasegetgameresourcelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PbModel.Friend.FriendGiveAndGetShipCoinRes.prototype.hasBasegetgameresourcelist = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGiveShipCoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGiveShipCoinReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGiveShipCoinReq}
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGiveShipCoinReq;
  return proto.PbModel.Friend.FriendGiveShipCoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGiveShipCoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGiveShipCoinReq}
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGiveShipCoinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGiveShipCoinReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string PlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendGiveShipCoinReq} returns this
 */
proto.PbModel.Friend.FriendGiveShipCoinReq.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendGiveShipCoinRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendGiveShipCoinRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendGiveShipCoinRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveShipCoinRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendGiveShipCoinRes}
 */
proto.PbModel.Friend.FriendGiveShipCoinRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendGiveShipCoinRes;
  return proto.PbModel.Friend.FriendGiveShipCoinRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendGiveShipCoinRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendGiveShipCoinRes}
 */
proto.PbModel.Friend.FriendGiveShipCoinRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendGiveShipCoinRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendGiveShipCoinRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendGiveShipCoinRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendGiveShipCoinRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendPushBlockInfosRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendPushBlockInfosRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocklistList: jspb.Message.toObjectList(msg.getBlocklistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendPushBlockInfosRes}
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendPushBlockInfosRes;
  return proto.PbModel.Friend.FriendPushBlockInfosRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendPushBlockInfosRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendPushBlockInfosRes}
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addBlocklist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendPushBlockInfosRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendPushBlockInfosRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocklistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendDetail BlockList = 1;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.prototype.getBlocklistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendPushBlockInfosRes} returns this
*/
proto.PbModel.Friend.FriendPushBlockInfosRes.prototype.setBlocklistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.prototype.addBlocklist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendPushBlockInfosRes} returns this
 */
proto.PbModel.Friend.FriendPushBlockInfosRes.prototype.clearBlocklistList = function() {
  return this.setBlocklistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendPushChangeInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendPushChangeInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    changefriendinfolistList: jspb.Message.toObjectList(msg.getChangefriendinfolistList(),
    proto.PbModel.Friend.FriendDetail.toObject, includeInstance),
    changetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendPushChangeInfoRes}
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendPushChangeInfoRes;
  return proto.PbModel.Friend.FriendPushChangeInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendPushChangeInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendPushChangeInfoRes}
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PbModel.Friend.FriendDetail;
      reader.readMessage(value,proto.PbModel.Friend.FriendDetail.deserializeBinaryFromReader);
      msg.addChangefriendinfolist(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChangetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendPushChangeInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendPushChangeInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangefriendinfolistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PbModel.Friend.FriendDetail.serializeBinaryToWriter
    );
  }
  f = message.getChangetype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated FriendDetail ChangeFriendInfoList = 1;
 * @return {!Array<!proto.PbModel.Friend.FriendDetail>}
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.getChangefriendinfolistList = function() {
  return /** @type{!Array<!proto.PbModel.Friend.FriendDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PbModel.Friend.FriendDetail, 1));
};


/**
 * @param {!Array<!proto.PbModel.Friend.FriendDetail>} value
 * @return {!proto.PbModel.Friend.FriendPushChangeInfoRes} returns this
*/
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.setChangefriendinfolistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PbModel.Friend.FriendDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PbModel.Friend.FriendDetail}
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.addChangefriendinfolist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PbModel.Friend.FriendDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PbModel.Friend.FriendPushChangeInfoRes} returns this
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.clearChangefriendinfolistList = function() {
  return this.setChangefriendinfolistList([]);
};


/**
 * optional int32 ChangeType = 2;
 * @return {number}
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.getChangetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PbModel.Friend.FriendPushChangeInfoRes} returns this
 */
proto.PbModel.Friend.FriendPushChangeInfoRes.prototype.setChangetype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendShortcutApplyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendShortcutApplyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendShortcutApplyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendShortcutApplyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    applyplayerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendShortcutApplyReq}
 */
proto.PbModel.Friend.FriendShortcutApplyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendShortcutApplyReq;
  return proto.PbModel.Friend.FriendShortcutApplyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendShortcutApplyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendShortcutApplyReq}
 */
proto.PbModel.Friend.FriendShortcutApplyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplyplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendShortcutApplyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendShortcutApplyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendShortcutApplyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendShortcutApplyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplyplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ApplyPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendShortcutApplyReq.prototype.getApplyplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendShortcutApplyReq} returns this
 */
proto.PbModel.Friend.FriendShortcutApplyReq.prototype.setApplyplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendShortcutApplyRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendShortcutApplyRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendShortcutApplyRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendShortcutApplyRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendShortcutApplyRes}
 */
proto.PbModel.Friend.FriendShortcutApplyRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendShortcutApplyRes;
  return proto.PbModel.Friend.FriendShortcutApplyRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendShortcutApplyRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendShortcutApplyRes}
 */
proto.PbModel.Friend.FriendShortcutApplyRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendShortcutApplyRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendShortcutApplyRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendShortcutApplyRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendShortcutApplyRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PbModel.Friend.FriendPushApplyRes.prototype.toObject = function(opt_includeInstance) {
  return proto.PbModel.Friend.FriendPushApplyRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PbModel.Friend.FriendPushApplyRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendPushApplyRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    appliedplayerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PbModel.Friend.FriendPushApplyRes}
 */
proto.PbModel.Friend.FriendPushApplyRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PbModel.Friend.FriendPushApplyRes;
  return proto.PbModel.Friend.FriendPushApplyRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PbModel.Friend.FriendPushApplyRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PbModel.Friend.FriendPushApplyRes}
 */
proto.PbModel.Friend.FriendPushApplyRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppliedplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PbModel.Friend.FriendPushApplyRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PbModel.Friend.FriendPushApplyRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PbModel.Friend.FriendPushApplyRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PbModel.Friend.FriendPushApplyRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppliedplayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string AppliedPlayerId = 1;
 * @return {string}
 */
proto.PbModel.Friend.FriendPushApplyRes.prototype.getAppliedplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PbModel.Friend.FriendPushApplyRes} returns this
 */
proto.PbModel.Friend.FriendPushApplyRes.prototype.setAppliedplayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.PbModel.Friend);
